
PID_BLDC_SELF_BALANCING_ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08007a44  08007a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f74  08007f74  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  08007f74  08007f74  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f74  08007f74  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f74  08007f74  00017f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f78  08007f78  00017f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08007f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  200000c4  08008040  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08008040  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a7b  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3b  00000000  00000000  00038b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0003b9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  0003caf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d23a  00000000  00000000  0003db18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016868  00000000  00000000  0005ad52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8c11  00000000  00000000  000715ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a1cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c50  00000000  00000000  0011a220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a2c 	.word	0x08007a2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	08007a2c 	.word	0x08007a2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <PID_Motor_Speed_Calculation_Init>:

#include "main.h"
#include "stdlib.h"


void PID_Motor_Speed_Calculation_Init(PID_Motor_Speed_Calculation_Structure *pid_bldc_controller_data, uint16_t maximum_motor_power,uint16_t max_duty_cycle,uint16_t min_duty_cycle, float min_pid_correction_value, float max_pid_correction_value){
 8000270:	b480      	push	{r7}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	6178      	str	r0, [r7, #20]
 8000278:	4608      	mov	r0, r1
 800027a:	4611      	mov	r1, r2
 800027c:	461a      	mov	r2, r3
 800027e:	ed87 0a02 	vstr	s0, [r7, #8]
 8000282:	edc7 0a01 	vstr	s1, [r7, #4]
 8000286:	4603      	mov	r3, r0
 8000288:	827b      	strh	r3, [r7, #18]
 800028a:	460b      	mov	r3, r1
 800028c:	823b      	strh	r3, [r7, #16]
 800028e:	4613      	mov	r3, r2
 8000290:	81fb      	strh	r3, [r7, #14]
	pid_bldc_controller_data->max_duty_cycle = ((float)maximum_motor_power/100 * (max_duty_cycle-min_duty_cycle))+min_duty_cycle;
 8000292:	8a7b      	ldrh	r3, [r7, #18]
 8000294:	ee07 3a90 	vmov	s15, r3
 8000298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800029c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80002f8 <PID_Motor_Speed_Calculation_Init+0x88>
 80002a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80002a4:	8a3a      	ldrh	r2, [r7, #16]
 80002a6:	89fb      	ldrh	r3, [r7, #14]
 80002a8:	1ad3      	subs	r3, r2, r3
 80002aa:	ee07 3a90 	vmov	s15, r3
 80002ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80002b6:	89fb      	ldrh	r3, [r7, #14]
 80002b8:	ee07 3a90 	vmov	s15, r3
 80002bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80002c8:	ee17 3a90 	vmov	r3, s15
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	811a      	strh	r2, [r3, #8]
	pid_bldc_controller_data->min_duty_cycle = min_duty_cycle;
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	89fa      	ldrh	r2, [r7, #14]
 80002d6:	815a      	strh	r2, [r3, #10]
	pid_bldc_controller_data->maximum_motor_power = maximum_motor_power;
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	8a7a      	ldrh	r2, [r7, #18]
 80002dc:	801a      	strh	r2, [r3, #0]
	pid_bldc_controller_data->min_pid_correction_value = min_pid_correction_value;
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	68ba      	ldr	r2, [r7, #8]
 80002e2:	60da      	str	r2, [r3, #12]
	pid_bldc_controller_data->max_pid_correction_value = max_pid_correction_value;
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	611a      	str	r2, [r3, #16]
}
 80002ea:	bf00      	nop
 80002ec:	371c      	adds	r7, #28
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	42c80000 	.word	0x42c80000

080002fc <PID_Motor_Speed_Calculation_duty_cycle_ms_left>:

float PID_Motor_Speed_Calculation_duty_cycle_ms_left(PID_Motor_Speed_Calculation_Structure *pid_bldc_controller_data, int current_pid_value){
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]
	float ms_value_after_limit = ((((pid_bldc_controller_data->max_duty_cycle-pid_bldc_controller_data->min_duty_cycle)/100)*pid_bldc_controller_data->maximum_motor_power));
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	891b      	ldrh	r3, [r3, #8]
 800030a:	461a      	mov	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	895b      	ldrh	r3, [r3, #10]
 8000310:	1ad3      	subs	r3, r2, r3
 8000312:	4a1e      	ldr	r2, [pc, #120]	; (800038c <PID_Motor_Speed_Calculation_duty_cycle_ms_left+0x90>)
 8000314:	fb82 1203 	smull	r1, r2, r2, r3
 8000318:	1152      	asrs	r2, r2, #5
 800031a:	17db      	asrs	r3, r3, #31
 800031c:	1ad3      	subs	r3, r2, r3
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	8812      	ldrh	r2, [r2, #0]
 8000322:	fb02 f303 	mul.w	r3, r2, r3
 8000326:	ee07 3a90 	vmov	s15, r3
 800032a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800032e:	edc7 7a03 	vstr	s15, [r7, #12]
	if (current_pid_value < 0){
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	da1f      	bge.n	8000378 <PID_Motor_Speed_Calculation_duty_cycle_ms_left+0x7c>
		float output = (abs(current_pid_value*ms_value_after_limit/pid_bldc_controller_data->min_pid_correction_value))+pid_bldc_controller_data->min_duty_cycle;
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	ee07 3a90 	vmov	s15, r3
 800033e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000342:	edd7 7a03 	vldr	s15, [r7, #12]
 8000346:	ee67 6a27 	vmul.f32	s13, s14, s15
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000358:	ee17 3a90 	vmov	r3, s15
 800035c:	2b00      	cmp	r3, #0
 800035e:	bfb8      	it	lt
 8000360:	425b      	neglt	r3, r3
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	8952      	ldrh	r2, [r2, #10]
 8000366:	4413      	add	r3, r2
 8000368:	ee07 3a90 	vmov	s15, r3
 800036c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000370:	edc7 7a02 	vstr	s15, [r7, #8]
		return output;
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	e000      	b.n	800037a <PID_Motor_Speed_Calculation_duty_cycle_ms_left+0x7e>
	}
	else{
		return 1210;
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <PID_Motor_Speed_Calculation_duty_cycle_ms_left+0x94>)
 800037a:	ee07 3a90 	vmov	s15, r3
	}
}
 800037e:	eeb0 0a67 	vmov.f32	s0, s15
 8000382:	3714      	adds	r7, #20
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	51eb851f 	.word	0x51eb851f
 8000390:	44974000 	.word	0x44974000

08000394 <PID_Motor_Speed_Calculation_duty_cycle_ms_right>:

float PID_Motor_Speed_Calculation_duty_cycle_ms_right(PID_Motor_Speed_Calculation_Structure *pid_bldc_controller_data, int current_pid_value){
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
	float ms_value_after_limit = (((pid_bldc_controller_data->max_duty_cycle-pid_bldc_controller_data->min_duty_cycle)/100)*pid_bldc_controller_data->maximum_motor_power);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	891b      	ldrh	r3, [r3, #8]
 80003a2:	461a      	mov	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	895b      	ldrh	r3, [r3, #10]
 80003a8:	1ad3      	subs	r3, r2, r3
 80003aa:	4a1c      	ldr	r2, [pc, #112]	; (800041c <PID_Motor_Speed_Calculation_duty_cycle_ms_right+0x88>)
 80003ac:	fb82 1203 	smull	r1, r2, r2, r3
 80003b0:	1152      	asrs	r2, r2, #5
 80003b2:	17db      	asrs	r3, r3, #31
 80003b4:	1ad3      	subs	r3, r2, r3
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	8812      	ldrh	r2, [r2, #0]
 80003ba:	fb02 f303 	mul.w	r3, r2, r3
 80003be:	ee07 3a90 	vmov	s15, r3
 80003c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003c6:	edc7 7a03 	vstr	s15, [r7, #12]
	if (current_pid_value > 0){
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	dd1c      	ble.n	800040a <PID_Motor_Speed_Calculation_duty_cycle_ms_right+0x76>
		return (abs(current_pid_value*ms_value_after_limit/pid_bldc_controller_data->min_pid_correction_value))+pid_bldc_controller_data->min_duty_cycle;
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	ee07 3a90 	vmov	s15, r3
 80003d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80003da:	edd7 7a03 	vldr	s15, [r7, #12]
 80003de:	ee67 6a27 	vmul.f32	s13, s14, s15
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80003e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80003ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80003f0:	ee17 3a90 	vmov	r3, s15
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	bfb8      	it	lt
 80003f8:	425b      	neglt	r3, r3
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	8952      	ldrh	r2, [r2, #10]
 80003fe:	4413      	add	r3, r2
 8000400:	ee07 3a90 	vmov	s15, r3
 8000404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000408:	e001      	b.n	800040e <PID_Motor_Speed_Calculation_duty_cycle_ms_right+0x7a>
	}
	else{
		return 1210;
 800040a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8000420 <PID_Motor_Speed_Calculation_duty_cycle_ms_right+0x8c>
	}
}
 800040e:	eeb0 0a67 	vmov.f32	s0, s15
 8000412:	3714      	adds	r7, #20
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	51eb851f 	.word	0x51eb851f
 8000420:	44974000 	.word	0x44974000

08000424 <Choosen_USART_Option>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Choosen_USART_Option(uint8_t input_char){
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	71fb      	strb	r3, [r7, #7]
	wybrana_opcja = input_char;
 800042e:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <Choosen_USART_Option+0x3c>)
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	7013      	strb	r3, [r2, #0]
	dl_kom = sprintf((char *)komunikat,"Option no.%d, have been choosen.\n\r",input_char);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	461a      	mov	r2, r3
 8000438:	490a      	ldr	r1, [pc, #40]	; (8000464 <Choosen_USART_Option+0x40>)
 800043a:	480b      	ldr	r0, [pc, #44]	; (8000468 <Choosen_USART_Option+0x44>)
 800043c:	f006 fed6 	bl	80071ec <siprintf>
 8000440:	4603      	mov	r3, r0
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <Choosen_USART_Option+0x48>)
 8000446:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <Choosen_USART_Option+0x48>)
 800044a:	881a      	ldrh	r2, [r3, #0]
 800044c:	f04f 33ff 	mov.w	r3, #4294967295
 8000450:	4905      	ldr	r1, [pc, #20]	; (8000468 <Choosen_USART_Option+0x44>)
 8000452:	4807      	ldr	r0, [pc, #28]	; (8000470 <Choosen_USART_Option+0x4c>)
 8000454:	f005 fd0e 	bl	8005e74 <HAL_UART_Transmit>
}
 8000458:	bf00      	nop
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000004 	.word	0x20000004
 8000464:	08007bd4 	.word	0x08007bd4
 8000468:	20000150 	.word	0x20000150
 800046c:	20000394 	.word	0x20000394
 8000470:	200003fc 	.word	0x200003fc

08000474 <Option_1_performer>:
void Option_1_performer(uint32_t throttle_manual_input){
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	//Sekcja poświęcona obsłudze lewego silnika BLDC
	if (throttle_manual_input < 20)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2b13      	cmp	r3, #19
 8000480:	d801      	bhi.n	8000486 <Option_1_performer+0x12>
	{
		throttle_manual_input = 20;
 8000482:	2314      	movs	r3, #20
 8000484:	607b      	str	r3, [r7, #4]
	}
	float throttle_manual_input_temp = ((float)throttle_manual_input/100 * (max_duty_cycle-min_duty_cycle))+min_duty_cycle;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	ee07 3a90 	vmov	s15, r3
 800048c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000490:	eddf 6a14 	vldr	s13, [pc, #80]	; 80004e4 <Option_1_performer+0x70>
 8000494:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000498:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <Option_1_performer+0x74>)
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	461a      	mov	r2, r3
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <Option_1_performer+0x78>)
 80004a0:	881b      	ldrh	r3, [r3, #0]
 80004a2:	1ad3      	subs	r3, r2, r3
 80004a4:	ee07 3a90 	vmov	s15, r3
 80004a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80004b0:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <Option_1_performer+0x78>)
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	ee07 3a90 	vmov	s15, r3
 80004b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004c0:	edc7 7a03 	vstr	s15, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,throttle_manual_input_temp);
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <Option_1_performer+0x7c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80004cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004d0:	ee17 2a90 	vmov	r2, s15
 80004d4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	42c80000 	.word	0x42c80000
 80004e8:	20000006 	.word	0x20000006
 80004ec:	20000008 	.word	0x20000008
 80004f0:	200003b0 	.word	0x200003b0

080004f4 <Option_2_performer>:
void Option_2_performer(uint32_t throttle_manual_input){
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	//Sekcja poświęcona obsłudze prawego silnika BLDC
	if (throttle_manual_input < 20)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b13      	cmp	r3, #19
 8000500:	d801      	bhi.n	8000506 <Option_2_performer+0x12>
		{
			throttle_manual_input = 20;
 8000502:	2314      	movs	r3, #20
 8000504:	607b      	str	r3, [r7, #4]
		}
	float throttle_manual_input_temp = ((float)throttle_manual_input/100 * (max_duty_cycle-min_duty_cycle))+min_duty_cycle;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	ee07 3a90 	vmov	s15, r3
 800050c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000510:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000564 <Option_2_performer+0x70>
 8000514:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <Option_2_performer+0x74>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <Option_2_performer+0x78>)
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	ee07 3a90 	vmov	s15, r3
 8000528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800052c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000530:	4b0e      	ldr	r3, [pc, #56]	; (800056c <Option_2_performer+0x78>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	ee07 3a90 	vmov	s15, r3
 8000538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800053c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000540:	edc7 7a03 	vstr	s15, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,throttle_manual_input_temp);
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <Option_2_performer+0x7c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	edd7 7a03 	vldr	s15, [r7, #12]
 800054c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000550:	ee17 2a90 	vmov	r2, s15
 8000554:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	42c80000 	.word	0x42c80000
 8000568:	20000006 	.word	0x20000006
 800056c:	20000008 	.word	0x20000008
 8000570:	200003b0 	.word	0x200003b0

08000574 <Option_3_performer>:
void Option_3_performer(RawData_Def *ACC_DATA){
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	float left_motor_speed = PID_Motor_Speed_Calculation_duty_cycle_ms_left(&PID_Motor, pid_calculate(&pid_regulator, level_correction, ACC_DATA->y));
 800057c:	4b52      	ldr	r3, [pc, #328]	; (80006c8 <Option_3_performer+0x154>)
 800057e:	edd3 7a00 	vldr	s15, [r3]
 8000582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800058c:	461a      	mov	r2, r3
 800058e:	ee17 1a90 	vmov	r1, s15
 8000592:	484e      	ldr	r0, [pc, #312]	; (80006cc <Option_3_performer+0x158>)
 8000594:	f001 fc29 	bl	8001dea <pid_calculate>
 8000598:	4603      	mov	r3, r0
 800059a:	4619      	mov	r1, r3
 800059c:	484c      	ldr	r0, [pc, #304]	; (80006d0 <Option_3_performer+0x15c>)
 800059e:	f7ff fead 	bl	80002fc <PID_Motor_Speed_Calculation_duty_cycle_ms_left>
 80005a2:	ed87 0a03 	vstr	s0, [r7, #12]
	float right_motor_speed = PID_Motor_Speed_Calculation_duty_cycle_ms_right(&PID_Motor, pid_calculate(&pid_regulator, level_correction, ACC_DATA->y));
 80005a6:	4b48      	ldr	r3, [pc, #288]	; (80006c8 <Option_3_performer+0x154>)
 80005a8:	edd3 7a00 	vldr	s15, [r3]
 80005ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005b6:	461a      	mov	r2, r3
 80005b8:	ee17 1a90 	vmov	r1, s15
 80005bc:	4843      	ldr	r0, [pc, #268]	; (80006cc <Option_3_performer+0x158>)
 80005be:	f001 fc14 	bl	8001dea <pid_calculate>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4619      	mov	r1, r3
 80005c6:	4842      	ldr	r0, [pc, #264]	; (80006d0 <Option_3_performer+0x15c>)
 80005c8:	f7ff fee4 	bl	8000394 <PID_Motor_Speed_Calculation_duty_cycle_ms_right>
 80005cc:	ed87 0a02 	vstr	s0, [r7, #8]
	if (left_motor_speed < 1200){
 80005d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80005d4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80006d4 <Option_3_performer+0x160>
 80005d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e0:	d501      	bpl.n	80005e6 <Option_3_performer+0x72>
			left_motor_speed = 1200;
 80005e2:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <Option_3_performer+0x164>)
 80005e4:	60fb      	str	r3, [r7, #12]
		}
	if (right_motor_speed < 1200){
 80005e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80005ea:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80006d4 <Option_3_performer+0x160>
 80005ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005f6:	d501      	bpl.n	80005fc <Option_3_performer+0x88>
			right_motor_speed = 1200;
 80005f8:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <Option_3_performer+0x164>)
 80005fa:	60bb      	str	r3, [r7, #8]
		}
	dl_kom = sprintf((char *)komunikat, "PID Correction value: %d\n\n\r",pid_calculate(&pid_regulator, level_correction, ACC_DATA->y)); // @suppress("Float formatting support")
 80005fc:	4b32      	ldr	r3, [pc, #200]	; (80006c8 <Option_3_performer+0x154>)
 80005fe:	edd3 7a00 	vldr	s15, [r3]
 8000602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800060c:	461a      	mov	r2, r3
 800060e:	ee17 1a90 	vmov	r1, s15
 8000612:	482e      	ldr	r0, [pc, #184]	; (80006cc <Option_3_performer+0x158>)
 8000614:	f001 fbe9 	bl	8001dea <pid_calculate>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	492f      	ldr	r1, [pc, #188]	; (80006dc <Option_3_performer+0x168>)
 800061e:	4830      	ldr	r0, [pc, #192]	; (80006e0 <Option_3_performer+0x16c>)
 8000620:	f006 fde4 	bl	80071ec <siprintf>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <Option_3_performer+0x170>)
 800062a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 800062c:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <Option_3_performer+0x170>)
 800062e:	881a      	ldrh	r2, [r3, #0]
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	492a      	ldr	r1, [pc, #168]	; (80006e0 <Option_3_performer+0x16c>)
 8000636:	482c      	ldr	r0, [pc, #176]	; (80006e8 <Option_3_performer+0x174>)
 8000638:	f005 fc1c 	bl	8005e74 <HAL_UART_Transmit>
	dl_kom = sprintf((char *)komunikat, "Left motor power: %d\n\n\r",(int)left_motor_speed); // @suppress("Float formatting support")
 800063c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000644:	ee17 2a90 	vmov	r2, s15
 8000648:	4928      	ldr	r1, [pc, #160]	; (80006ec <Option_3_performer+0x178>)
 800064a:	4825      	ldr	r0, [pc, #148]	; (80006e0 <Option_3_performer+0x16c>)
 800064c:	f006 fdce 	bl	80071ec <siprintf>
 8000650:	4603      	mov	r3, r0
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <Option_3_performer+0x170>)
 8000656:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <Option_3_performer+0x170>)
 800065a:	881a      	ldrh	r2, [r3, #0]
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	491f      	ldr	r1, [pc, #124]	; (80006e0 <Option_3_performer+0x16c>)
 8000662:	4821      	ldr	r0, [pc, #132]	; (80006e8 <Option_3_performer+0x174>)
 8000664:	f005 fc06 	bl	8005e74 <HAL_UART_Transmit>
	dl_kom = sprintf((char *)komunikat, "Right motor power: %d\n\n\r",(int)right_motor_speed); // @suppress("Float formatting support")
 8000668:	edd7 7a02 	vldr	s15, [r7, #8]
 800066c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000670:	ee17 2a90 	vmov	r2, s15
 8000674:	491e      	ldr	r1, [pc, #120]	; (80006f0 <Option_3_performer+0x17c>)
 8000676:	481a      	ldr	r0, [pc, #104]	; (80006e0 <Option_3_performer+0x16c>)
 8000678:	f006 fdb8 	bl	80071ec <siprintf>
 800067c:	4603      	mov	r3, r0
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <Option_3_performer+0x170>)
 8000682:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <Option_3_performer+0x170>)
 8000686:	881a      	ldrh	r2, [r3, #0]
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	4914      	ldr	r1, [pc, #80]	; (80006e0 <Option_3_performer+0x16c>)
 800068e:	4816      	ldr	r0, [pc, #88]	; (80006e8 <Option_3_performer+0x174>)
 8000690:	f005 fbf0 	bl	8005e74 <HAL_UART_Transmit>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,left_motor_speed);
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <Option_3_performer+0x180>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	edd7 7a03 	vldr	s15, [r7, #12]
 800069c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006a0:	ee17 2a90 	vmov	r2, s15
 80006a4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,right_motor_speed+14); //Prawy silnik ma większe opory, wymagana korekta prędkości
 80006a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80006aa:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80006ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <Option_3_performer+0x180>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006ba:	ee17 2a90 	vmov	r2, s15
 80006be:	639a      	str	r2, [r3, #56]	; 0x38
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000038 	.word	0x20000038
 80006cc:	20000398 	.word	0x20000398
 80006d0:	200004cc 	.word	0x200004cc
 80006d4:	44960000 	.word	0x44960000
 80006d8:	44960000 	.word	0x44960000
 80006dc:	08007bf8 	.word	0x08007bf8
 80006e0:	20000150 	.word	0x20000150
 80006e4:	20000394 	.word	0x20000394
 80006e8:	200003fc 	.word	0x200003fc
 80006ec:	08007c14 	.word	0x08007c14
 80006f0:	08007c2c 	.word	0x08007c2c
 80006f4:	200003b0 	.word	0x200003b0

080006f8 <Option_4_performer>:
void Option_4_performer(){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
		dl_kom = sprintf((char *)komunikat, "Kp value: %d\n\n\r",(int)Kp);
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <Option_4_performer+0x38>)
 80006fe:	edd3 7a00 	vldr	s15, [r3]
 8000702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000706:	ee17 2a90 	vmov	r2, s15
 800070a:	490a      	ldr	r1, [pc, #40]	; (8000734 <Option_4_performer+0x3c>)
 800070c:	480a      	ldr	r0, [pc, #40]	; (8000738 <Option_4_performer+0x40>)
 800070e:	f006 fd6d 	bl	80071ec <siprintf>
 8000712:	4603      	mov	r3, r0
 8000714:	b29a      	uxth	r2, r3
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <Option_4_performer+0x44>)
 8000718:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <Option_4_performer+0x44>)
 800071c:	881a      	ldrh	r2, [r3, #0]
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	4905      	ldr	r1, [pc, #20]	; (8000738 <Option_4_performer+0x40>)
 8000724:	4806      	ldr	r0, [pc, #24]	; (8000740 <Option_4_performer+0x48>)
 8000726:	f005 fba5 	bl	8005e74 <HAL_UART_Transmit>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000044 	.word	0x20000044
 8000734:	08007c48 	.word	0x08007c48
 8000738:	20000150 	.word	0x20000150
 800073c:	20000394 	.word	0x20000394
 8000740:	200003fc 	.word	0x200003fc

08000744 <Option_5_performer>:
void Option_5_performer(){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
		dl_kom = sprintf((char *)komunikat, "Ki value: %d\n\n\r",(int)Ki);
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <Option_5_performer+0x38>)
 800074a:	edd3 7a00 	vldr	s15, [r3]
 800074e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000752:	ee17 2a90 	vmov	r2, s15
 8000756:	490a      	ldr	r1, [pc, #40]	; (8000780 <Option_5_performer+0x3c>)
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <Option_5_performer+0x40>)
 800075a:	f006 fd47 	bl	80071ec <siprintf>
 800075e:	4603      	mov	r3, r0
 8000760:	b29a      	uxth	r2, r3
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <Option_5_performer+0x44>)
 8000764:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <Option_5_performer+0x44>)
 8000768:	881a      	ldrh	r2, [r3, #0]
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	4905      	ldr	r1, [pc, #20]	; (8000784 <Option_5_performer+0x40>)
 8000770:	4806      	ldr	r0, [pc, #24]	; (800078c <Option_5_performer+0x48>)
 8000772:	f005 fb7f 	bl	8005e74 <HAL_UART_Transmit>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000048 	.word	0x20000048
 8000780:	08007c58 	.word	0x08007c58
 8000784:	20000150 	.word	0x20000150
 8000788:	20000394 	.word	0x20000394
 800078c:	200003fc 	.word	0x200003fc

08000790 <Option_7_performer>:
void Option_6_performer(){
		dl_kom = sprintf((char *)komunikat, "Kd value: %d\n\n\r",(int)Kd);
		HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
}
void Option_7_performer(RawData_Def *MPU6050A_RAW,RawData_Def *MPU6050G_RAW,ScaledData_Def *MPU6050A_Scaled,ScaledData_Def *MPU6050G_Scaled){
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af02      	add	r7, sp, #8
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	603b      	str	r3, [r7, #0]
	//Sekcja poświęcona przekazywaniu danych z czujnika MPU6050 na interfejs szeregowy
	MPU6050_Get_Accel_RawData(MPU6050A_RAW);
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f001 f9ec 	bl	8001b7c <MPU6050_Get_Accel_RawData>
	MPU6050_Get_Gyro_RawData(MPU6050G_RAW);
 80007a4:	68b8      	ldr	r0, [r7, #8]
 80007a6:	f001 fa97 	bl	8001cd8 <MPU6050_Get_Gyro_RawData>
	MPU6050_Get_Accel_Scale(MPU6050A_Scaled);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f001 fa4c 	bl	8001c48 <MPU6050_Get_Accel_Scale>
	MPU6050_Get_Gyro_Scale(MPU6050G_Scaled);
 80007b0:	6838      	ldr	r0, [r7, #0]
 80007b2:	f001 faad 	bl	8001d10 <MPU6050_Get_Gyro_Scale>

	//Komunikaty portu szeregowego
	dl_kom = sprintf((char *)komunikat, "RAW ACCEL DATA: X = %d, Y = %d, Z = %d\n\r",MPU6050A_RAW->x,MPU6050A_RAW->y,MPU6050A_RAW->z);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007bc:	461a      	mov	r2, r3
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007c4:	4619      	mov	r1, r3
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	460b      	mov	r3, r1
 80007d0:	4940      	ldr	r1, [pc, #256]	; (80008d4 <Option_7_performer+0x144>)
 80007d2:	4841      	ldr	r0, [pc, #260]	; (80008d8 <Option_7_performer+0x148>)
 80007d4:	f006 fd0a 	bl	80071ec <siprintf>
 80007d8:	4603      	mov	r3, r0
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b3f      	ldr	r3, [pc, #252]	; (80008dc <Option_7_performer+0x14c>)
 80007de:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 80007e0:	4b3e      	ldr	r3, [pc, #248]	; (80008dc <Option_7_performer+0x14c>)
 80007e2:	881a      	ldrh	r2, [r3, #0]
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	493b      	ldr	r1, [pc, #236]	; (80008d8 <Option_7_performer+0x148>)
 80007ea:	483d      	ldr	r0, [pc, #244]	; (80008e0 <Option_7_performer+0x150>)
 80007ec:	f005 fb42 	bl	8005e74 <HAL_UART_Transmit>
	dl_kom = sprintf((char *)komunikat, "RAW GYRO DATA: X = %d, Y = %d, Z = %d\n\r",MPU6050G_RAW->x,MPU6050G_RAW->y,MPU6050G_RAW->z);
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007f6:	461a      	mov	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007fe:	4619      	mov	r1, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	460b      	mov	r3, r1
 800080a:	4936      	ldr	r1, [pc, #216]	; (80008e4 <Option_7_performer+0x154>)
 800080c:	4832      	ldr	r0, [pc, #200]	; (80008d8 <Option_7_performer+0x148>)
 800080e:	f006 fced 	bl	80071ec <siprintf>
 8000812:	4603      	mov	r3, r0
 8000814:	b29a      	uxth	r2, r3
 8000816:	4b31      	ldr	r3, [pc, #196]	; (80008dc <Option_7_performer+0x14c>)
 8000818:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 800081a:	4b30      	ldr	r3, [pc, #192]	; (80008dc <Option_7_performer+0x14c>)
 800081c:	881a      	ldrh	r2, [r3, #0]
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	492d      	ldr	r1, [pc, #180]	; (80008d8 <Option_7_performer+0x148>)
 8000824:	482e      	ldr	r0, [pc, #184]	; (80008e0 <Option_7_performer+0x150>)
 8000826:	f005 fb25 	bl	8005e74 <HAL_UART_Transmit>
	dl_kom = sprintf((char *)komunikat, "SCALED ACCEL DATA: X = %d, Y = %d, Z = %d\n\r",(int)MPU6050A_Scaled->x,(int)MPU6050A_Scaled->y,(int)MPU6050A_Scaled->z); // @suppress("Float formatting support")
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	edd3 7a00 	vldr	s15, [r3]
 8000830:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	edd3 7a01 	vldr	s15, [r3, #4]
 800083a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	edd3 7a02 	vldr	s15, [r3, #8]
 8000844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000848:	ee17 3a90 	vmov	r3, s15
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	ee16 3a90 	vmov	r3, s13
 8000852:	ee17 2a10 	vmov	r2, s14
 8000856:	4924      	ldr	r1, [pc, #144]	; (80008e8 <Option_7_performer+0x158>)
 8000858:	481f      	ldr	r0, [pc, #124]	; (80008d8 <Option_7_performer+0x148>)
 800085a:	f006 fcc7 	bl	80071ec <siprintf>
 800085e:	4603      	mov	r3, r0
 8000860:	b29a      	uxth	r2, r3
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <Option_7_performer+0x14c>)
 8000864:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <Option_7_performer+0x14c>)
 8000868:	881a      	ldrh	r2, [r3, #0]
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	491a      	ldr	r1, [pc, #104]	; (80008d8 <Option_7_performer+0x148>)
 8000870:	481b      	ldr	r0, [pc, #108]	; (80008e0 <Option_7_performer+0x150>)
 8000872:	f005 faff 	bl	8005e74 <HAL_UART_Transmit>
	dl_kom = sprintf((char *)komunikat, "SCALED GYRO DATA: X = %d, Y = %d, Z = %d\n\n\r",(int)MPU6050G_Scaled->x,(int)MPU6050G_Scaled->y,(int)MPU6050G_Scaled->z); // @suppress("Float formatting support")
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	edd3 7a00 	vldr	s15, [r3]
 800087c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	edd3 7a01 	vldr	s15, [r3, #4]
 8000886:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000894:	ee17 3a90 	vmov	r3, s15
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	ee16 3a90 	vmov	r3, s13
 800089e:	ee17 2a10 	vmov	r2, s14
 80008a2:	4912      	ldr	r1, [pc, #72]	; (80008ec <Option_7_performer+0x15c>)
 80008a4:	480c      	ldr	r0, [pc, #48]	; (80008d8 <Option_7_performer+0x148>)
 80008a6:	f006 fca1 	bl	80071ec <siprintf>
 80008aa:	4603      	mov	r3, r0
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <Option_7_performer+0x14c>)
 80008b0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <Option_7_performer+0x14c>)
 80008b4:	881a      	ldrh	r2, [r3, #0]
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	4907      	ldr	r1, [pc, #28]	; (80008d8 <Option_7_performer+0x148>)
 80008bc:	4808      	ldr	r0, [pc, #32]	; (80008e0 <Option_7_performer+0x150>)
 80008be:	f005 fad9 	bl	8005e74 <HAL_UART_Transmit>
	HAL_Delay(500);
 80008c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c6:	f001 fde1 	bl	800248c <HAL_Delay>

}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	08007c78 	.word	0x08007c78
 80008d8:	20000150 	.word	0x20000150
 80008dc:	20000394 	.word	0x20000394
 80008e0:	200003fc 	.word	0x200003fc
 80008e4:	08007ca4 	.word	0x08007ca4
 80008e8:	08007ccc 	.word	0x08007ccc
 80008ec:	08007cf8 	.word	0x08007cf8

080008f0 <MPU6050_Update>:

void MPU6050_Update(RawData_Def *MPU6050A_RAW,RawData_Def *MPU6050G_RAW,ScaledData_Def *MPU6050A_Scaled,ScaledData_Def *MPU6050G_Scaled){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
 80008fc:	603b      	str	r3, [r7, #0]
	MPU6050_Get_Accel_RawData(MPU6050A_RAW);
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f001 f93c 	bl	8001b7c <MPU6050_Get_Accel_RawData>
	MPU6050_Get_Gyro_RawData(MPU6050G_RAW);
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f001 f9e7 	bl	8001cd8 <MPU6050_Get_Gyro_RawData>
	MPU6050_Get_Accel_Scale(MPU6050A_Scaled);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f001 f99c 	bl	8001c48 <MPU6050_Get_Accel_Scale>
	MPU6050_Get_Gyro_Scale(MPU6050G_Scaled);
 8000910:	6838      	ldr	r0, [r7, #0]
 8000912:	f001 f9fd 	bl	8001d10 <MPU6050_Get_Gyro_Scale>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <RGB_LED_Level_Notificator>:

void RGB_LED_Level_Notificator(RawData_Def *MPU6050A_RAW){
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	//Na podstawie danych RAW z akcelerometru w osi Y (zgodnie z oznaczeniami na module MPU6050)
	float duty_g;
	float duty_r;
	float correction_variable;

	if(MPU6050A_RAW->y > level_correction){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800092e:	ee07 3a90 	vmov	s15, r3
 8000932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000936:	4b9e      	ldr	r3, [pc, #632]	; (8000bb0 <RGB_LED_Level_Notificator+0x290>)
 8000938:	edd3 7a00 	vldr	s15, [r3]
 800093c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000944:	dd5d      	ble.n	8000a02 <RGB_LED_Level_Notificator+0xe2>
		//Obliczenie wypełnienia PWM
		correction_variable = (6100 - level_correction)/255;
 8000946:	4b9a      	ldr	r3, [pc, #616]	; (8000bb0 <RGB_LED_Level_Notificator+0x290>)
 8000948:	edd3 7a00 	vldr	s15, [r3]
 800094c:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8000bb4 <RGB_LED_Level_Notificator+0x294>
 8000950:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000954:	eddf 6a98 	vldr	s13, [pc, #608]	; 8000bb8 <RGB_LED_Level_Notificator+0x298>
 8000958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800095c:	edc7 7a04 	vstr	s15, [r7, #16]
		duty_g = abs(MPU6050A_RAW->y - level_correction) / correction_variable;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000966:	ee07 3a90 	vmov	s15, r3
 800096a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800096e:	4b90      	ldr	r3, [pc, #576]	; (8000bb0 <RGB_LED_Level_Notificator+0x290>)
 8000970:	edd3 7a00 	vldr	s15, [r3]
 8000974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800097c:	ee17 3a90 	vmov	r3, s15
 8000980:	2b00      	cmp	r3, #0
 8000982:	bfb8      	it	lt
 8000984:	425b      	neglt	r3, r3
 8000986:	ee07 3a90 	vmov	s15, r3
 800098a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800098e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000996:	edc7 7a03 	vstr	s15, [r7, #12]
		duty_r = 255 - (abs(MPU6050A_RAW->y - level_correction) / correction_variable);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009a8:	4b81      	ldr	r3, [pc, #516]	; (8000bb0 <RGB_LED_Level_Notificator+0x290>)
 80009aa:	edd3 7a00 	vldr	s15, [r3]
 80009ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b6:	ee17 3a90 	vmov	r3, s15
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80009c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80009cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009d0:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8000bb8 <RGB_LED_Level_Notificator+0x298>
 80009d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009d8:	edc7 7a05 	vstr	s15, [r7, #20]

		//Ustawienie koloru
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,duty_g);
 80009dc:	4b77      	ldr	r3, [pc, #476]	; (8000bbc <RGB_LED_Level_Notificator+0x29c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80009e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009e8:	ee17 2a90 	vmov	r2, s15
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1,duty_r);
 80009ee:	4b73      	ldr	r3, [pc, #460]	; (8000bbc <RGB_LED_Level_Notificator+0x29c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80009f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009fa:	ee17 2a90 	vmov	r2, s15
 80009fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000a00:	e02c      	b.n	8000a5c <RGB_LED_Level_Notificator+0x13c>
	}
	else if(MPU6050A_RAW->y < level_correction){
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a08:	ee07 3a90 	vmov	s15, r3
 8000a0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a10:	4b67      	ldr	r3, [pc, #412]	; (8000bb0 <RGB_LED_Level_Notificator+0x290>)
 8000a12:	edd3 7a00 	vldr	s15, [r3]
 8000a16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a1e:	d50f      	bpl.n	8000a40 <RGB_LED_Level_Notificator+0x120>
		duty_r = 255;
 8000a20:	4b67      	ldr	r3, [pc, #412]	; (8000bc0 <RGB_LED_Level_Notificator+0x2a0>)
 8000a22:	617b      	str	r3, [r7, #20]
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1,duty_r);
 8000a24:	4b65      	ldr	r3, [pc, #404]	; (8000bbc <RGB_LED_Level_Notificator+0x29c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a30:	ee17 2a90 	vmov	r2, s15
 8000a34:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,1);
 8000a36:	4b61      	ldr	r3, [pc, #388]	; (8000bbc <RGB_LED_Level_Notificator+0x29c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	639a      	str	r2, [r3, #56]	; 0x38
 8000a3e:	e00d      	b.n	8000a5c <RGB_LED_Level_Notificator+0x13c>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1,255);
 8000a40:	4b5e      	ldr	r3, [pc, #376]	; (8000bbc <RGB_LED_Level_Notificator+0x29c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	22ff      	movs	r2, #255	; 0xff
 8000a46:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(200);
 8000a48:	20c8      	movs	r0, #200	; 0xc8
 8000a4a:	f001 fd1f 	bl	800248c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,255);
 8000a4e:	4b5b      	ldr	r3, [pc, #364]	; (8000bbc <RGB_LED_Level_Notificator+0x29c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	22ff      	movs	r2, #255	; 0xff
 8000a54:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(200);
 8000a56:	20c8      	movs	r0, #200	; 0xc8
 8000a58:	f001 fd18 	bl	800248c <HAL_Delay>
	}


	//Prawy LED RGB
	//Na podstawie danych RAW z akcelerometru w osi Y (zgodnie z oznaczeniami na module MPU6050)
	if(MPU6050A_RAW->y < level_correction){
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a6a:	4b51      	ldr	r3, [pc, #324]	; (8000bb0 <RGB_LED_Level_Notificator+0x290>)
 8000a6c:	edd3 7a00 	vldr	s15, [r3]
 8000a70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a78:	d568      	bpl.n	8000b4c <RGB_LED_Level_Notificator+0x22c>
			//Obliczenie wypełnienia PWM
			correction_variable = abs((5700 - level_correction)/255);
 8000a7a:	4b4d      	ldr	r3, [pc, #308]	; (8000bb0 <RGB_LED_Level_Notificator+0x290>)
 8000a7c:	edd3 7a00 	vldr	s15, [r3]
 8000a80:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8000bc4 <RGB_LED_Level_Notificator+0x2a4>
 8000a84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a88:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8000bb8 <RGB_LED_Level_Notificator+0x298>
 8000a8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a94:	ee17 3a90 	vmov	r3, s15
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bfb8      	it	lt
 8000a9c:	425b      	neglt	r3, r3
 8000a9e:	ee07 3a90 	vmov	s15, r3
 8000aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aa6:	edc7 7a04 	vstr	s15, [r7, #16]
			duty_g = abs(MPU6050A_RAW->y - level_correction) / correction_variable;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ab0:	ee07 3a90 	vmov	s15, r3
 8000ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ab8:	4b3d      	ldr	r3, [pc, #244]	; (8000bb0 <RGB_LED_Level_Notificator+0x290>)
 8000aba:	edd3 7a00 	vldr	s15, [r3]
 8000abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ac6:	ee17 3a90 	vmov	r3, s15
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	bfb8      	it	lt
 8000ace:	425b      	neglt	r3, r3
 8000ad0:	ee07 3a90 	vmov	s15, r3
 8000ad4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ad8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ae0:	edc7 7a03 	vstr	s15, [r7, #12]
			duty_r = 255 - (abs(MPU6050A_RAW->y - level_correction) / correction_variable);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000af2:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <RGB_LED_Level_Notificator+0x290>)
 8000af4:	edd3 7a00 	vldr	s15, [r3]
 8000af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b00:	ee17 3a90 	vmov	r3, s15
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bfb8      	it	lt
 8000b08:	425b      	neglt	r3, r3
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b12:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b1a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000bb8 <RGB_LED_Level_Notificator+0x298>
 8000b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b22:	edc7 7a05 	vstr	s15, [r7, #20]

			//Ustawienie koloru
			__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_g);
 8000b26:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <RGB_LED_Level_Notificator+0x2a8>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b32:	ee17 2a90 	vmov	r2, s15
 8000b36:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1,duty_r);
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <RGB_LED_Level_Notificator+0x2ac>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b44:	ee17 2a90 	vmov	r2, s15
 8000b48:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,255);
			HAL_Delay(200);
			__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1,255);
			HAL_Delay(200);
		}
}
 8000b4a:	e02c      	b.n	8000ba6 <RGB_LED_Level_Notificator+0x286>
		else if(MPU6050A_RAW->y > level_correction){
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b52:	ee07 3a90 	vmov	s15, r3
 8000b56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <RGB_LED_Level_Notificator+0x290>)
 8000b5c:	edd3 7a00 	vldr	s15, [r3]
 8000b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b68:	dd0f      	ble.n	8000b8a <RGB_LED_Level_Notificator+0x26a>
			duty_r = 255;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <RGB_LED_Level_Notificator+0x2a0>)
 8000b6c:	617b      	str	r3, [r7, #20]
			__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1,duty_r);
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <RGB_LED_Level_Notificator+0x2ac>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b7a:	ee17 2a90 	vmov	r2, s15
 8000b7e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,1);
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <RGB_LED_Level_Notificator+0x2a8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2201      	movs	r2, #1
 8000b86:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b88:	e00d      	b.n	8000ba6 <RGB_LED_Level_Notificator+0x286>
			__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,255);
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <RGB_LED_Level_Notificator+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	22ff      	movs	r2, #255	; 0xff
 8000b90:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(200);
 8000b92:	20c8      	movs	r0, #200	; 0xc8
 8000b94:	f001 fc7a 	bl	800248c <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1,255);
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <RGB_LED_Level_Notificator+0x2ac>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	22ff      	movs	r2, #255	; 0xff
 8000b9e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(200);
 8000ba0:	20c8      	movs	r0, #200	; 0xc8
 8000ba2:	f001 fc73 	bl	800248c <HAL_Delay>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000038 	.word	0x20000038
 8000bb4:	45bea000 	.word	0x45bea000
 8000bb8:	437f0000 	.word	0x437f0000
 8000bbc:	200002fc 	.word	0x200002fc
 8000bc0:	437f0000 	.word	0x437f0000
 8000bc4:	45b22000 	.word	0x45b22000
 8000bc8:	20000480 	.word	0x20000480
 8000bcc:	20000348 	.word	0x20000348

08000bd0 <RGB_Standby_Animation>:

void RGB_Standby_Animation(){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	if(rgb_animation_counter <= 255){
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <RGB_Standby_Animation+0xb4>)
 8000bd6:	edd3 7a00 	vldr	s15, [r3]
 8000bda:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000c88 <RGB_Standby_Animation+0xb8>
 8000bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be6:	d847      	bhi.n	8000c78 <RGB_Standby_Animation+0xa8>
		//Animowanie lewej diody RGB
			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1,abs(rgb_animation_counter));
 8000be8:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <RGB_Standby_Animation+0xb4>)
 8000bea:	edd3 7a00 	vldr	s15, [r3]
 8000bee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf2:	ee17 3a90 	vmov	r3, s15
 8000bf6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000bfa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000bfe:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <RGB_Standby_Animation+0xbc>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,255 - abs(rgb_animation_counter));
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <RGB_Standby_Animation+0xb4>)
 8000c06:	edd3 7a00 	vldr	s15, [r3]
 8000c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c0e:	ee17 3a90 	vmov	r3, s15
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <RGB_Standby_Animation+0xbc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	639a      	str	r2, [r3, #56]	; 0x38
		//Animowanie prawej diody RGB
			__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1,abs(rgb_animation_counter));
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <RGB_Standby_Animation+0xb4>)
 8000c24:	edd3 7a00 	vldr	s15, [r3]
 8000c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c2c:	ee17 3a90 	vmov	r3, s15
 8000c30:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c34:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <RGB_Standby_Animation+0xc0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,255 - abs(rgb_animation_counter));
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <RGB_Standby_Animation+0xb4>)
 8000c40:	edd3 7a00 	vldr	s15, [r3]
 8000c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c48:	ee17 3a90 	vmov	r3, s15
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bfb8      	it	lt
 8000c50:	425b      	neglt	r3, r3
 8000c52:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <RGB_Standby_Animation+0xc4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	635a      	str	r2, [r3, #52]	; 0x34

		//Inkrementacja zmiennej rgb_animation_counter
			HAL_Delay(2);
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f001 fc15 	bl	800248c <HAL_Delay>
			rgb_animation_counter++;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <RGB_Standby_Animation+0xb4>)
 8000c64:	edd3 7a00 	vldr	s15, [r3]
 8000c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <RGB_Standby_Animation+0xb4>)
 8000c72:	edc3 7a00 	vstr	s15, [r3]
	}
	else{
		rgb_animation_counter = -255;
	}
}
 8000c76:	e002      	b.n	8000c7e <RGB_Standby_Animation+0xae>
		rgb_animation_counter = -255;
 8000c78:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <RGB_Standby_Animation+0xb4>)
 8000c7a:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <RGB_Standby_Animation+0xc8>)
 8000c7c:	601a      	str	r2, [r3, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000e4 	.word	0x200000e4
 8000c88:	437f0000 	.word	0x437f0000
 8000c8c:	200002fc 	.word	0x200002fc
 8000c90:	20000348 	.word	0x20000348
 8000c94:	20000480 	.word	0x20000480
 8000c98:	c37f0000 	.word	0xc37f0000

08000c9c <Stop_BLDCs>:

void Stop_BLDCs (){
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
	//Zatrzymywanie silników (lewy+prawy)
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,min_duty_cycle);
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <Stop_BLDCs+0x24>)
 8000ca2:	881a      	ldrh	r2, [r3, #0]
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <Stop_BLDCs+0x28>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,min_duty_cycle);
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <Stop_BLDCs+0x24>)
 8000cac:	881a      	ldrh	r2, [r3, #0]
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <Stop_BLDCs+0x28>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	200003b0 	.word	0x200003b0

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	; 0x30
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cce:	f001 fb77 	bl	80023c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd2:	f000 f91d 	bl	8000f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd6:	f000 fc0f 	bl	80014f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cda:	f000 fbdd 	bl	8001498 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cde:	f000 f9bb 	bl	8001058 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000ce2:	f000 f979 	bl	8000fd8 <MX_I2C1_Init>
  MX_TIM15_Init();
 8000ce6:	f000 fa39 	bl	800115c <MX_TIM15_Init>
  MX_TIM16_Init();
 8000cea:	f000 fae5 	bl	80012b8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000cee:	f000 fb5b 	bl	80013a8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  //Inicjalizacja modułu MPU6050 i połączenia I2C
  MPU6050_Init(&hi2c1);
 8000cf2:	4872      	ldr	r0, [pc, #456]	; (8000ebc <main+0x1f4>)
 8000cf4:	f000 fe38 	bl	8001968 <MPU6050_Init>

  //Konfiguracja modułu MPU6050
  MPU6050_Config_DATA.Accel_Full_Scale = AFS_SEL_4g;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  MPU6050_Config_DATA.ClockSource = Internal_8MHz;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MPU6050_Config_DATA.CONFIG_DLPF = DLPF_184A_188G_Hz;
 8000d04:	2301      	movs	r3, #1
 8000d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  MPU6050_Config_DATA.Gyro_Full_Scale = FS_SEL_500;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  MPU6050_Config_DATA.Sleep_Mode_Bit = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  MPU6050_Config(&MPU6050_Config_DATA);
 8000d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fe78 	bl	8001a10 <MPU6050_Config>

  //Inicjalizacja generatora sygnału PWM oraz wyłączenie silników BLDC
  HAL_UART_Receive_IT(&huart2, &znak, 1);
 8000d20:	2201      	movs	r2, #1
 8000d22:	4967      	ldr	r1, [pc, #412]	; (8000ec0 <main+0x1f8>)
 8000d24:	4867      	ldr	r0, [pc, #412]	; (8000ec4 <main+0x1fc>)
 8000d26:	f005 f939 	bl	8005f9c <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4866      	ldr	r0, [pc, #408]	; (8000ec8 <main+0x200>)
 8000d2e:	f003 ff6d 	bl	8004c0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000d32:	2104      	movs	r1, #4
 8000d34:	4864      	ldr	r0, [pc, #400]	; (8000ec8 <main+0x200>)
 8000d36:	f003 ff69 	bl	8004c0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); // Lewa G
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4863      	ldr	r0, [pc, #396]	; (8000ecc <main+0x204>)
 8000d3e:	f003 ff65 	bl	8004c0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // Lewa R
 8000d42:	2104      	movs	r1, #4
 8000d44:	4861      	ldr	r0, [pc, #388]	; (8000ecc <main+0x204>)
 8000d46:	f003 ff61 	bl	8004c0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1); // Prawa G
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4860      	ldr	r0, [pc, #384]	; (8000ed0 <main+0x208>)
 8000d4e:	f003 ff5d 	bl	8004c0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1); // Prawa R
 8000d52:	2100      	movs	r1, #0
 8000d54:	485f      	ldr	r0, [pc, #380]	; (8000ed4 <main+0x20c>)
 8000d56:	f003 ff59 	bl	8004c0c <HAL_TIM_PWM_Start>
  Stop_BLDCs();
 8000d5a:	f7ff ff9f 	bl	8000c9c <Stop_BLDCs>
  pid_init(&pid_regulator, Kp, Ki, Kd, windup_correction);
 8000d5e:	4b5e      	ldr	r3, [pc, #376]	; (8000ed8 <main+0x210>)
 8000d60:	ed93 7a00 	vldr	s14, [r3]
 8000d64:	4b5d      	ldr	r3, [pc, #372]	; (8000edc <main+0x214>)
 8000d66:	edd3 6a00 	vldr	s13, [r3]
 8000d6a:	4b5d      	ldr	r3, [pc, #372]	; (8000ee0 <main+0x218>)
 8000d6c:	ed93 6a00 	vldr	s12, [r3]
 8000d70:	4b5c      	ldr	r3, [pc, #368]	; (8000ee4 <main+0x21c>)
 8000d72:	edd3 7a00 	vldr	s15, [r3]
 8000d76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d7a:	ee17 1a90 	vmov	r1, s15
 8000d7e:	eeb0 1a46 	vmov.f32	s2, s12
 8000d82:	eef0 0a66 	vmov.f32	s1, s13
 8000d86:	eeb0 0a47 	vmov.f32	s0, s14
 8000d8a:	4857      	ldr	r0, [pc, #348]	; (8000ee8 <main+0x220>)
 8000d8c:	f000 fffa 	bl	8001d84 <pid_init>
  PID_Motor_Speed_Calculation_Init(&PID_Motor, maximum_motor_power_while_balancing, max_duty_cycle, min_duty_cycle_for_balancing, min_pid_correction_value, max_pid_correction_value);
 8000d90:	4b56      	ldr	r3, [pc, #344]	; (8000eec <main+0x224>)
 8000d92:	8819      	ldrh	r1, [r3, #0]
 8000d94:	4b56      	ldr	r3, [pc, #344]	; (8000ef0 <main+0x228>)
 8000d96:	881a      	ldrh	r2, [r3, #0]
 8000d98:	4b56      	ldr	r3, [pc, #344]	; (8000ef4 <main+0x22c>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	4856      	ldr	r0, [pc, #344]	; (8000ef8 <main+0x230>)
 8000d9e:	edd0 7a00 	vldr	s15, [r0]
 8000da2:	4856      	ldr	r0, [pc, #344]	; (8000efc <main+0x234>)
 8000da4:	ed90 7a00 	vldr	s14, [r0]
 8000da8:	eef0 0a47 	vmov.f32	s1, s14
 8000dac:	eeb0 0a67 	vmov.f32	s0, s15
 8000db0:	4853      	ldr	r0, [pc, #332]	; (8000f00 <main+0x238>)
 8000db2:	f7ff fa5d 	bl	8000270 <PID_Motor_Speed_Calculation_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Pętla nieskończona wykonywana jest na podstawie wybranej opcji z menu. Wybór odbywa się w trybie przerwaniowym.
	  switch(wybrana_opcja){
 8000db6:	4b53      	ldr	r3, [pc, #332]	; (8000f04 <main+0x23c>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b68      	cmp	r3, #104	; 0x68
 8000dbc:	d075      	beq.n	8000eaa <main+0x1e2>
 8000dbe:	2b68      	cmp	r3, #104	; 0x68
 8000dc0:	dcf9      	bgt.n	8000db6 <main+0xee>
 8000dc2:	2b07      	cmp	r3, #7
 8000dc4:	dc16      	bgt.n	8000df4 <main+0x12c>
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	ddf5      	ble.n	8000db6 <main+0xee>
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	2b06      	cmp	r3, #6
 8000dce:	d8f2      	bhi.n	8000db6 <main+0xee>
 8000dd0:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <main+0x110>)
 8000dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd6:	bf00      	nop
 8000dd8:	08000dfb 	.word	0x08000dfb
 8000ddc:	08000e07 	.word	0x08000e07
 8000de0:	08000e13 	.word	0x08000e13
 8000de4:	08000e3b 	.word	0x08000e3b
 8000de8:	08000e4f 	.word	0x08000e4f
 8000dec:	08000e63 	.word	0x08000e63
 8000df0:	08000e77 	.word	0x08000e77
 8000df4:	2b63      	cmp	r3, #99	; 0x63
 8000df6:	d04d      	beq.n	8000e94 <main+0x1cc>
 8000df8:	e7dd      	b.n	8000db6 <main+0xee>
	  case 1:
		  // Obsługa opcji numer 1 z menu: "1.Control the left BLDC motor manually"
		  Option_1_performer(throttle_manual);
 8000dfa:	4b43      	ldr	r3, [pc, #268]	; (8000f08 <main+0x240>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fb38 	bl	8000474 <Option_1_performer>
		  break;
 8000e04:	e059      	b.n	8000eba <main+0x1f2>
	  case 2:
		  // Obsługa opcji numer 2 z menu: "2.Control the right BLDC motor manually"
		  Option_2_performer(throttle_manual);
 8000e06:	4b40      	ldr	r3, [pc, #256]	; (8000f08 <main+0x240>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb72 	bl	80004f4 <Option_2_performer>
		  break;
 8000e10:	e053      	b.n	8000eba <main+0x1f2>
	  case 3:
		  // Obsługa opcji numer 3 z menu: "3.Start balancing"
		  MPU6050_Update(&MPU6050A_RAW, &MPU6050G_RAW, &MPU6050A_Scaled, &MPU6050G_Scaled);
 8000e12:	463b      	mov	r3, r7
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	f107 0118 	add.w	r1, r7, #24
 8000e1c:	f107 0020 	add.w	r0, r7, #32
 8000e20:	f7ff fd66 	bl	80008f0 <MPU6050_Update>
		  Option_3_performer(&MPU6050A_RAW);
 8000e24:	f107 0320 	add.w	r3, r7, #32
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fba3 	bl	8000574 <Option_3_performer>
		  RGB_LED_Level_Notificator(&MPU6050A_RAW);
 8000e2e:	f107 0320 	add.w	r3, r7, #32
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fd74 	bl	8000920 <RGB_LED_Level_Notificator>
		  break;
 8000e38:	e03f      	b.n	8000eba <main+0x1f2>
	  case 4:
		  // Obsługa opcji numer 4 z menu: "4.Check Kp value"
		  if (check_var_value_once == 0){
 8000e3a:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <main+0x244>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d136      	bne.n	8000eb0 <main+0x1e8>
			  Option_4_performer();
 8000e42:	f7ff fc59 	bl	80006f8 <Option_4_performer>
			  check_var_value_once = 1;
 8000e46:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <main+0x244>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8000e4c:	e030      	b.n	8000eb0 <main+0x1e8>
	  case 5:
		  // Obsługa opcji numer 5 z menu: "5.Check Ki value"
		  if (check_var_value_once == 0){
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <main+0x244>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d12e      	bne.n	8000eb4 <main+0x1ec>
			  Option_5_performer();
 8000e56:	f7ff fc75 	bl	8000744 <Option_5_performer>
			  check_var_value_once = 1;
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <main+0x244>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8000e60:	e028      	b.n	8000eb4 <main+0x1ec>
	  case 6:
		  // Obsługa opcji numer 6 z menu: "6.Check Kd value"
		  if (check_var_value_once == 0){
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <main+0x244>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d126      	bne.n	8000eb8 <main+0x1f0>
			  Option_5_performer();
 8000e6a:	f7ff fc6b 	bl	8000744 <Option_5_performer>
			  check_var_value_once = 1;
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <main+0x244>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8000e74:	e020      	b.n	8000eb8 <main+0x1f0>
	  case 7:
		  // Obsługa opcji numer 7 z menu: "7.Live MPU values check"
		  Option_7_performer(&MPU6050A_RAW, &MPU6050G_RAW, &MPU6050A_Scaled, &MPU6050G_Scaled);
 8000e76:	463b      	mov	r3, r7
 8000e78:	f107 020c 	add.w	r2, r7, #12
 8000e7c:	f107 0118 	add.w	r1, r7, #24
 8000e80:	f107 0020 	add.w	r0, r7, #32
 8000e84:	f7ff fc84 	bl	8000790 <Option_7_performer>
		  RGB_LED_Level_Notificator(&MPU6050A_RAW);
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fd47 	bl	8000920 <RGB_LED_Level_Notificator>
		  break;
 8000e92:	e012      	b.n	8000eba <main+0x1f2>
	  case 'c':
		  // Obsługa powrotu do menu głównego
		  Stop_BLDCs();
 8000e94:	f7ff ff02 	bl	8000c9c <Stop_BLDCs>
		  RGB_Standby_Animation();
 8000e98:	f7ff fe9a 	bl	8000bd0 <RGB_Standby_Animation>
		  check_var_value_once = 0;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <main+0x244>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
		  pid_reset(&pid_regulator);
 8000ea2:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <main+0x220>)
 8000ea4:	f000 ff91 	bl	8001dca <pid_reset>
		  break;
 8000ea8:	e007      	b.n	8000eba <main+0x1f2>
	  case 'h':
		  // Obsługa awaryjnego zatrzymania silników
		  Stop_BLDCs();
 8000eaa:	f7ff fef7 	bl	8000c9c <Stop_BLDCs>
		  break;
 8000eae:	e004      	b.n	8000eba <main+0x1f2>
		  break;
 8000eb0:	bf00      	nop
 8000eb2:	e780      	b.n	8000db6 <main+0xee>
		  break;
 8000eb4:	bf00      	nop
 8000eb6:	e77e      	b.n	8000db6 <main+0xee>
		  break;
 8000eb8:	bf00      	nop
	  switch(wybrana_opcja){
 8000eba:	e77c      	b.n	8000db6 <main+0xee>
 8000ebc:	200002b0 	.word	0x200002b0
 8000ec0:	20000396 	.word	0x20000396
 8000ec4:	200003fc 	.word	0x200003fc
 8000ec8:	200003b0 	.word	0x200003b0
 8000ecc:	200002fc 	.word	0x200002fc
 8000ed0:	20000480 	.word	0x20000480
 8000ed4:	20000348 	.word	0x20000348
 8000ed8:	20000044 	.word	0x20000044
 8000edc:	20000048 	.word	0x20000048
 8000ee0:	2000004c 	.word	0x2000004c
 8000ee4:	20000050 	.word	0x20000050
 8000ee8:	20000398 	.word	0x20000398
 8000eec:	2000000c 	.word	0x2000000c
 8000ef0:	20000006 	.word	0x20000006
 8000ef4:	2000000a 	.word	0x2000000a
 8000ef8:	2000003c 	.word	0x2000003c
 8000efc:	20000040 	.word	0x20000040
 8000f00:	200004cc 	.word	0x200004cc
 8000f04:	20000004 	.word	0x20000004
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	200000e0 	.word	0x200000e0

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b09c      	sub	sp, #112	; 0x70
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f1a:	2228      	movs	r2, #40	; 0x28
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f006 f95c 	bl	80071dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f34:	463b      	mov	r3, r7
 8000f36:	2234      	movs	r2, #52	; 0x34
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 f94e 	bl	80071dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000f40:	2303      	movs	r3, #3
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f52:	2310      	movs	r3, #16
 8000f54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f60:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fac6 	bl	80034fc <HAL_RCC_OscConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000f76:	f000 fcf1 	bl	800195c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7a:	230f      	movs	r3, #15
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f94:	2102      	movs	r1, #2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 f9b8 	bl	800430c <HAL_RCC_ClockConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fa2:	f000 fcdb 	bl	800195c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM15
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <SystemClock_Config+0xc4>)
 8000fa8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 fbdb 	bl	8004778 <HAL_RCCEx_PeriphCLKConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000fc8:	f000 fcc8 	bl	800195c <Error_Handler>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3770      	adds	r7, #112	; 0x70
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	001c0020 	.word	0x001c0020

08000fd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <MX_I2C1_Init+0x74>)
 8000fde:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <MX_I2C1_Init+0x78>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <MX_I2C1_Init+0x74>)
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <MX_I2C1_Init+0x7c>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <MX_I2C1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <MX_I2C1_Init+0x74>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <MX_I2C1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_I2C1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <MX_I2C1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_I2C1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_I2C1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001012:	480e      	ldr	r0, [pc, #56]	; (800104c <MX_I2C1_Init+0x74>)
 8001014:	f001 fd70 	bl	8002af8 <HAL_I2C_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800101e:	f000 fc9d 	bl	800195c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4809      	ldr	r0, [pc, #36]	; (800104c <MX_I2C1_Init+0x74>)
 8001026:	f002 f9d1 	bl	80033cc <HAL_I2CEx_ConfigAnalogFilter>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001030:	f000 fc94 	bl	800195c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_I2C1_Init+0x74>)
 8001038:	f002 fa13 	bl	8003462 <HAL_I2CEx_ConfigDigitalFilter>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 fc8b 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200002b0 	.word	0x200002b0
 8001050:	40005400 	.word	0x40005400
 8001054:	2000090e 	.word	0x2000090e

08001058 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08e      	sub	sp, #56	; 0x38
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]
 8001086:	615a      	str	r2, [r3, #20]
 8001088:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800108a:	4b33      	ldr	r3, [pc, #204]	; (8001158 <MX_TIM2_Init+0x100>)
 800108c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001090:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001092:	4b31      	ldr	r3, [pc, #196]	; (8001158 <MX_TIM2_Init+0x100>)
 8001094:	2247      	movs	r2, #71	; 0x47
 8001096:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <MX_TIM2_Init+0x100>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800109e:	4b2e      	ldr	r3, [pc, #184]	; (8001158 <MX_TIM2_Init+0x100>)
 80010a0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80010a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <MX_TIM2_Init+0x100>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ac:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <MX_TIM2_Init+0x100>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010b2:	4829      	ldr	r0, [pc, #164]	; (8001158 <MX_TIM2_Init+0x100>)
 80010b4:	f003 fcf2 	bl	8004a9c <HAL_TIM_Base_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010be:	f000 fc4d 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010cc:	4619      	mov	r1, r3
 80010ce:	4822      	ldr	r0, [pc, #136]	; (8001158 <MX_TIM2_Init+0x100>)
 80010d0:	f004 f8b6 	bl	8005240 <HAL_TIM_ConfigClockSource>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010da:	f000 fc3f 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010de:	481e      	ldr	r0, [pc, #120]	; (8001158 <MX_TIM2_Init+0x100>)
 80010e0:	f003 fd33 	bl	8004b4a <HAL_TIM_PWM_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010ea:	f000 fc37 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4816      	ldr	r0, [pc, #88]	; (8001158 <MX_TIM2_Init+0x100>)
 80010fe:	f004 fd6f 	bl	8005be0 <HAL_TIMEx_MasterConfigSynchronization>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001108:	f000 fc28 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110c:	2360      	movs	r3, #96	; 0x60
 800110e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	480d      	ldr	r0, [pc, #52]	; (8001158 <MX_TIM2_Init+0x100>)
 8001124:	f003 ff78 	bl	8005018 <HAL_TIM_PWM_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800112e:	f000 fc15 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	2204      	movs	r2, #4
 8001136:	4619      	mov	r1, r3
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <MX_TIM2_Init+0x100>)
 800113a:	f003 ff6d 	bl	8005018 <HAL_TIM_PWM_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001144:	f000 fc0a 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <MX_TIM2_Init+0x100>)
 800114a:	f000 ff93 	bl	8002074 <HAL_TIM_MspPostInit>

}
 800114e:	bf00      	nop
 8001150:	3738      	adds	r7, #56	; 0x38
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200003b0 	.word	0x200003b0

0800115c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09a      	sub	sp, #104	; 0x68
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	615a      	str	r2, [r3, #20]
 800118e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	222c      	movs	r2, #44	; 0x2c
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f006 f820 	bl	80071dc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800119c:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <MX_TIM15_Init+0x154>)
 800119e:	4a45      	ldr	r2, [pc, #276]	; (80012b4 <MX_TIM15_Init+0x158>)
 80011a0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 71;
 80011a2:	4b43      	ldr	r3, [pc, #268]	; (80012b0 <MX_TIM15_Init+0x154>)
 80011a4:	2247      	movs	r2, #71	; 0x47
 80011a6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a8:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <MX_TIM15_Init+0x154>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 255;
 80011ae:	4b40      	ldr	r3, [pc, #256]	; (80012b0 <MX_TIM15_Init+0x154>)
 80011b0:	22ff      	movs	r2, #255	; 0xff
 80011b2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b3e      	ldr	r3, [pc, #248]	; (80012b0 <MX_TIM15_Init+0x154>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <MX_TIM15_Init+0x154>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <MX_TIM15_Init+0x154>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80011c6:	483a      	ldr	r0, [pc, #232]	; (80012b0 <MX_TIM15_Init+0x154>)
 80011c8:	f003 fc68 	bl	8004a9c <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 80011d2:	f000 fbc3 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011da:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80011dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011e0:	4619      	mov	r1, r3
 80011e2:	4833      	ldr	r0, [pc, #204]	; (80012b0 <MX_TIM15_Init+0x154>)
 80011e4:	f004 f82c 	bl	8005240 <HAL_TIM_ConfigClockSource>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 80011ee:	f000 fbb5 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80011f2:	482f      	ldr	r0, [pc, #188]	; (80012b0 <MX_TIM15_Init+0x154>)
 80011f4:	f003 fca9 	bl	8004b4a <HAL_TIM_PWM_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 80011fe:	f000 fbad 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800120a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800120e:	4619      	mov	r1, r3
 8001210:	4827      	ldr	r0, [pc, #156]	; (80012b0 <MX_TIM15_Init+0x154>)
 8001212:	f004 fce5 	bl	8005be0 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 800121c:	f000 fb9e 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001220:	2360      	movs	r3, #96	; 0x60
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001228:	2302      	movs	r3, #2
 800122a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800122c:	2300      	movs	r3, #0
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001240:	2200      	movs	r2, #0
 8001242:	4619      	mov	r1, r3
 8001244:	481a      	ldr	r0, [pc, #104]	; (80012b0 <MX_TIM15_Init+0x154>)
 8001246:	f003 fee7 	bl	8005018 <HAL_TIM_PWM_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8001250:	f000 fb84 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001254:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001258:	2204      	movs	r2, #4
 800125a:	4619      	mov	r1, r3
 800125c:	4814      	ldr	r0, [pc, #80]	; (80012b0 <MX_TIM15_Init+0x154>)
 800125e:	f003 fedb 	bl	8005018 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM15_Init+0x110>
  {
    Error_Handler();
 8001268:	f000 fb78 	bl	800195c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001284:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4807      	ldr	r0, [pc, #28]	; (80012b0 <MX_TIM15_Init+0x154>)
 8001294:	f004 fd0a 	bl	8005cac <HAL_TIMEx_ConfigBreakDeadTime>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM15_Init+0x146>
  {
    Error_Handler();
 800129e:	f000 fb5d 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80012a2:	4803      	ldr	r0, [pc, #12]	; (80012b0 <MX_TIM15_Init+0x154>)
 80012a4:	f000 fee6 	bl	8002074 <HAL_TIM_MspPostInit>

}
 80012a8:	bf00      	nop
 80012aa:	3768      	adds	r7, #104	; 0x68
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200002fc 	.word	0x200002fc
 80012b4:	40014000 	.word	0x40014000

080012b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b092      	sub	sp, #72	; 0x48
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]
 80012ce:	615a      	str	r2, [r3, #20]
 80012d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	222c      	movs	r2, #44	; 0x2c
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f005 ff7f 	bl	80071dc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012de:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <MX_TIM16_Init+0xe8>)
 80012e0:	4a30      	ldr	r2, [pc, #192]	; (80013a4 <MX_TIM16_Init+0xec>)
 80012e2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 71;
 80012e4:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <MX_TIM16_Init+0xe8>)
 80012e6:	2247      	movs	r2, #71	; 0x47
 80012e8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <MX_TIM16_Init+0xe8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <MX_TIM16_Init+0xe8>)
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <MX_TIM16_Init+0xe8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <MX_TIM16_Init+0xe8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <MX_TIM16_Init+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001308:	4825      	ldr	r0, [pc, #148]	; (80013a0 <MX_TIM16_Init+0xe8>)
 800130a:	f003 fbc7 	bl	8004a9c <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001314:	f000 fb22 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001318:	4821      	ldr	r0, [pc, #132]	; (80013a0 <MX_TIM16_Init+0xe8>)
 800131a:	f003 fc16 	bl	8004b4a <HAL_TIM_PWM_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8001324:	f000 fb1a 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001328:	2360      	movs	r3, #96	; 0x60
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001330:	2302      	movs	r3, #2
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001334:	2300      	movs	r3, #0
 8001336:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001348:	2200      	movs	r2, #0
 800134a:	4619      	mov	r1, r3
 800134c:	4814      	ldr	r0, [pc, #80]	; (80013a0 <MX_TIM16_Init+0xe8>)
 800134e:	f003 fe63 	bl	8005018 <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8001358:	f000 fb00 	bl	800195c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001374:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	4807      	ldr	r0, [pc, #28]	; (80013a0 <MX_TIM16_Init+0xe8>)
 8001384:	f004 fc92 	bl	8005cac <HAL_TIMEx_ConfigBreakDeadTime>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 800138e:	f000 fae5 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <MX_TIM16_Init+0xe8>)
 8001394:	f000 fe6e 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001398:	bf00      	nop
 800139a:	3748      	adds	r7, #72	; 0x48
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000480 	.word	0x20000480
 80013a4:	40014400 	.word	0x40014400

080013a8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b092      	sub	sp, #72	; 0x48
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	222c      	movs	r2, #44	; 0x2c
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f005 ff07 	bl	80071dc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <MX_TIM17_Init+0xe8>)
 80013d0:	4a30      	ldr	r2, [pc, #192]	; (8001494 <MX_TIM17_Init+0xec>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 71;
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <MX_TIM17_Init+0xe8>)
 80013d6:	2247      	movs	r2, #71	; 0x47
 80013d8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <MX_TIM17_Init+0xe8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 80013e0:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <MX_TIM17_Init+0xe8>)
 80013e2:	22ff      	movs	r2, #255	; 0xff
 80013e4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <MX_TIM17_Init+0xe8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <MX_TIM17_Init+0xe8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <MX_TIM17_Init+0xe8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80013f8:	4825      	ldr	r0, [pc, #148]	; (8001490 <MX_TIM17_Init+0xe8>)
 80013fa:	f003 fb4f 	bl	8004a9c <HAL_TIM_Base_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001404:	f000 faaa 	bl	800195c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001408:	4821      	ldr	r0, [pc, #132]	; (8001490 <MX_TIM17_Init+0xe8>)
 800140a:	f003 fb9e 	bl	8004b4a <HAL_TIM_PWM_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 faa2 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001418:	2360      	movs	r3, #96	; 0x60
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001420:	2302      	movs	r3, #2
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001424:	2300      	movs	r3, #0
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001438:	2200      	movs	r2, #0
 800143a:	4619      	mov	r1, r3
 800143c:	4814      	ldr	r0, [pc, #80]	; (8001490 <MX_TIM17_Init+0xe8>)
 800143e:	f003 fdeb 	bl	8005018 <HAL_TIM_PWM_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8001448:	f000 fa88 	bl	800195c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001464:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800146e:	463b      	mov	r3, r7
 8001470:	4619      	mov	r1, r3
 8001472:	4807      	ldr	r0, [pc, #28]	; (8001490 <MX_TIM17_Init+0xe8>)
 8001474:	f004 fc1a 	bl	8005cac <HAL_TIMEx_ConfigBreakDeadTime>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 800147e:	f000 fa6d 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001482:	4803      	ldr	r0, [pc, #12]	; (8001490 <MX_TIM17_Init+0xe8>)
 8001484:	f000 fdf6 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001488:	bf00      	nop
 800148a:	3748      	adds	r7, #72	; 0x48
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000348 	.word	0x20000348
 8001494:	40014800 	.word	0x40014800

08001498 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <MX_USART2_UART_Init+0x5c>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014dc:	f004 fc7c 	bl	8005dd8 <HAL_UART_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014e6:	f000 fa39 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200003fc 	.word	0x200003fc
 80014f4:	40004400 	.word	0x40004400

080014f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <MX_GPIO_Init+0xac>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	4a24      	ldr	r2, [pc, #144]	; (80015a4 <MX_GPIO_Init+0xac>)
 8001514:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001518:	6153      	str	r3, [r2, #20]
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_GPIO_Init+0xac>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <MX_GPIO_Init+0xac>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <MX_GPIO_Init+0xac>)
 800152c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001530:	6153      	str	r3, [r2, #20]
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_GPIO_Init+0xac>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_GPIO_Init+0xac>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <MX_GPIO_Init+0xac>)
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	6153      	str	r3, [r2, #20]
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_GPIO_Init+0xac>)
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_GPIO_Init+0xac>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <MX_GPIO_Init+0xac>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001560:	6153      	str	r3, [r2, #20]
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_GPIO_Init+0xac>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800156e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001574:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4808      	ldr	r0, [pc, #32]	; (80015a8 <MX_GPIO_Init+0xb0>)
 8001586:	f001 f92d 	bl	80027e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	2028      	movs	r0, #40	; 0x28
 8001590:	f001 f87b 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001594:	2028      	movs	r0, #40	; 0x28
 8001596:	f001 f894 	bl	80026c2 <HAL_NVIC_EnableIRQ>

}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000800 	.word	0x48000800

080015ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2){
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a97      	ldr	r2, [pc, #604]	; (8001818 <HAL_UART_RxCpltCallback+0x26c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	f040 818d 	bne.w	80018da <HAL_UART_RxCpltCallback+0x32e>
		if(znak == 'c'){
 80015c0:	4b96      	ldr	r3, [pc, #600]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b63      	cmp	r3, #99	; 0x63
 80015c6:	d126      	bne.n	8001616 <HAL_UART_RxCpltCallback+0x6a>
			for (uint8_t i=0; i<number_of_menu_lines;i++){
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e01d      	b.n	800160a <HAL_UART_RxCpltCallback+0x5e>
				dl_kom = sprintf((char *)komunikat,menu_screen[i]);
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	4a93      	ldr	r2, [pc, #588]	; (8001820 <HAL_UART_RxCpltCallback+0x274>)
 80015d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d6:	4619      	mov	r1, r3
 80015d8:	4892      	ldr	r0, [pc, #584]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 80015da:	f005 fe07 	bl	80071ec <siprintf>
 80015de:	4603      	mov	r3, r0
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b91      	ldr	r3, [pc, #580]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 80015e4:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 80015e6:	4b90      	ldr	r3, [pc, #576]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 80015e8:	881a      	ldrh	r2, [r3, #0]
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	498d      	ldr	r1, [pc, #564]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 80015f0:	488e      	ldr	r0, [pc, #568]	; (800182c <HAL_UART_RxCpltCallback+0x280>)
 80015f2:	f004 fc3f 	bl	8005e74 <HAL_UART_Transmit>
				exit_switch_options = 0;
 80015f6:	4b8e      	ldr	r3, [pc, #568]	; (8001830 <HAL_UART_RxCpltCallback+0x284>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
				wybrana_opcja = znak;
 80015fc:	4b87      	ldr	r3, [pc, #540]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	4b8c      	ldr	r3, [pc, #560]	; (8001834 <HAL_UART_RxCpltCallback+0x288>)
 8001602:	701a      	strb	r2, [r3, #0]
			for (uint8_t i=0; i<number_of_menu_lines;i++){
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	3301      	adds	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	4b8b      	ldr	r3, [pc, #556]	; (8001838 <HAL_UART_RxCpltCallback+0x28c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	429a      	cmp	r2, r3
 8001612:	d3dc      	bcc.n	80015ce <HAL_UART_RxCpltCallback+0x22>
 8001614:	e161      	b.n	80018da <HAL_UART_RxCpltCallback+0x32e>
			}
		}
		else if(znak =='h'){
 8001616:	4b81      	ldr	r3, [pc, #516]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b68      	cmp	r3, #104	; 0x68
 800161c:	d114      	bne.n	8001648 <HAL_UART_RxCpltCallback+0x9c>
			dl_kom = sprintf((char *)komunikat, "\n\n\rPerforming EMERGENCY STOP!\n\n\r");
 800161e:	4987      	ldr	r1, [pc, #540]	; (800183c <HAL_UART_RxCpltCallback+0x290>)
 8001620:	4880      	ldr	r0, [pc, #512]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 8001622:	f005 fde3 	bl	80071ec <siprintf>
 8001626:	4603      	mov	r3, r0
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b7f      	ldr	r3, [pc, #508]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 800162c:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 800162e:	4b7e      	ldr	r3, [pc, #504]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 8001630:	881a      	ldrh	r2, [r3, #0]
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	497b      	ldr	r1, [pc, #492]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 8001638:	487c      	ldr	r0, [pc, #496]	; (800182c <HAL_UART_RxCpltCallback+0x280>)
 800163a:	f004 fc1b 	bl	8005e74 <HAL_UART_Transmit>
			wybrana_opcja = znak;
 800163e:	4b77      	ldr	r3, [pc, #476]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 8001640:	781a      	ldrb	r2, [r3, #0]
 8001642:	4b7c      	ldr	r3, [pc, #496]	; (8001834 <HAL_UART_RxCpltCallback+0x288>)
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	e148      	b.n	80018da <HAL_UART_RxCpltCallback+0x32e>
		}
		else if(exit_switch_options == 0)
 8001648:	4b79      	ldr	r3, [pc, #484]	; (8001830 <HAL_UART_RxCpltCallback+0x284>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	f040 80be 	bne.w	80017ce <HAL_UART_RxCpltCallback+0x222>
		{
			switch(znak){
 8001652:	4b72      	ldr	r3, [pc, #456]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	3b01      	subs	r3, #1
 8001658:	2b06      	cmp	r3, #6
 800165a:	f200 80a7 	bhi.w	80017ac <HAL_UART_RxCpltCallback+0x200>
 800165e:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <HAL_UART_RxCpltCallback+0xb8>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	08001681 	.word	0x08001681
 8001668:	080016f9 	.word	0x080016f9
 800166c:	08001771 	.word	0x08001771
 8001670:	0800177d 	.word	0x0800177d
 8001674:	08001789 	.word	0x08001789
 8001678:	08001795 	.word	0x08001795
 800167c:	080017a1 	.word	0x080017a1
			case 1:
				throttle_manual = 0;
 8001680:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <HAL_UART_RxCpltCallback+0x294>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
				Choosen_USART_Option(znak);
 8001686:	4b65      	ldr	r3, [pc, #404]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe feca 	bl	8000424 <Choosen_USART_Option>
				dl_kom = sprintf((char *)komunikat, "Control the throttle of the left motor by sending integer values (0-100).\n\r To exit this mode type 'c'\n\n\r");
 8001690:	496c      	ldr	r1, [pc, #432]	; (8001844 <HAL_UART_RxCpltCallback+0x298>)
 8001692:	4864      	ldr	r0, [pc, #400]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 8001694:	f005 fdaa 	bl	80071ec <siprintf>
 8001698:	4603      	mov	r3, r0
 800169a:	b29a      	uxth	r2, r3
 800169c:	4b62      	ldr	r3, [pc, #392]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 800169e:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 80016a0:	4b61      	ldr	r3, [pc, #388]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 80016a2:	881a      	ldrh	r2, [r3, #0]
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
 80016a8:	495e      	ldr	r1, [pc, #376]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 80016aa:	4860      	ldr	r0, [pc, #384]	; (800182c <HAL_UART_RxCpltCallback+0x280>)
 80016ac:	f004 fbe2 	bl	8005e74 <HAL_UART_Transmit>
				dl_kom = sprintf((char *)komunikat, "Starting the left motor...\n\r");
 80016b0:	4965      	ldr	r1, [pc, #404]	; (8001848 <HAL_UART_RxCpltCallback+0x29c>)
 80016b2:	485c      	ldr	r0, [pc, #368]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 80016b4:	f005 fd9a 	bl	80071ec <siprintf>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b5a      	ldr	r3, [pc, #360]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 80016be:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 80016c2:	881a      	ldrh	r2, [r3, #0]
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
 80016c8:	4956      	ldr	r1, [pc, #344]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 80016ca:	4858      	ldr	r0, [pc, #352]	; (800182c <HAL_UART_RxCpltCallback+0x280>)
 80016cc:	f004 fbd2 	bl	8005e74 <HAL_UART_Transmit>
				dl_kom = sprintf((char *)komunikat, "Use numbers to control the throttle\n\r");
 80016d0:	495e      	ldr	r1, [pc, #376]	; (800184c <HAL_UART_RxCpltCallback+0x2a0>)
 80016d2:	4854      	ldr	r0, [pc, #336]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 80016d4:	f005 fd8a 	bl	80071ec <siprintf>
 80016d8:	4603      	mov	r3, r0
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4b52      	ldr	r3, [pc, #328]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 80016de:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 80016e0:	4b51      	ldr	r3, [pc, #324]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 80016e2:	881a      	ldrh	r2, [r3, #0]
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
 80016e8:	494e      	ldr	r1, [pc, #312]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 80016ea:	4850      	ldr	r0, [pc, #320]	; (800182c <HAL_UART_RxCpltCallback+0x280>)
 80016ec:	f004 fbc2 	bl	8005e74 <HAL_UART_Transmit>
				exit_switch_options = 1;
 80016f0:	4b4f      	ldr	r3, [pc, #316]	; (8001830 <HAL_UART_RxCpltCallback+0x284>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
				break;
 80016f6:	e0f0      	b.n	80018da <HAL_UART_RxCpltCallback+0x32e>
			case 2:
				throttle_manual = 0;
 80016f8:	4b51      	ldr	r3, [pc, #324]	; (8001840 <HAL_UART_RxCpltCallback+0x294>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
				Choosen_USART_Option(znak);
 80016fe:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fe8e 	bl	8000424 <Choosen_USART_Option>
				dl_kom = sprintf((char *)komunikat, "Control the throttle of the right motor by sending integer values (0-100).\n\r To exit this mode type 'c'\n\n\r");
 8001708:	4951      	ldr	r1, [pc, #324]	; (8001850 <HAL_UART_RxCpltCallback+0x2a4>)
 800170a:	4846      	ldr	r0, [pc, #280]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 800170c:	f005 fd6e 	bl	80071ec <siprintf>
 8001710:	4603      	mov	r3, r0
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b44      	ldr	r3, [pc, #272]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 8001716:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 8001718:	4b43      	ldr	r3, [pc, #268]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 800171a:	881a      	ldrh	r2, [r3, #0]
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	4940      	ldr	r1, [pc, #256]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 8001722:	4842      	ldr	r0, [pc, #264]	; (800182c <HAL_UART_RxCpltCallback+0x280>)
 8001724:	f004 fba6 	bl	8005e74 <HAL_UART_Transmit>
				dl_kom = sprintf((char *)komunikat, "Starting the right motor...\n\r");
 8001728:	494a      	ldr	r1, [pc, #296]	; (8001854 <HAL_UART_RxCpltCallback+0x2a8>)
 800172a:	483e      	ldr	r0, [pc, #248]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 800172c:	f005 fd5e 	bl	80071ec <siprintf>
 8001730:	4603      	mov	r3, r0
 8001732:	b29a      	uxth	r2, r3
 8001734:	4b3c      	ldr	r3, [pc, #240]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 8001736:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 8001738:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 800173a:	881a      	ldrh	r2, [r3, #0]
 800173c:	f04f 33ff 	mov.w	r3, #4294967295
 8001740:	4938      	ldr	r1, [pc, #224]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 8001742:	483a      	ldr	r0, [pc, #232]	; (800182c <HAL_UART_RxCpltCallback+0x280>)
 8001744:	f004 fb96 	bl	8005e74 <HAL_UART_Transmit>
				dl_kom = sprintf((char *)komunikat, "Use numbers to control the throttle\n\r");
 8001748:	4940      	ldr	r1, [pc, #256]	; (800184c <HAL_UART_RxCpltCallback+0x2a0>)
 800174a:	4836      	ldr	r0, [pc, #216]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 800174c:	f005 fd4e 	bl	80071ec <siprintf>
 8001750:	4603      	mov	r3, r0
 8001752:	b29a      	uxth	r2, r3
 8001754:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 8001756:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 8001758:	4b33      	ldr	r3, [pc, #204]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 800175a:	881a      	ldrh	r2, [r3, #0]
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
 8001760:	4930      	ldr	r1, [pc, #192]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 8001762:	4832      	ldr	r0, [pc, #200]	; (800182c <HAL_UART_RxCpltCallback+0x280>)
 8001764:	f004 fb86 	bl	8005e74 <HAL_UART_Transmit>
				exit_switch_options = 1;
 8001768:	4b31      	ldr	r3, [pc, #196]	; (8001830 <HAL_UART_RxCpltCallback+0x284>)
 800176a:	2201      	movs	r2, #1
 800176c:	701a      	strb	r2, [r3, #0]
				break;
 800176e:	e0b4      	b.n	80018da <HAL_UART_RxCpltCallback+0x32e>
			case 3:
				Choosen_USART_Option(znak);
 8001770:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fe55 	bl	8000424 <Choosen_USART_Option>
				break;
 800177a:	e0ae      	b.n	80018da <HAL_UART_RxCpltCallback+0x32e>
			case 4:
				Choosen_USART_Option(znak);
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe4f 	bl	8000424 <Choosen_USART_Option>
				break;
 8001786:	e0a8      	b.n	80018da <HAL_UART_RxCpltCallback+0x32e>
			case 5:
				Choosen_USART_Option(znak);
 8001788:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fe49 	bl	8000424 <Choosen_USART_Option>
				break;
 8001792:	e0a2      	b.n	80018da <HAL_UART_RxCpltCallback+0x32e>
			case 6:
				Choosen_USART_Option(znak);
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fe43 	bl	8000424 <Choosen_USART_Option>
				break;
 800179e:	e09c      	b.n	80018da <HAL_UART_RxCpltCallback+0x32e>
			case 7:
				Choosen_USART_Option(znak);
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe3d 	bl	8000424 <Choosen_USART_Option>
				break;
 80017aa:	e096      	b.n	80018da <HAL_UART_RxCpltCallback+0x32e>
			default:
				dl_kom = sprintf((char *)komunikat, "\n\n\r The given option is not available in the menu scope. Please try again.\n\n\r");
 80017ac:	492a      	ldr	r1, [pc, #168]	; (8001858 <HAL_UART_RxCpltCallback+0x2ac>)
 80017ae:	481d      	ldr	r0, [pc, #116]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 80017b0:	f005 fd1c 	bl	80071ec <siprintf>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 80017ba:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 80017be:	881a      	ldrh	r2, [r3, #0]
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	4917      	ldr	r1, [pc, #92]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 80017c6:	4819      	ldr	r0, [pc, #100]	; (800182c <HAL_UART_RxCpltCallback+0x280>)
 80017c8:	f004 fb54 	bl	8005e74 <HAL_UART_Transmit>
 80017cc:	e085      	b.n	80018da <HAL_UART_RxCpltCallback+0x32e>
			}
		}
		else
		{
			switch (wybrana_opcja){
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_UART_RxCpltCallback+0x288>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d002      	beq.n	80017dc <HAL_UART_RxCpltCallback+0x230>
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d052      	beq.n	8001880 <HAL_UART_RxCpltCallback+0x2d4>
 80017da:	e07e      	b.n	80018da <HAL_UART_RxCpltCallback+0x32e>
			case 1:
				if(znak >= 0 && znak <= 100){
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b64      	cmp	r3, #100	; 0x64
 80017e2:	d83d      	bhi.n	8001860 <HAL_UART_RxCpltCallback+0x2b4>
					throttle_manual = znak;
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_UART_RxCpltCallback+0x294>)
 80017ec:	601a      	str	r2, [r3, #0]
					dl_kom = sprintf((char *)komunikat, "Setting throttle value to %d!\n\r",znak);
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_UART_RxCpltCallback+0x270>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4919      	ldr	r1, [pc, #100]	; (800185c <HAL_UART_RxCpltCallback+0x2b0>)
 80017f6:	480b      	ldr	r0, [pc, #44]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 80017f8:	f005 fcf8 	bl	80071ec <siprintf>
 80017fc:	4603      	mov	r3, r0
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 8001802:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <HAL_UART_RxCpltCallback+0x27c>)
 8001806:	881a      	ldrh	r2, [r3, #0]
 8001808:	f04f 33ff 	mov.w	r3, #4294967295
 800180c:	4905      	ldr	r1, [pc, #20]	; (8001824 <HAL_UART_RxCpltCallback+0x278>)
 800180e:	4807      	ldr	r0, [pc, #28]	; (800182c <HAL_UART_RxCpltCallback+0x280>)
 8001810:	f004 fb30 	bl	8005e74 <HAL_UART_Transmit>
 8001814:	e034      	b.n	8001880 <HAL_UART_RxCpltCallback+0x2d4>
 8001816:	bf00      	nop
 8001818:	40004400 	.word	0x40004400
 800181c:	20000396 	.word	0x20000396
 8001820:	20000010 	.word	0x20000010
 8001824:	20000150 	.word	0x20000150
 8001828:	20000394 	.word	0x20000394
 800182c:	200003fc 	.word	0x200003fc
 8001830:	200000e1 	.word	0x200000e1
 8001834:	20000004 	.word	0x20000004
 8001838:	20000005 	.word	0x20000005
 800183c:	08007d24 	.word	0x08007d24
 8001840:	20000000 	.word	0x20000000
 8001844:	08007d48 	.word	0x08007d48
 8001848:	08007db4 	.word	0x08007db4
 800184c:	08007dd4 	.word	0x08007dd4
 8001850:	08007dfc 	.word	0x08007dfc
 8001854:	08007e68 	.word	0x08007e68
 8001858:	08007e88 	.word	0x08007e88
 800185c:	08007ed8 	.word	0x08007ed8
				}
				else{
					dl_kom = sprintf((char *)komunikat, "Wrong value!\n\r");
 8001860:	4922      	ldr	r1, [pc, #136]	; (80018ec <HAL_UART_RxCpltCallback+0x340>)
 8001862:	4823      	ldr	r0, [pc, #140]	; (80018f0 <HAL_UART_RxCpltCallback+0x344>)
 8001864:	f005 fcc2 	bl	80071ec <siprintf>
 8001868:	4603      	mov	r3, r0
 800186a:	b29a      	uxth	r2, r3
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_UART_RxCpltCallback+0x348>)
 800186e:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_UART_RxCpltCallback+0x348>)
 8001872:	881a      	ldrh	r2, [r3, #0]
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	491d      	ldr	r1, [pc, #116]	; (80018f0 <HAL_UART_RxCpltCallback+0x344>)
 800187a:	481f      	ldr	r0, [pc, #124]	; (80018f8 <HAL_UART_RxCpltCallback+0x34c>)
 800187c:	f004 fafa 	bl	8005e74 <HAL_UART_Transmit>
				}
			case 2:
				if(znak >= 0 && znak <= 100){
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <HAL_UART_RxCpltCallback+0x350>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b64      	cmp	r3, #100	; 0x64
 8001886:	d818      	bhi.n	80018ba <HAL_UART_RxCpltCallback+0x30e>
					throttle_manual = znak;
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <HAL_UART_RxCpltCallback+0x350>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <HAL_UART_RxCpltCallback+0x354>)
 8001890:	601a      	str	r2, [r3, #0]
					dl_kom = sprintf((char *)komunikat, "Setting throttle value to %d!\n\r",znak);
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_UART_RxCpltCallback+0x350>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	491a      	ldr	r1, [pc, #104]	; (8001904 <HAL_UART_RxCpltCallback+0x358>)
 800189a:	4815      	ldr	r0, [pc, #84]	; (80018f0 <HAL_UART_RxCpltCallback+0x344>)
 800189c:	f005 fca6 	bl	80071ec <siprintf>
 80018a0:	4603      	mov	r3, r0
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HAL_UART_RxCpltCallback+0x348>)
 80018a6:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_UART_RxCpltCallback+0x348>)
 80018aa:	881a      	ldrh	r2, [r3, #0]
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	490f      	ldr	r1, [pc, #60]	; (80018f0 <HAL_UART_RxCpltCallback+0x344>)
 80018b2:	4811      	ldr	r0, [pc, #68]	; (80018f8 <HAL_UART_RxCpltCallback+0x34c>)
 80018b4:	f004 fade 	bl	8005e74 <HAL_UART_Transmit>
 80018b8:	e00f      	b.n	80018da <HAL_UART_RxCpltCallback+0x32e>
				}
				else{
					dl_kom = sprintf((char *)komunikat, "Wrong value!\n\r");
 80018ba:	490c      	ldr	r1, [pc, #48]	; (80018ec <HAL_UART_RxCpltCallback+0x340>)
 80018bc:	480c      	ldr	r0, [pc, #48]	; (80018f0 <HAL_UART_RxCpltCallback+0x344>)
 80018be:	f005 fc95 	bl	80071ec <siprintf>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_UART_RxCpltCallback+0x348>)
 80018c8:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_UART_RxCpltCallback+0x348>)
 80018cc:	881a      	ldrh	r2, [r3, #0]
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	4907      	ldr	r1, [pc, #28]	; (80018f0 <HAL_UART_RxCpltCallback+0x344>)
 80018d4:	4808      	ldr	r0, [pc, #32]	; (80018f8 <HAL_UART_RxCpltCallback+0x34c>)
 80018d6:	f004 facd 	bl	8005e74 <HAL_UART_Transmit>
				}
			}

		}
	}
	HAL_UART_Receive_IT(&huart2, &znak, 1);
 80018da:	2201      	movs	r2, #1
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <HAL_UART_RxCpltCallback+0x350>)
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <HAL_UART_RxCpltCallback+0x34c>)
 80018e0:	f004 fb5c 	bl	8005f9c <HAL_UART_Receive_IT>
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	08007ef8 	.word	0x08007ef8
 80018f0:	20000150 	.word	0x20000150
 80018f4:	20000394 	.word	0x20000394
 80018f8:	200003fc 	.word	0x200003fc
 80018fc:	20000396 	.word	0x20000396
 8001900:	20000000 	.word	0x20000000
 8001904:	08007ed8 	.word	0x08007ed8

08001908 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == B1_Pin){
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001918:	d112      	bne.n	8001940 <HAL_GPIO_EXTI_Callback+0x38>
		wybrana_opcja = 'h';
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_GPIO_EXTI_Callback+0x40>)
 800191c:	2268      	movs	r2, #104	; 0x68
 800191e:	701a      	strb	r2, [r3, #0]
		dl_kom = sprintf((char *)komunikat, "\n\n\rPerforming EMERGENCY STOP!\n\n\r");
 8001920:	490a      	ldr	r1, [pc, #40]	; (800194c <HAL_GPIO_EXTI_Callback+0x44>)
 8001922:	480b      	ldr	r0, [pc, #44]	; (8001950 <HAL_GPIO_EXTI_Callback+0x48>)
 8001924:	f005 fc62 	bl	80071ec <siprintf>
 8001928:	4603      	mov	r3, r0
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_GPIO_EXTI_Callback+0x4c>)
 800192e:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, komunikat, dl_kom, HAL_MAX_DELAY);
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001932:	881a      	ldrh	r2, [r3, #0]
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
 8001938:	4905      	ldr	r1, [pc, #20]	; (8001950 <HAL_GPIO_EXTI_Callback+0x48>)
 800193a:	4807      	ldr	r0, [pc, #28]	; (8001958 <HAL_GPIO_EXTI_Callback+0x50>)
 800193c:	f004 fa9a 	bl	8005e74 <HAL_UART_Transmit>

	}
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000004 	.word	0x20000004
 800194c:	08007d24 	.word	0x08007d24
 8001950:	20000150 	.word	0x20000150
 8001954:	20000394 	.word	0x20000394
 8001958:	200003fc 	.word	0x200003fc

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001964:	e7fe      	b.n	8001964 <Error_Handler+0x8>
	...

08001968 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8001970:	224c      	movs	r2, #76	; 0x4c
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4803      	ldr	r0, [pc, #12]	; (8001984 <MPU6050_Init+0x1c>)
 8001976:	f005 fc23 	bl	80071c0 <memcpy>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200000e8 	.word	0x200000e8

08001988 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af02      	add	r7, sp, #8
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
 8001994:	4613      	mov	r3, r2
 8001996:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8001998:	23d0      	movs	r3, #208	; 0xd0
 800199a:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	b299      	uxth	r1, r3
 80019a4:	f107 020c 	add.w	r2, r7, #12
 80019a8:	230a      	movs	r3, #10
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	4808      	ldr	r0, [pc, #32]	; (80019d0 <I2C_Read+0x48>)
 80019b0:	f001 f932 	bl	8002c18 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	b299      	uxth	r1, r3
 80019b8:	79bb      	ldrb	r3, [r7, #6]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	2264      	movs	r2, #100	; 0x64
 80019be:	9200      	str	r2, [sp, #0]
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	4803      	ldr	r0, [pc, #12]	; (80019d0 <I2C_Read+0x48>)
 80019c4:	f001 fa1c 	bl	8002e00 <HAL_I2C_Master_Receive>
}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200000e8 	.word	0x200000e8

080019d4 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	4603      	mov	r3, r0
 80019dc:	460a      	mov	r2, r1
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	4613      	mov	r3, r2
 80019e2:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 80019e8:	79bb      	ldrb	r3, [r7, #6]
 80019ea:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 80019ec:	23d0      	movs	r3, #208	; 0xd0
 80019ee:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	b299      	uxth	r1, r3
 80019f4:	f107 020c 	add.w	r2, r7, #12
 80019f8:	2364      	movs	r3, #100	; 0x64
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2302      	movs	r3, #2
 80019fe:	4803      	ldr	r0, [pc, #12]	; (8001a0c <I2C_Write8+0x38>)
 8001a00:	f001 f90a 	bl	8002c18 <HAL_I2C_Master_Transmit>
}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200000e8 	.word	0x200000e8

08001a10 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8001a1c:	2180      	movs	r1, #128	; 0x80
 8001a1e:	206b      	movs	r0, #107	; 0x6b
 8001a20:	f7ff ffd8 	bl	80019d4 <I2C_Write8>
	HAL_Delay(100);
 8001a24:	2064      	movs	r0, #100	; 0x64
 8001a26:	f000 fd31 	bl	800248c <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	791b      	ldrb	r3, [r3, #4]
 8001a38:	019b      	lsls	r3, r3, #6
 8001a3a:	b25b      	sxtb	r3, r3
 8001a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a40:	b25a      	sxtb	r2, r3
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	206b      	movs	r0, #107	; 0x6b
 8001a52:	f7ff ffbf 	bl	80019d4 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8001a56:	2064      	movs	r0, #100	; 0x64
 8001a58:	f000 fd18 	bl	800248c <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	78db      	ldrb	r3, [r3, #3]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	201a      	movs	r0, #26
 8001a70:	f7ff ffb0 	bl	80019d4 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	785b      	ldrb	r3, [r3, #1]
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f003 0318 	and.w	r3, r3, #24
 8001a84:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	201b      	movs	r0, #27
 8001a8c:	f7ff ffa2 	bl	80019d4 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	789b      	ldrb	r3, [r3, #2]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f003 0318 	and.w	r3, r3, #24
 8001aa0:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	201c      	movs	r0, #28
 8001aa8:	f7ff ff94 	bl	80019d4 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8001aac:	2004      	movs	r0, #4
 8001aae:	f000 f857 	bl	8001b60 <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	789b      	ldrb	r3, [r3, #2]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d81a      	bhi.n	8001af0 <MPU6050_Config+0xe0>
 8001aba:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <MPU6050_Config+0xb0>)
 8001abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac0:	08001ad1 	.word	0x08001ad1
 8001ac4:	08001ad9 	.word	0x08001ad9
 8001ac8:	08001ae1 	.word	0x08001ae1
 8001acc:	08001ae9 	.word	0x08001ae9
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MPU6050_Config+0x12c>)
 8001ad2:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <MPU6050_Config+0x130>)
 8001ad4:	601a      	str	r2, [r3, #0]
			break;
 8001ad6:	e00c      	b.n	8001af2 <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <MPU6050_Config+0x12c>)
 8001ada:	4a1a      	ldr	r2, [pc, #104]	; (8001b44 <MPU6050_Config+0x134>)
 8001adc:	601a      	str	r2, [r3, #0]
				break;
 8001ade:	e008      	b.n	8001af2 <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <MPU6050_Config+0x12c>)
 8001ae2:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <MPU6050_Config+0x138>)
 8001ae4:	601a      	str	r2, [r3, #0]
			break;
 8001ae6:	e004      	b.n	8001af2 <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <MPU6050_Config+0x12c>)
 8001aea:	4a18      	ldr	r2, [pc, #96]	; (8001b4c <MPU6050_Config+0x13c>)
 8001aec:	601a      	str	r2, [r3, #0]
			break;
 8001aee:	e000      	b.n	8001af2 <MPU6050_Config+0xe2>
		
		default:
			break;
 8001af0:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	785b      	ldrb	r3, [r3, #1]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d81a      	bhi.n	8001b30 <MPU6050_Config+0x120>
 8001afa:	a201      	add	r2, pc, #4	; (adr r2, 8001b00 <MPU6050_Config+0xf0>)
 8001afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b00:	08001b11 	.word	0x08001b11
 8001b04:	08001b19 	.word	0x08001b19
 8001b08:	08001b21 	.word	0x08001b21
 8001b0c:	08001b29 	.word	0x08001b29
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <MPU6050_Config+0x140>)
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <MPU6050_Config+0x144>)
 8001b14:	601a      	str	r2, [r3, #0]
			break;
 8001b16:	e00c      	b.n	8001b32 <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <MPU6050_Config+0x140>)
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <MPU6050_Config+0x148>)
 8001b1c:	601a      	str	r2, [r3, #0]
				break;
 8001b1e:	e008      	b.n	8001b32 <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <MPU6050_Config+0x140>)
 8001b22:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <MPU6050_Config+0x14c>)
 8001b24:	601a      	str	r2, [r3, #0]
			break;
 8001b26:	e004      	b.n	8001b32 <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MPU6050_Config+0x140>)
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <MPU6050_Config+0x130>)
 8001b2c:	601a      	str	r2, [r3, #0]
			break;
 8001b2e:	e000      	b.n	8001b32 <MPU6050_Config+0x122>
		
		default:
			break;
 8001b30:	bf00      	nop
	}
	
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000134 	.word	0x20000134
 8001b40:	3d7a0000 	.word	0x3d7a0000
 8001b44:	3dfa0000 	.word	0x3dfa0000
 8001b48:	3e7a0000 	.word	0x3e7a0000
 8001b4c:	3efa0000 	.word	0x3efa0000
 8001b50:	20000138 	.word	0x20000138
 8001b54:	3bfa0000 	.word	0x3bfa0000
 8001b58:	3c7a0000 	.word	0x3c7a0000
 8001b5c:	3cfa0000 	.word	0x3cfa0000

08001b60 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	2019      	movs	r0, #25
 8001b70:	f7ff ff30 	bl	80019d4 <I2C_Write8>
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	3301      	adds	r3, #1
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	203a      	movs	r0, #58	; 0x3a
 8001b90:	f7ff fefa 	bl	8001988 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8001b94:	7f7b      	ldrb	r3, [r7, #29]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d04f      	beq.n	8001c3a <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	2206      	movs	r2, #6
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	203b      	movs	r0, #59	; 0x3b
 8001ba4:	f7ff fef0 	bl	8001988 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8001ba8:	7d3b      	ldrb	r3, [r7, #20]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	7d7b      	ldrb	r3, [r7, #21]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8001bbe:	7dbb      	ldrb	r3, [r7, #22]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8001bd4:	7e3b      	ldrb	r3, [r7, #24]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	7e7b      	ldrb	r3, [r7, #25]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	b21a      	sxth	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	2206      	movs	r2, #6
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	2043      	movs	r0, #67	; 0x43
 8001bf4:	f7ff fec8 	bl	8001988 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8001bf8:	7b3b      	ldrb	r3, [r7, #12]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	7b7b      	ldrb	r3, [r7, #13]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MPU6050_Get_Accel_RawData+0xc8>)
 8001c0c:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <MPU6050_Get_Accel_RawData+0xc8>)
 8001c22:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8001c24:	7c3b      	ldrb	r3, [r7, #16]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	7c7b      	ldrb	r3, [r7, #17]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <MPU6050_Get_Accel_RawData+0xc8>)
 8001c38:	809a      	strh	r2, [r3, #4]
	}
}
 8001c3a:	bf00      	nop
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000013c 	.word	0x2000013c

08001c48 <MPU6050_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU6050_Get_Accel_Scale(ScaledData_Def *scaledDef)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU6050_Get_Accel_RawData(&AccelRData);
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff91 	bl	8001b7c <MPU6050_Get_Accel_RawData>
	
	//Accel Scale data 
	scaledDef->x = ((AccelRData.x+0.0f)*accelScalingFactor);
 8001c5a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c5e:	ee07 3a90 	vmov	s15, r3
 8001c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c66:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001cd0 <MPU6050_Get_Accel_Scale+0x88>
 8001c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <MPU6050_Get_Accel_Scale+0x8c>)
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = ((AccelRData.y+0.0f)*accelScalingFactor);
 8001c7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001cd0 <MPU6050_Get_Accel_Scale+0x88>
 8001c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <MPU6050_Get_Accel_Scale+0x8c>)
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = ((AccelRData.z+0.0f)*accelScalingFactor);
 8001ca2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ca6:	ee07 3a90 	vmov	s15, r3
 8001caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cae:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001cd0 <MPU6050_Get_Accel_Scale+0x88>
 8001cb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <MPU6050_Get_Accel_Scale+0x8c>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	00000000 	.word	0x00000000
 8001cd4:	20000134 	.word	0x20000134

08001cd8 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <MPU6050_Get_Gyro_RawData+0x34>)
 8001ce2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MPU6050_Get_Gyro_RawData+0x34>)
 8001cec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <MPU6050_Get_Gyro_RawData+0x34>)
 8001cf6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	809a      	strh	r2, [r3, #4]
	
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	2000013c 	.word	0x2000013c

08001d10 <MPU6050_Get_Gyro_Scale>:

//13- Get Gyro scaled data
void MPU6050_Get_Gyro_Scale(ScaledData_Def *scaledDef)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	RawData_Def myGyroRaw;
	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8001d18:	f107 0308 	add.w	r3, r7, #8
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ffdb 	bl	8001cd8 <MPU6050_Get_Gyro_RawData>
	
	//Gyro Scale data 
	scaledDef->x = (myGyroRaw.x)*gyroScalingFactor; // x-Axis
 8001d22:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <MPU6050_Get_Gyro_Scale+0x70>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = (myGyroRaw.y)*gyroScalingFactor; // y-Axis
 8001d3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <MPU6050_Get_Gyro_Scale+0x70>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = (myGyroRaw.z)*gyroScalingFactor; // z-Axis
 8001d5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MPU6050_Get_Gyro_Scale+0x70>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000138 	.word	0x20000138

08001d84 <pid_init>:
 */

#include "main.h"

void pid_init(pid_bldc_controller_structure *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_init)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6178      	str	r0, [r7, #20]
 8001d8c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d90:	edc7 0a03 	vstr	s1, [r7, #12]
 8001d94:	ed87 1a02 	vstr	s2, [r7, #8]
 8001d98:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
	pid_data->total_error = 0;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]

	pid_data->Kp = kp_init;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	601a      	str	r2, [r3, #0]
	pid_data->Ki = ki_init;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	605a      	str	r2, [r3, #4]
	pid_data->Kd = kd_init;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	609a      	str	r2, [r3, #8]

	pid_data->anti_windup = anti_windup_init;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	615a      	str	r2, [r3, #20]
}
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <pid_reset>:

void pid_reset(pid_bldc_controller_structure *pid_data)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
	pid_data->previous_error = 0;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <pid_calculate>:

int pid_calculate(pid_bldc_controller_structure *pid_data, int setpoint, int process_variable)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b089      	sub	sp, #36	; 0x24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	441a      	add	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	611a      	str	r2, [r3, #16]

	p_term = (float)(pid_data->Kp * error);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	ed93 7a00 	vldr	s14, [r3]
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1e:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e38:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	ee07 3a90 	vmov	s15, r3
 8001e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e56:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup) i_term = pid_data->anti_windup;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e66:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e72:	db08      	blt.n	8001e86 <pid_calculate+0x9c>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	ee07 3a90 	vmov	s15, r3
 8001e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e80:	edc7 7a07 	vstr	s15, [r7, #28]
 8001e84:	e016      	b.n	8001eb4 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup) i_term = -pid_data->anti_windup;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	425b      	negs	r3, r3
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e94:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea0:	d808      	bhi.n	8001eb4 <pid_calculate+0xca>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	425b      	negs	r3, r3
 8001ea8:	ee07 3a90 	vmov	s15, r3
 8001eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb0:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	60da      	str	r2, [r3, #12]

	return (int)(p_term + i_term + d_term);
 8001eba:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ebe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ec2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ece:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed2:	ee17 3a90 	vmov	r3, s15
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <HAL_MspInit+0x44>)
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <HAL_MspInit+0x44>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6193      	str	r3, [r2, #24]
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_MspInit+0x44>)
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_MspInit+0x44>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_MspInit+0x44>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	61d3      	str	r3, [r2, #28]
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_MspInit+0x44>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f1a:	2007      	movs	r0, #7
 8001f1c:	f000 fbaa 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000

08001f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_I2C_MspInit+0x7c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d128      	bne.n	8001fa0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <HAL_I2C_MspInit+0x80>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	4a16      	ldr	r2, [pc, #88]	; (8001fac <HAL_I2C_MspInit+0x80>)
 8001f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f58:	6153      	str	r3, [r2, #20]
 8001f5a:	4b14      	ldr	r3, [pc, #80]	; (8001fac <HAL_I2C_MspInit+0x80>)
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f6c:	2312      	movs	r3, #18
 8001f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	4619      	mov	r1, r3
 8001f82:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <HAL_I2C_MspInit+0x84>)
 8001f84:	f000 fc2e 	bl	80027e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_I2C_MspInit+0x80>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <HAL_I2C_MspInit+0x80>)
 8001f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f92:	61d3      	str	r3, [r2, #28]
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_I2C_MspInit+0x80>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fa0:	bf00      	nop
 8001fa2:	3728      	adds	r7, #40	; 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	48000400 	.word	0x48000400

08001fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc4:	d114      	bne.n	8001ff0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fc6:	4b27      	ldr	r3, [pc, #156]	; (8002064 <HAL_TIM_Base_MspInit+0xb0>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4a26      	ldr	r2, [pc, #152]	; (8002064 <HAL_TIM_Base_MspInit+0xb0>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	61d3      	str	r3, [r2, #28]
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_TIM_Base_MspInit+0xb0>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	201c      	movs	r0, #28
 8001fe4:	f000 fb51 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fe8:	201c      	movs	r0, #28
 8001fea:	f000 fb6a 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001fee:	e034      	b.n	800205a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM15)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <HAL_TIM_Base_MspInit+0xb4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d10c      	bne.n	8002014 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <HAL_TIM_Base_MspInit+0xb0>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	4a19      	ldr	r2, [pc, #100]	; (8002064 <HAL_TIM_Base_MspInit+0xb0>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	6193      	str	r3, [r2, #24]
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <HAL_TIM_Base_MspInit+0xb0>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
}
 8002012:	e022      	b.n	800205a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM16)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_TIM_Base_MspInit+0xb8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10c      	bne.n	8002038 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_TIM_Base_MspInit+0xb0>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	4a10      	ldr	r2, [pc, #64]	; (8002064 <HAL_TIM_Base_MspInit+0xb0>)
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	6193      	str	r3, [r2, #24]
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_TIM_Base_MspInit+0xb0>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
}
 8002036:	e010      	b.n	800205a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM17)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <HAL_TIM_Base_MspInit+0xbc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d10b      	bne.n	800205a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_TIM_Base_MspInit+0xb0>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	4a07      	ldr	r2, [pc, #28]	; (8002064 <HAL_TIM_Base_MspInit+0xb0>)
 8002048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800204c:	6193      	str	r3, [r2, #24]
 800204e:	4b05      	ldr	r3, [pc, #20]	; (8002064 <HAL_TIM_Base_MspInit+0xb0>)
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	40014000 	.word	0x40014000
 800206c:	40014400 	.word	0x40014400
 8002070:	40014800 	.word	0x40014800

08002074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 031c 	add.w	r3, r7, #28
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002094:	d11d      	bne.n	80020d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	4b44      	ldr	r3, [pc, #272]	; (80021a8 <HAL_TIM_MspPostInit+0x134>)
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	4a43      	ldr	r2, [pc, #268]	; (80021a8 <HAL_TIM_MspPostInit+0x134>)
 800209c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a0:	6153      	str	r3, [r2, #20]
 80020a2:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <HAL_TIM_MspPostInit+0x134>)
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020ae:	2303      	movs	r3, #3
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020be:	2301      	movs	r3, #1
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020cc:	f000 fb8a 	bl	80027e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80020d0:	e065      	b.n	800219e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM15)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a35      	ldr	r2, [pc, #212]	; (80021ac <HAL_TIM_MspPostInit+0x138>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d11d      	bne.n	8002118 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020dc:	4b32      	ldr	r3, [pc, #200]	; (80021a8 <HAL_TIM_MspPostInit+0x134>)
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	4a31      	ldr	r2, [pc, #196]	; (80021a8 <HAL_TIM_MspPostInit+0x134>)
 80020e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e6:	6153      	str	r3, [r2, #20]
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <HAL_TIM_MspPostInit+0x134>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80020f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80020f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002106:	2301      	movs	r3, #1
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	4619      	mov	r1, r3
 8002110:	4827      	ldr	r0, [pc, #156]	; (80021b0 <HAL_TIM_MspPostInit+0x13c>)
 8002112:	f000 fb67 	bl	80027e4 <HAL_GPIO_Init>
}
 8002116:	e042      	b.n	800219e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM16)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a25      	ldr	r2, [pc, #148]	; (80021b4 <HAL_TIM_MspPostInit+0x140>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d11c      	bne.n	800215c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <HAL_TIM_MspPostInit+0x134>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	4a20      	ldr	r2, [pc, #128]	; (80021a8 <HAL_TIM_MspPostInit+0x134>)
 8002128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800212c:	6153      	str	r3, [r2, #20]
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <HAL_TIM_MspPostInit+0x134>)
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800213a:	2310      	movs	r3, #16
 800213c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800214a:	2301      	movs	r3, #1
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214e:	f107 031c 	add.w	r3, r7, #28
 8002152:	4619      	mov	r1, r3
 8002154:	4816      	ldr	r0, [pc, #88]	; (80021b0 <HAL_TIM_MspPostInit+0x13c>)
 8002156:	f000 fb45 	bl	80027e4 <HAL_GPIO_Init>
}
 800215a:	e020      	b.n	800219e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM17)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <HAL_TIM_MspPostInit+0x144>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d11b      	bne.n	800219e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <HAL_TIM_MspPostInit+0x134>)
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <HAL_TIM_MspPostInit+0x134>)
 800216c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002170:	6153      	str	r3, [r2, #20]
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_TIM_MspPostInit+0x134>)
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800217e:	2320      	movs	r3, #32
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800218e:	230a      	movs	r3, #10
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	4619      	mov	r1, r3
 8002198:	4805      	ldr	r0, [pc, #20]	; (80021b0 <HAL_TIM_MspPostInit+0x13c>)
 800219a:	f000 fb23 	bl	80027e4 <HAL_GPIO_Init>
}
 800219e:	bf00      	nop
 80021a0:	3730      	adds	r7, #48	; 0x30
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40014000 	.word	0x40014000
 80021b0:	48000400 	.word	0x48000400
 80021b4:	40014400 	.word	0x40014400
 80021b8:	40014800 	.word	0x40014800

080021bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <HAL_UART_MspInit+0x8c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d130      	bne.n	8002240 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_UART_MspInit+0x90>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4a1a      	ldr	r2, [pc, #104]	; (800224c <HAL_UART_MspInit+0x90>)
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	61d3      	str	r3, [r2, #28]
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_UART_MspInit+0x90>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_UART_MspInit+0x90>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	4a14      	ldr	r2, [pc, #80]	; (800224c <HAL_UART_MspInit+0x90>)
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002200:	6153      	str	r3, [r2, #20]
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_UART_MspInit+0x90>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800220e:	230c      	movs	r3, #12
 8002210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800221e:	2307      	movs	r3, #7
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	4619      	mov	r1, r3
 8002228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800222c:	f000 fada 	bl	80027e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002230:	2200      	movs	r2, #0
 8002232:	2100      	movs	r1, #0
 8002234:	2026      	movs	r0, #38	; 0x26
 8002236:	f000 fa28 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800223a:	2026      	movs	r0, #38	; 0x26
 800223c:	f000 fa41 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002240:	bf00      	nop
 8002242:	3728      	adds	r7, #40	; 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40004400 	.word	0x40004400
 800224c:	40021000 	.word	0x40021000

08002250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <NMI_Handler+0x4>

08002256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225a:	e7fe      	b.n	800225a <HardFault_Handler+0x4>

0800225c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002260:	e7fe      	b.n	8002260 <MemManage_Handler+0x4>

08002262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002266:	e7fe      	b.n	8002266 <BusFault_Handler+0x4>

08002268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800226c:	e7fe      	b.n	800226c <UsageFault_Handler+0x4>

0800226e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800229c:	f000 f8d6 	bl	800244c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <TIM2_IRQHandler+0x10>)
 80022aa:	f002 fd95 	bl	8004dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200003b0 	.word	0x200003b0

080022b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <USART2_IRQHandler+0x10>)
 80022be:	f003 febb 	bl	8006038 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200003fc 	.word	0x200003fc

080022cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80022d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022d4:	f000 fbf8 	bl	8002ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}

080022dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <_sbrk+0x5c>)
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <_sbrk+0x60>)
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <_sbrk+0x64>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <_sbrk+0x64>)
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <_sbrk+0x68>)
 80022fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	429a      	cmp	r2, r3
 800230a:	d207      	bcs.n	800231c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800230c:	f004 ff2e 	bl	800716c <__errno>
 8002310:	4603      	mov	r3, r0
 8002312:	220c      	movs	r2, #12
 8002314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
 800231a:	e009      	b.n	8002330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <_sbrk+0x64>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	4a05      	ldr	r2, [pc, #20]	; (8002340 <_sbrk+0x64>)
 800232c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20004000 	.word	0x20004000
 800233c:	00000400 	.word	0x00000400
 8002340:	20000144 	.word	0x20000144
 8002344:	200004f8 	.word	0x200004f8

08002348 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <SystemInit+0x20>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <SystemInit+0x20>)
 8002354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800236c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002370:	480d      	ldr	r0, [pc, #52]	; (80023a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002372:	490e      	ldr	r1, [pc, #56]	; (80023ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002374:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <LoopForever+0xe>)
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002378:	e002      	b.n	8002380 <LoopCopyDataInit>

0800237a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800237c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237e:	3304      	adds	r3, #4

08002380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002384:	d3f9      	bcc.n	800237a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002386:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002388:	4c0b      	ldr	r4, [pc, #44]	; (80023b8 <LoopForever+0x16>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800238c:	e001      	b.n	8002392 <LoopFillZerobss>

0800238e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002390:	3204      	adds	r2, #4

08002392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002394:	d3fb      	bcc.n	800238e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002396:	f7ff ffd7 	bl	8002348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800239a:	f004 feed 	bl	8007178 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800239e:	f7fe fc93 	bl	8000cc8 <main>

080023a2 <LoopForever>:

LoopForever:
    b LoopForever
 80023a2:	e7fe      	b.n	80023a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023a4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ac:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80023b0:	08007f7c 	.word	0x08007f7c
  ldr r2, =_sbss
 80023b4:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80023b8:	200004f4 	.word	0x200004f4

080023bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC1_IRQHandler>
	...

080023c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_Init+0x28>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_Init+0x28>)
 80023ca:	f043 0310 	orr.w	r3, r3, #16
 80023ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f000 f94f 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f000 f808 	bl	80023ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023dc:	f7ff fd82 	bl	8001ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40022000 	.word	0x40022000

080023ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_InitTick+0x54>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_InitTick+0x58>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002402:	fbb3 f3f1 	udiv	r3, r3, r1
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f967 	bl	80026de <HAL_SYSTICK_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00e      	b.n	8002438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0f      	cmp	r3, #15
 800241e:	d80a      	bhi.n	8002436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002420:	2200      	movs	r2, #0
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f000 f92f 	bl	800268a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800242c:	4a06      	ldr	r2, [pc, #24]	; (8002448 <HAL_InitTick+0x5c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e000      	b.n	8002438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000054 	.word	0x20000054
 8002444:	2000005c 	.word	0x2000005c
 8002448:	20000058 	.word	0x20000058

0800244c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_IncTick+0x20>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_IncTick+0x24>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4413      	add	r3, r2
 800245c:	4a04      	ldr	r2, [pc, #16]	; (8002470 <HAL_IncTick+0x24>)
 800245e:	6013      	str	r3, [r2, #0]
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	2000005c 	.word	0x2000005c
 8002470:	200004e0 	.word	0x200004e0

08002474 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return uwTick;  
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <HAL_GetTick+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	200004e0 	.word	0x200004e0

0800248c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002494:	f7ff ffee 	bl	8002474 <HAL_GetTick>
 8002498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a4:	d005      	beq.n	80024b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_Delay+0x44>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80024b2:	bf00      	nop
 80024b4:	f7ff ffde 	bl	8002474 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d8f7      	bhi.n	80024b4 <HAL_Delay+0x28>
  {
  }
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2000005c 	.word	0x2000005c

080024d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f0:	4013      	ands	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002506:	4a04      	ldr	r2, [pc, #16]	; (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	60d3      	str	r3, [r2, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <__NVIC_GetPriorityGrouping+0x18>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	f003 0307 	and.w	r3, r3, #7
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	2b00      	cmp	r3, #0
 8002548:	db0b      	blt.n	8002562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	f003 021f 	and.w	r2, r3, #31
 8002550:	4907      	ldr	r1, [pc, #28]	; (8002570 <__NVIC_EnableIRQ+0x38>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	2001      	movs	r0, #1
 800255a:	fa00 f202 	lsl.w	r2, r0, r2
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000e100 	.word	0xe000e100

08002574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	2b00      	cmp	r3, #0
 8002586:	db0a      	blt.n	800259e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	490c      	ldr	r1, [pc, #48]	; (80025c0 <__NVIC_SetPriority+0x4c>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	440b      	add	r3, r1
 8002598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800259c:	e00a      	b.n	80025b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <__NVIC_SetPriority+0x50>)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3b04      	subs	r3, #4
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	440b      	add	r3, r1
 80025b2:	761a      	strb	r2, [r3, #24]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f1c3 0307 	rsb	r3, r3, #7
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	bf28      	it	cs
 80025e6:	2304      	movcs	r3, #4
 80025e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3304      	adds	r3, #4
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d902      	bls.n	80025f8 <NVIC_EncodePriority+0x30>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3b03      	subs	r3, #3
 80025f6:	e000      	b.n	80025fa <NVIC_EncodePriority+0x32>
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	401a      	ands	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43d9      	mvns	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	4313      	orrs	r3, r2
         );
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	; 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002640:	d301      	bcc.n	8002646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002642:	2301      	movs	r3, #1
 8002644:	e00f      	b.n	8002666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <SysTick_Config+0x40>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264e:	210f      	movs	r1, #15
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f7ff ff8e 	bl	8002574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <SysTick_Config+0x40>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <SysTick_Config+0x40>)
 8002660:	2207      	movs	r2, #7
 8002662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	e000e010 	.word	0xe000e010

08002674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ff29 	bl	80024d4 <__NVIC_SetPriorityGrouping>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800269c:	f7ff ff3e 	bl	800251c <__NVIC_GetPriorityGrouping>
 80026a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff ff8e 	bl	80025c8 <NVIC_EncodePriority>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff5d 	bl	8002574 <__NVIC_SetPriority>
}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff31 	bl	8002538 <__NVIC_EnableIRQ>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffa2 	bl	8002630 <SysTick_Config>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002704:	2b02      	cmp	r3, #2
 8002706:	d008      	beq.n	800271a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2204      	movs	r2, #4
 800270c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e020      	b.n	800275c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 020e 	bic.w	r2, r2, #14
 8002728:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0201 	bic.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	2101      	movs	r1, #1
 8002744:	fa01 f202 	lsl.w	r2, r1, r2
 8002748:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800277a:	2b02      	cmp	r3, #2
 800277c:	d005      	beq.n	800278a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2204      	movs	r2, #4
 8002782:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e027      	b.n	80027da <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 020e 	bic.w	r2, r2, #14
 8002798:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	2101      	movs	r1, #1
 80027b4:	fa01 f202 	lsl.w	r2, r1, r2
 80027b8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
    } 
  }
  return status;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f2:	e14e      	b.n	8002a92 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2101      	movs	r1, #1
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002800:	4013      	ands	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8140 	beq.w	8002a8c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d005      	beq.n	8002824 <HAL_GPIO_Init+0x40>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d130      	bne.n	8002886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800285a:	2201      	movs	r2, #1
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	091b      	lsrs	r3, r3, #4
 8002870:	f003 0201 	and.w	r2, r3, #1
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b03      	cmp	r3, #3
 8002890:	d017      	beq.n	80028c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d123      	bne.n	8002916 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	08da      	lsrs	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3208      	adds	r2, #8
 80028d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	220f      	movs	r2, #15
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	08da      	lsrs	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3208      	adds	r2, #8
 8002910:	6939      	ldr	r1, [r7, #16]
 8002912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2203      	movs	r2, #3
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0203 	and.w	r2, r3, #3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 809a 	beq.w	8002a8c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002958:	4b55      	ldr	r3, [pc, #340]	; (8002ab0 <HAL_GPIO_Init+0x2cc>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4a54      	ldr	r2, [pc, #336]	; (8002ab0 <HAL_GPIO_Init+0x2cc>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6193      	str	r3, [r2, #24]
 8002964:	4b52      	ldr	r3, [pc, #328]	; (8002ab0 <HAL_GPIO_Init+0x2cc>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002970:	4a50      	ldr	r2, [pc, #320]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800299a:	d013      	beq.n	80029c4 <HAL_GPIO_Init+0x1e0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a46      	ldr	r2, [pc, #280]	; (8002ab8 <HAL_GPIO_Init+0x2d4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00d      	beq.n	80029c0 <HAL_GPIO_Init+0x1dc>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a45      	ldr	r2, [pc, #276]	; (8002abc <HAL_GPIO_Init+0x2d8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d007      	beq.n	80029bc <HAL_GPIO_Init+0x1d8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a44      	ldr	r2, [pc, #272]	; (8002ac0 <HAL_GPIO_Init+0x2dc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_GPIO_Init+0x1d4>
 80029b4:	2303      	movs	r3, #3
 80029b6:	e006      	b.n	80029c6 <HAL_GPIO_Init+0x1e2>
 80029b8:	2305      	movs	r3, #5
 80029ba:	e004      	b.n	80029c6 <HAL_GPIO_Init+0x1e2>
 80029bc:	2302      	movs	r3, #2
 80029be:	e002      	b.n	80029c6 <HAL_GPIO_Init+0x1e2>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_GPIO_Init+0x1e2>
 80029c4:	2300      	movs	r3, #0
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	f002 0203 	and.w	r2, r2, #3
 80029cc:	0092      	lsls	r2, r2, #2
 80029ce:	4093      	lsls	r3, r2
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029d6:	4937      	ldr	r1, [pc, #220]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	3302      	adds	r3, #2
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e4:	4b37      	ldr	r3, [pc, #220]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4013      	ands	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a08:	4a2e      	ldr	r2, [pc, #184]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a32:	4a24      	ldr	r2, [pc, #144]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a38:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a5c:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a62:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a86:	4a0f      	ldr	r2, [pc, #60]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f47f aea9 	bne.w	80027f4 <HAL_GPIO_Init+0x10>
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	48000400 	.word	0x48000400
 8002abc:	48000800 	.word	0x48000800
 8002ac0:	48000c00 	.word	0x48000c00
 8002ac4:	40010400 	.word	0x40010400

08002ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ade:	4a05      	ldr	r2, [pc, #20]	; (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe ff0e 	bl	8001908 <HAL_GPIO_EXTI_Callback>
  }
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40010400 	.word	0x40010400

08002af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e081      	b.n	8002c0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff fa04 	bl	8001f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2224      	movs	r2, #36	; 0x24
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	e006      	b.n	8002b80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d104      	bne.n	8002b92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69d9      	ldr	r1, [r3, #28]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	461a      	mov	r2, r3
 8002c24:	460b      	mov	r3, r1
 8002c26:	817b      	strh	r3, [r7, #10]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	f040 80da 	bne.w	8002dee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_I2C_Master_Transmit+0x30>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e0d3      	b.n	8002df0 <HAL_I2C_Master_Transmit+0x1d8>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c50:	f7ff fc10 	bl	8002474 <HAL_GetTick>
 8002c54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	2319      	movs	r3, #25
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f9e6 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0be      	b.n	8002df0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2221      	movs	r2, #33	; 0x21
 8002c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	893a      	ldrh	r2, [r7, #8]
 8002c92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2bff      	cmp	r3, #255	; 0xff
 8002ca2:	d90e      	bls.n	8002cc2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	22ff      	movs	r2, #255	; 0xff
 8002ca8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	8979      	ldrh	r1, [r7, #10]
 8002cb2:	4b51      	ldr	r3, [pc, #324]	; (8002df8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fb58 	bl	8003370 <I2C_TransferConfig>
 8002cc0:	e06c      	b.n	8002d9c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	8979      	ldrh	r1, [r7, #10]
 8002cd4:	4b48      	ldr	r3, [pc, #288]	; (8002df8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fb47 	bl	8003370 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ce2:	e05b      	b.n	8002d9c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	6a39      	ldr	r1, [r7, #32]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f9e3 	bl	80030b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e07b      	b.n	8002df0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d034      	beq.n	8002d9c <HAL_I2C_Master_Transmit+0x184>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d130      	bne.n	8002d9c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	2200      	movs	r2, #0
 8002d42:	2180      	movs	r1, #128	; 0x80
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f975 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e04d      	b.n	8002df0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2bff      	cmp	r3, #255	; 0xff
 8002d5c:	d90e      	bls.n	8002d7c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	22ff      	movs	r2, #255	; 0xff
 8002d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	8979      	ldrh	r1, [r7, #10]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fafb 	bl	8003370 <I2C_TransferConfig>
 8002d7a:	e00f      	b.n	8002d9c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	8979      	ldrh	r1, [r7, #10]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 faea 	bl	8003370 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d19e      	bne.n	8002ce4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	6a39      	ldr	r1, [r7, #32]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f9c2 	bl	8003134 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e01a      	b.n	8002df0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_I2C_Master_Transmit+0x1e4>)
 8002dce:	400b      	ands	r3, r1
 8002dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e000      	b.n	8002df0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
  }
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	80002000 	.word	0x80002000
 8002dfc:	fe00e800 	.word	0xfe00e800

08002e00 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	817b      	strh	r3, [r7, #10]
 8002e10:	4613      	mov	r3, r2
 8002e12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	f040 80db 	bne.w	8002fd8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_I2C_Master_Receive+0x30>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e0d4      	b.n	8002fda <HAL_I2C_Master_Receive+0x1da>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e38:	f7ff fb1c 	bl	8002474 <HAL_GetTick>
 8002e3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2319      	movs	r3, #25
 8002e44:	2201      	movs	r2, #1
 8002e46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f8f2 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0bf      	b.n	8002fda <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2222      	movs	r2, #34	; 0x22
 8002e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2210      	movs	r2, #16
 8002e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	893a      	ldrh	r2, [r7, #8]
 8002e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2bff      	cmp	r3, #255	; 0xff
 8002e8a:	d90e      	bls.n	8002eaa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	22ff      	movs	r2, #255	; 0xff
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	8979      	ldrh	r1, [r7, #10]
 8002e9a:	4b52      	ldr	r3, [pc, #328]	; (8002fe4 <HAL_I2C_Master_Receive+0x1e4>)
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fa64 	bl	8003370 <I2C_TransferConfig>
 8002ea8:	e06d      	b.n	8002f86 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	8979      	ldrh	r1, [r7, #10]
 8002ebc:	4b49      	ldr	r3, [pc, #292]	; (8002fe4 <HAL_I2C_Master_Receive+0x1e4>)
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 fa53 	bl	8003370 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002eca:	e05c      	b.n	8002f86 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	6a39      	ldr	r1, [r7, #32]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f96b 	bl	80031ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e07c      	b.n	8002fda <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d034      	beq.n	8002f86 <HAL_I2C_Master_Receive+0x186>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d130      	bne.n	8002f86 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2180      	movs	r1, #128	; 0x80
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f880 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e04d      	b.n	8002fda <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2bff      	cmp	r3, #255	; 0xff
 8002f46:	d90e      	bls.n	8002f66 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	22ff      	movs	r2, #255	; 0xff
 8002f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	8979      	ldrh	r1, [r7, #10]
 8002f56:	2300      	movs	r3, #0
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fa06 	bl	8003370 <I2C_TransferConfig>
 8002f64:	e00f      	b.n	8002f86 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	8979      	ldrh	r1, [r7, #10]
 8002f78:	2300      	movs	r3, #0
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f9f5 	bl	8003370 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d19d      	bne.n	8002ecc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	6a39      	ldr	r1, [r7, #32]
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f8cd 	bl	8003134 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e01a      	b.n	8002fda <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6859      	ldr	r1, [r3, #4]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_I2C_Master_Receive+0x1e8>)
 8002fb8:	400b      	ands	r3, r1
 8002fba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	80002400 	.word	0x80002400
 8002fe8:	fe00e800 	.word	0xfe00e800

08002fec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d103      	bne.n	800300a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2200      	movs	r2, #0
 8003008:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b01      	cmp	r3, #1
 8003016:	d007      	beq.n	8003028 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	619a      	str	r2, [r3, #24]
  }
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003044:	e022      	b.n	800308c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d01e      	beq.n	800308c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304e:	f7ff fa11 	bl	8002474 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d302      	bcc.n	8003064 <I2C_WaitOnFlagUntilTimeout+0x30>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d113      	bne.n	800308c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e00f      	b.n	80030ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4013      	ands	r3, r2
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	429a      	cmp	r2, r3
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d0cd      	beq.n	8003046 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030c0:	e02c      	b.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f8dc 	bl	8003284 <I2C_IsAcknowledgeFailed>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e02a      	b.n	800312c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d01e      	beq.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7ff f9c9 	bl	8002474 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d113      	bne.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e007      	b.n	800312c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d1cb      	bne.n	80030c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003140:	e028      	b.n	8003194 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f89c 	bl	8003284 <I2C_IsAcknowledgeFailed>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e026      	b.n	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7ff f98d 	bl	8002474 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d113      	bne.n	8003194 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003170:	f043 0220 	orr.w	r2, r3, #32
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e007      	b.n	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d1cf      	bne.n	8003142 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031b8:	e055      	b.n	8003266 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f860 	bl	8003284 <I2C_IsAcknowledgeFailed>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e053      	b.n	8003276 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d129      	bne.n	8003230 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d105      	bne.n	80031f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e03f      	b.n	8003276 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2220      	movs	r2, #32
 80031fc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800320a:	400b      	ands	r3, r1
 800320c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e022      	b.n	8003276 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003230:	f7ff f920 	bl	8002474 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	429a      	cmp	r2, r3
 800323e:	d302      	bcc.n	8003246 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10f      	bne.n	8003266 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f043 0220 	orr.w	r2, r3, #32
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e007      	b.n	8003276 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b04      	cmp	r3, #4
 8003272:	d1a2      	bne.n	80031ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	fe00e800 	.word	0xfe00e800

08003284 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	2b10      	cmp	r3, #16
 800329c:	d161      	bne.n	8003362 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ac:	d02b      	beq.n	8003306 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032bc:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032be:	e022      	b.n	8003306 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d01e      	beq.n	8003306 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c8:	f7ff f8d4 	bl	8002474 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d302      	bcc.n	80032de <I2C_IsAcknowledgeFailed+0x5a>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d113      	bne.n	8003306 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	f043 0220 	orr.w	r2, r3, #32
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e02e      	b.n	8003364 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b20      	cmp	r3, #32
 8003312:	d1d5      	bne.n	80032c0 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2210      	movs	r2, #16
 800331a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2220      	movs	r2, #32
 8003322:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff fe61 	bl	8002fec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b0d      	ldr	r3, [pc, #52]	; (800336c <I2C_IsAcknowledgeFailed+0xe8>)
 8003336:	400b      	ands	r3, r1
 8003338:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	f043 0204 	orr.w	r2, r3, #4
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	fe00e800 	.word	0xfe00e800

08003370 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	460b      	mov	r3, r1
 800337c:	817b      	strh	r3, [r7, #10]
 800337e:	4613      	mov	r3, r2
 8003380:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	0d5b      	lsrs	r3, r3, #21
 800338c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <I2C_TransferConfig+0x58>)
 8003392:	430b      	orrs	r3, r1
 8003394:	43db      	mvns	r3, r3
 8003396:	ea02 0103 	and.w	r1, r2, r3
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033a0:	7a7b      	ldrb	r3, [r7, #9]
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	03ff63ff 	.word	0x03ff63ff

080033cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b20      	cmp	r3, #32
 80033e0:	d138      	bne.n	8003454 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e032      	b.n	8003456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2224      	movs	r2, #36	; 0x24
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800341e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003454:	2302      	movs	r3, #2
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003462:	b480      	push	{r7}
 8003464:	b085      	sub	sp, #20
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b20      	cmp	r3, #32
 8003476:	d139      	bne.n	80034ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003482:	2302      	movs	r3, #2
 8003484:	e033      	b.n	80034ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2224      	movs	r2, #36	; 0x24
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003502:	af00      	add	r7, sp, #0
 8003504:	1d3b      	adds	r3, r7, #4
 8003506:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003508:	1d3b      	adds	r3, r7, #4
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f000 bef4 	b.w	80042fe <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 816a 	beq.w	80037fa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003526:	4bb3      	ldr	r3, [pc, #716]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b04      	cmp	r3, #4
 8003530:	d00c      	beq.n	800354c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003532:	4bb0      	ldr	r3, [pc, #704]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	2b08      	cmp	r3, #8
 800353c:	d159      	bne.n	80035f2 <HAL_RCC_OscConfig+0xf6>
 800353e:	4bad      	ldr	r3, [pc, #692]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354a:	d152      	bne.n	80035f2 <HAL_RCC_OscConfig+0xf6>
 800354c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003550:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003560:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d102      	bne.n	800357e <HAL_RCC_OscConfig+0x82>
 8003578:	4b9e      	ldr	r3, [pc, #632]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	e015      	b.n	80035aa <HAL_RCC_OscConfig+0xae>
 800357e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003582:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800358a:	fa93 f3a3 	rbit	r3, r3
 800358e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003592:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003596:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800359a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80035a6:	4b93      	ldr	r3, [pc, #588]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035ae:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80035b2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80035b6:	fa92 f2a2 	rbit	r2, r2
 80035ba:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80035be:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80035c2:	fab2 f282 	clz	r2, r2
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f042 0220 	orr.w	r2, r2, #32
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	f002 021f 	and.w	r2, r2, #31
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f202 	lsl.w	r2, r1, r2
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 810c 	beq.w	80037f8 <HAL_RCC_OscConfig+0x2fc>
 80035e0:	1d3b      	adds	r3, r7, #4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 8106 	bne.w	80037f8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f000 be86 	b.w	80042fe <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f2:	1d3b      	adds	r3, r7, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fc:	d106      	bne.n	800360c <HAL_RCC_OscConfig+0x110>
 80035fe:	4b7d      	ldr	r3, [pc, #500]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a7c      	ldr	r2, [pc, #496]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 8003604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	e030      	b.n	800366e <HAL_RCC_OscConfig+0x172>
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x134>
 8003616:	4b77      	ldr	r3, [pc, #476]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a76      	ldr	r2, [pc, #472]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 800361c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	4b74      	ldr	r3, [pc, #464]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a73      	ldr	r2, [pc, #460]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 8003628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e01e      	b.n	800366e <HAL_RCC_OscConfig+0x172>
 8003630:	1d3b      	adds	r3, r7, #4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800363a:	d10c      	bne.n	8003656 <HAL_RCC_OscConfig+0x15a>
 800363c:	4b6d      	ldr	r3, [pc, #436]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a6c      	ldr	r2, [pc, #432]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 8003642:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a69      	ldr	r2, [pc, #420]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 800364e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	e00b      	b.n	800366e <HAL_RCC_OscConfig+0x172>
 8003656:	4b67      	ldr	r3, [pc, #412]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a66      	ldr	r2, [pc, #408]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 800365c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	4b64      	ldr	r3, [pc, #400]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a63      	ldr	r2, [pc, #396]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 8003668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800366c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800366e:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	f023 020f 	bic.w	r2, r3, #15
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	495d      	ldr	r1, [pc, #372]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003682:	1d3b      	adds	r3, r7, #4
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d059      	beq.n	8003740 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7fe fef2 	bl	8002474 <HAL_GetTick>
 8003690:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003694:	e00a      	b.n	80036ac <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003696:	f7fe feed 	bl	8002474 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d902      	bls.n	80036ac <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	f000 be29 	b.w	80042fe <HAL_RCC_OscConfig+0xe02>
 80036ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036b0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80036c0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c4:	fab3 f383 	clz	r3, r3
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d102      	bne.n	80036de <HAL_RCC_OscConfig+0x1e2>
 80036d8:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	e015      	b.n	800370a <HAL_RCC_OscConfig+0x20e>
 80036de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036e2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80036f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036f6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80036fa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003706:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800370e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003712:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003716:	fa92 f2a2 	rbit	r2, r2
 800371a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800371e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003722:	fab2 f282 	clz	r2, r2
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	f042 0220 	orr.w	r2, r2, #32
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	f002 021f 	and.w	r2, r2, #31
 8003732:	2101      	movs	r1, #1
 8003734:	fa01 f202 	lsl.w	r2, r1, r2
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0ab      	beq.n	8003696 <HAL_RCC_OscConfig+0x19a>
 800373e:	e05c      	b.n	80037fa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7fe fe98 	bl	8002474 <HAL_GetTick>
 8003744:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800374a:	f7fe fe93 	bl	8002474 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d902      	bls.n	8003760 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	f000 bdcf 	b.w	80042fe <HAL_RCC_OscConfig+0xe02>
 8003760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003764:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800376c:	fa93 f3a3 	rbit	r3, r3
 8003770:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003774:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003778:	fab3 f383 	clz	r3, r3
 800377c:	b2db      	uxtb	r3, r3
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b01      	cmp	r3, #1
 800378a:	d102      	bne.n	8003792 <HAL_RCC_OscConfig+0x296>
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	e015      	b.n	80037be <HAL_RCC_OscConfig+0x2c2>
 8003792:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003796:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80037a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037aa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80037ae:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80037ba:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <HAL_RCC_OscConfig+0x2f8>)
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037c2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80037c6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80037ca:	fa92 f2a2 	rbit	r2, r2
 80037ce:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80037d2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80037d6:	fab2 f282 	clz	r2, r2
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	f042 0220 	orr.w	r2, r2, #32
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	f002 021f 	and.w	r2, r2, #31
 80037e6:	2101      	movs	r1, #1
 80037e8:	fa01 f202 	lsl.w	r2, r1, r2
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ab      	bne.n	800374a <HAL_RCC_OscConfig+0x24e>
 80037f2:	e002      	b.n	80037fa <HAL_RCC_OscConfig+0x2fe>
 80037f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fa:	1d3b      	adds	r3, r7, #4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 816f 	beq.w	8003ae8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800380a:	4bd0      	ldr	r3, [pc, #832]	; (8003b4c <HAL_RCC_OscConfig+0x650>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003816:	4bcd      	ldr	r3, [pc, #820]	; (8003b4c <HAL_RCC_OscConfig+0x650>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b08      	cmp	r3, #8
 8003820:	d16c      	bne.n	80038fc <HAL_RCC_OscConfig+0x400>
 8003822:	4bca      	ldr	r3, [pc, #808]	; (8003b4c <HAL_RCC_OscConfig+0x650>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d166      	bne.n	80038fc <HAL_RCC_OscConfig+0x400>
 800382e:	2302      	movs	r3, #2
 8003830:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003834:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003840:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d102      	bne.n	800385e <HAL_RCC_OscConfig+0x362>
 8003858:	4bbc      	ldr	r3, [pc, #752]	; (8003b4c <HAL_RCC_OscConfig+0x650>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	e013      	b.n	8003886 <HAL_RCC_OscConfig+0x38a>
 800385e:	2302      	movs	r3, #2
 8003860:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003870:	2302      	movs	r3, #2
 8003872:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003876:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003882:	4bb2      	ldr	r3, [pc, #712]	; (8003b4c <HAL_RCC_OscConfig+0x650>)
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	2202      	movs	r2, #2
 8003888:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800388c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003890:	fa92 f2a2 	rbit	r2, r2
 8003894:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003898:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800389c:	fab2 f282 	clz	r2, r2
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f042 0220 	orr.w	r2, r2, #32
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	f002 021f 	and.w	r2, r2, #31
 80038ac:	2101      	movs	r1, #1
 80038ae:	fa01 f202 	lsl.w	r2, r1, r2
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <HAL_RCC_OscConfig+0x3cc>
 80038b8:	1d3b      	adds	r3, r7, #4
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d002      	beq.n	80038c8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f000 bd1b 	b.w	80042fe <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4ba0      	ldr	r3, [pc, #640]	; (8003b4c <HAL_RCC_OscConfig+0x650>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d0:	1d3b      	adds	r3, r7, #4
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	21f8      	movs	r1, #248	; 0xf8
 80038d8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80038e0:	fa91 f1a1 	rbit	r1, r1
 80038e4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80038e8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80038ec:	fab1 f181 	clz	r1, r1
 80038f0:	b2c9      	uxtb	r1, r1
 80038f2:	408b      	lsls	r3, r1
 80038f4:	4995      	ldr	r1, [pc, #596]	; (8003b4c <HAL_RCC_OscConfig+0x650>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	e0f5      	b.n	8003ae8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038fc:	1d3b      	adds	r3, r7, #4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8085 	beq.w	8003a12 <HAL_RCC_OscConfig+0x516>
 8003908:	2301      	movs	r3, #1
 800390a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800391a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003928:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	461a      	mov	r2, r3
 8003930:	2301      	movs	r3, #1
 8003932:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fe fd9e 	bl	8002474 <HAL_GetTick>
 8003938:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393c:	e00a      	b.n	8003954 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800393e:	f7fe fd99 	bl	8002474 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d902      	bls.n	8003954 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	f000 bcd5 	b.w	80042fe <HAL_RCC_OscConfig+0xe02>
 8003954:	2302      	movs	r3, #2
 8003956:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800395e:	fa93 f3a3 	rbit	r3, r3
 8003962:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003966:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d102      	bne.n	8003984 <HAL_RCC_OscConfig+0x488>
 800397e:	4b73      	ldr	r3, [pc, #460]	; (8003b4c <HAL_RCC_OscConfig+0x650>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	e013      	b.n	80039ac <HAL_RCC_OscConfig+0x4b0>
 8003984:	2302      	movs	r3, #2
 8003986:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003996:	2302      	movs	r3, #2
 8003998:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800399c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80039a8:	4b68      	ldr	r3, [pc, #416]	; (8003b4c <HAL_RCC_OscConfig+0x650>)
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	2202      	movs	r2, #2
 80039ae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80039b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80039b6:	fa92 f2a2 	rbit	r2, r2
 80039ba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80039be:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80039c2:	fab2 f282 	clz	r2, r2
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	f042 0220 	orr.w	r2, r2, #32
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	f002 021f 	and.w	r2, r2, #31
 80039d2:	2101      	movs	r1, #1
 80039d4:	fa01 f202 	lsl.w	r2, r1, r2
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0af      	beq.n	800393e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	4b5b      	ldr	r3, [pc, #364]	; (8003b4c <HAL_RCC_OscConfig+0x650>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e6:	1d3b      	adds	r3, r7, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	21f8      	movs	r1, #248	; 0xf8
 80039ee:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80039f6:	fa91 f1a1 	rbit	r1, r1
 80039fa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80039fe:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003a02:	fab1 f181 	clz	r1, r1
 8003a06:	b2c9      	uxtb	r1, r1
 8003a08:	408b      	lsls	r3, r1
 8003a0a:	4950      	ldr	r1, [pc, #320]	; (8003b4c <HAL_RCC_OscConfig+0x650>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]
 8003a10:	e06a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x5ec>
 8003a12:	2301      	movs	r3, #1
 8003a14:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003a24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a28:	fab3 f383 	clz	r3, r3
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7fe fd19 	bl	8002474 <HAL_GetTick>
 8003a42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a48:	f7fe fd14 	bl	8002474 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d902      	bls.n	8003a5e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	f000 bc50 	b.w	80042fe <HAL_RCC_OscConfig+0xe02>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a68:	fa93 f3a3 	rbit	r3, r3
 8003a6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a74:	fab3 f383 	clz	r3, r3
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d102      	bne.n	8003a8e <HAL_RCC_OscConfig+0x592>
 8003a88:	4b30      	ldr	r3, [pc, #192]	; (8003b4c <HAL_RCC_OscConfig+0x650>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	e013      	b.n	8003ab6 <HAL_RCC_OscConfig+0x5ba>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003aa6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ab2:	4b26      	ldr	r3, [pc, #152]	; (8003b4c <HAL_RCC_OscConfig+0x650>)
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003abc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ac0:	fa92 f2a2 	rbit	r2, r2
 8003ac4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003ac8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003acc:	fab2 f282 	clz	r2, r2
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	f042 0220 	orr.w	r2, r2, #32
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	f002 021f 	and.w	r2, r2, #31
 8003adc:	2101      	movs	r1, #1
 8003ade:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1af      	bne.n	8003a48 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae8:	1d3b      	adds	r3, r7, #4
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80da 	beq.w	8003cac <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003af8:	1d3b      	adds	r3, r7, #4
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d069      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x6da>
 8003b02:	2301      	movs	r3, #1
 8003b04:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b0c:	fa93 f3a3 	rbit	r3, r3
 8003b10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_RCC_OscConfig+0x654>)
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	461a      	mov	r2, r3
 8003b28:	2301      	movs	r3, #1
 8003b2a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2c:	f7fe fca2 	bl	8002474 <HAL_GetTick>
 8003b30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b34:	e00e      	b.n	8003b54 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fe fc9d 	bl	8002474 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d906      	bls.n	8003b54 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e3d9      	b.n	80042fe <HAL_RCC_OscConfig+0xe02>
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	10908120 	.word	0x10908120
 8003b54:	2302      	movs	r3, #2
 8003b56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	fa93 f2a3 	rbit	r2, r3
 8003b78:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b82:	2202      	movs	r2, #2
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	fa93 f2a3 	rbit	r2, r3
 8003b90:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003b94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b96:	4ba5      	ldr	r3, [pc, #660]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b9a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	6019      	str	r1, [r3, #0]
 8003ba2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	fa93 f1a3 	rbit	r1, r3
 8003bac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003bb0:	6019      	str	r1, [r3, #0]
  return result;
 8003bb2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2101      	movs	r1, #1
 8003bca:	fa01 f303 	lsl.w	r3, r1, r3
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0b0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x63a>
 8003bd4:	e06a      	b.n	8003cac <HAL_RCC_OscConfig+0x7b0>
 8003bd6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	fa93 f2a3 	rbit	r2, r3
 8003be8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003bec:	601a      	str	r2, [r3, #0]
  return result;
 8003bee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003bf2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf4:	fab3 f383 	clz	r3, r3
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4b8c      	ldr	r3, [pc, #560]	; (8003e30 <HAL_RCC_OscConfig+0x934>)
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	461a      	mov	r2, r3
 8003c04:	2300      	movs	r3, #0
 8003c06:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c08:	f7fe fc34 	bl	8002474 <HAL_GetTick>
 8003c0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c10:	e009      	b.n	8003c26 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c12:	f7fe fc2f 	bl	8002474 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e36b      	b.n	80042fe <HAL_RCC_OscConfig+0xe02>
 8003c26:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	fa93 f2a3 	rbit	r2, r3
 8003c38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c42:	2202      	movs	r2, #2
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	fa93 f2a3 	rbit	r2, r3
 8003c50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	fa93 f2a3 	rbit	r2, r3
 8003c68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c6c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c6e:	4b6f      	ldr	r3, [pc, #444]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c72:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003c76:	2102      	movs	r1, #2
 8003c78:	6019      	str	r1, [r3, #0]
 8003c7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	fa93 f1a3 	rbit	r1, r3
 8003c84:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003c88:	6019      	str	r1, [r3, #0]
  return result;
 8003c8a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	fab3 f383 	clz	r3, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1b2      	bne.n	8003c12 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cac:	1d3b      	adds	r3, r7, #4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 8158 	beq.w	8003f6c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc2:	4b5a      	ldr	r3, [pc, #360]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d112      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cce:	4b57      	ldr	r3, [pc, #348]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	4a56      	ldr	r2, [pc, #344]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	61d3      	str	r3, [r2, #28]
 8003cda:	4b54      	ldr	r3, [pc, #336]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003ce2:	f107 0308 	add.w	r3, r7, #8
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f107 0308 	add.w	r3, r7, #8
 8003cec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf4:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <HAL_RCC_OscConfig+0x938>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d11a      	bne.n	8003d36 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d00:	4b4c      	ldr	r3, [pc, #304]	; (8003e34 <HAL_RCC_OscConfig+0x938>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a4b      	ldr	r2, [pc, #300]	; (8003e34 <HAL_RCC_OscConfig+0x938>)
 8003d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0c:	f7fe fbb2 	bl	8002474 <HAL_GetTick>
 8003d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d14:	e009      	b.n	8003d2a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d16:	f7fe fbad 	bl	8002474 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	; 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e2e9      	b.n	80042fe <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2a:	4b42      	ldr	r3, [pc, #264]	; (8003e34 <HAL_RCC_OscConfig+0x938>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0ef      	beq.n	8003d16 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d36:	1d3b      	adds	r3, r7, #4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCC_OscConfig+0x852>
 8003d40:	4b3a      	ldr	r3, [pc, #232]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	4a39      	ldr	r2, [pc, #228]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6213      	str	r3, [r2, #32]
 8003d4c:	e02f      	b.n	8003dae <HAL_RCC_OscConfig+0x8b2>
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10c      	bne.n	8003d72 <HAL_RCC_OscConfig+0x876>
 8003d58:	4b34      	ldr	r3, [pc, #208]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	4a33      	ldr	r2, [pc, #204]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6213      	str	r3, [r2, #32]
 8003d64:	4b31      	ldr	r3, [pc, #196]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	4a30      	ldr	r2, [pc, #192]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003d6a:	f023 0304 	bic.w	r3, r3, #4
 8003d6e:	6213      	str	r3, [r2, #32]
 8003d70:	e01d      	b.n	8003dae <HAL_RCC_OscConfig+0x8b2>
 8003d72:	1d3b      	adds	r3, r7, #4
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d10c      	bne.n	8003d96 <HAL_RCC_OscConfig+0x89a>
 8003d7c:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4a2a      	ldr	r2, [pc, #168]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003d82:	f043 0304 	orr.w	r3, r3, #4
 8003d86:	6213      	str	r3, [r2, #32]
 8003d88:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	4a27      	ldr	r2, [pc, #156]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6213      	str	r3, [r2, #32]
 8003d94:	e00b      	b.n	8003dae <HAL_RCC_OscConfig+0x8b2>
 8003d96:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	4a24      	ldr	r2, [pc, #144]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	6213      	str	r3, [r2, #32]
 8003da2:	4b22      	ldr	r3, [pc, #136]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	4a21      	ldr	r2, [pc, #132]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003da8:	f023 0304 	bic.w	r3, r3, #4
 8003dac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d06b      	beq.n	8003e90 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db8:	f7fe fb5c 	bl	8002474 <HAL_GetTick>
 8003dbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	e00b      	b.n	8003dda <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fe fb57 	bl	8002474 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e291      	b.n	80042fe <HAL_RCC_OscConfig+0xe02>
 8003dda:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003dde:	2202      	movs	r2, #2
 8003de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	fa93 f2a3 	rbit	r2, r3
 8003dec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003df6:	2202      	movs	r2, #2
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	fa93 f2a3 	rbit	r2, r3
 8003e04:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e08:	601a      	str	r2, [r3, #0]
  return result;
 8003e0a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e10:	fab3 f383 	clz	r3, r3
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f043 0302 	orr.w	r3, r3, #2
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d109      	bne.n	8003e38 <HAL_RCC_OscConfig+0x93c>
 8003e24:	4b01      	ldr	r3, [pc, #4]	; (8003e2c <HAL_RCC_OscConfig+0x930>)
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	e014      	b.n	8003e54 <HAL_RCC_OscConfig+0x958>
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	10908120 	.word	0x10908120
 8003e34:	40007000 	.word	0x40007000
 8003e38:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	fa93 f2a3 	rbit	r2, r3
 8003e4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	4bbb      	ldr	r3, [pc, #748]	; (8004140 <HAL_RCC_OscConfig+0xc44>)
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003e58:	2102      	movs	r1, #2
 8003e5a:	6011      	str	r1, [r2, #0]
 8003e5c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003e60:	6812      	ldr	r2, [r2, #0]
 8003e62:	fa92 f1a2 	rbit	r1, r2
 8003e66:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003e6a:	6011      	str	r1, [r2, #0]
  return result;
 8003e6c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	fab2 f282 	clz	r2, r2
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	f002 021f 	and.w	r2, r2, #31
 8003e82:	2101      	movs	r1, #1
 8003e84:	fa01 f202 	lsl.w	r2, r1, r2
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d099      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x8c6>
 8003e8e:	e063      	b.n	8003f58 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e90:	f7fe faf0 	bl	8002474 <HAL_GetTick>
 8003e94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e98:	e00b      	b.n	8003eb2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fe faeb 	bl	8002474 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e225      	b.n	80042fe <HAL_RCC_OscConfig+0xe02>
 8003eb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	fa93 f2a3 	rbit	r2, r3
 8003ec4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003ece:	2202      	movs	r2, #2
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	fa93 f2a3 	rbit	r2, r3
 8003edc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ee0:	601a      	str	r2, [r3, #0]
  return result;
 8003ee2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ee6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee8:	fab3 f383 	clz	r3, r3
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f043 0302 	orr.w	r3, r3, #2
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d102      	bne.n	8003f02 <HAL_RCC_OscConfig+0xa06>
 8003efc:	4b90      	ldr	r3, [pc, #576]	; (8004140 <HAL_RCC_OscConfig+0xc44>)
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	e00d      	b.n	8003f1e <HAL_RCC_OscConfig+0xa22>
 8003f02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003f06:	2202      	movs	r2, #2
 8003f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	fa93 f2a3 	rbit	r2, r3
 8003f14:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	4b89      	ldr	r3, [pc, #548]	; (8004140 <HAL_RCC_OscConfig+0xc44>)
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003f22:	2102      	movs	r1, #2
 8003f24:	6011      	str	r1, [r2, #0]
 8003f26:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	fa92 f1a2 	rbit	r1, r2
 8003f30:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003f34:	6011      	str	r1, [r2, #0]
  return result;
 8003f36:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	fab2 f282 	clz	r2, r2
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	f002 021f 	and.w	r2, r2, #31
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1a0      	bne.n	8003e9a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f58:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d105      	bne.n	8003f6c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f60:	4b77      	ldr	r3, [pc, #476]	; (8004140 <HAL_RCC_OscConfig+0xc44>)
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	4a76      	ldr	r2, [pc, #472]	; (8004140 <HAL_RCC_OscConfig+0xc44>)
 8003f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6c:	1d3b      	adds	r3, r7, #4
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 81c2 	beq.w	80042fc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f78:	4b71      	ldr	r3, [pc, #452]	; (8004140 <HAL_RCC_OscConfig+0xc44>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	f000 819c 	beq.w	80042be <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	f040 8114 	bne.w	80041ba <HAL_RCC_OscConfig+0xcbe>
 8003f92:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003f96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	fa93 f2a3 	rbit	r2, r3
 8003fa6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003faa:	601a      	str	r2, [r3, #0]
  return result;
 8003fac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003fb0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7fe fa54 	bl	8002474 <HAL_GetTick>
 8003fcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fd0:	e009      	b.n	8003fe6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd2:	f7fe fa4f 	bl	8002474 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e18b      	b.n	80042fe <HAL_RCC_OscConfig+0xe02>
 8003fe6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003fea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	fa93 f2a3 	rbit	r2, r3
 8003ffa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ffe:	601a      	str	r2, [r3, #0]
  return result;
 8004000:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004004:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004006:	fab3 f383 	clz	r3, r3
 800400a:	b2db      	uxtb	r3, r3
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b01      	cmp	r3, #1
 8004018:	d102      	bne.n	8004020 <HAL_RCC_OscConfig+0xb24>
 800401a:	4b49      	ldr	r3, [pc, #292]	; (8004140 <HAL_RCC_OscConfig+0xc44>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	e01b      	b.n	8004058 <HAL_RCC_OscConfig+0xb5c>
 8004020:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004024:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004028:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	fa93 f2a3 	rbit	r2, r3
 8004034:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800403e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	fa93 f2a3 	rbit	r2, r3
 800404e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	4b3a      	ldr	r3, [pc, #232]	; (8004140 <HAL_RCC_OscConfig+0xc44>)
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800405c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004060:	6011      	str	r1, [r2, #0]
 8004062:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	fa92 f1a2 	rbit	r1, r2
 800406c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004070:	6011      	str	r1, [r2, #0]
  return result;
 8004072:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	fab2 f282 	clz	r2, r2
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	f042 0220 	orr.w	r2, r2, #32
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	f002 021f 	and.w	r2, r2, #31
 8004088:	2101      	movs	r1, #1
 800408a:	fa01 f202 	lsl.w	r2, r1, r2
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d19e      	bne.n	8003fd2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004094:	4b2a      	ldr	r3, [pc, #168]	; (8004140 <HAL_RCC_OscConfig+0xc44>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800409c:	1d3b      	adds	r3, r7, #4
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040a2:	1d3b      	adds	r3, r7, #4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	430b      	orrs	r3, r1
 80040aa:	4925      	ldr	r1, [pc, #148]	; (8004140 <HAL_RCC_OscConfig+0xc44>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	604b      	str	r3, [r1, #4]
 80040b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	fa93 f2a3 	rbit	r2, r3
 80040c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040c8:	601a      	str	r2, [r3, #0]
  return result;
 80040ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040ce:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040d0:	fab3 f383 	clz	r3, r3
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	461a      	mov	r2, r3
 80040e2:	2301      	movs	r3, #1
 80040e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e6:	f7fe f9c5 	bl	8002474 <HAL_GetTick>
 80040ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040ee:	e009      	b.n	8004104 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fe f9c0 	bl	8002474 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e0fc      	b.n	80042fe <HAL_RCC_OscConfig+0xe02>
 8004104:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800410c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	fa93 f2a3 	rbit	r2, r3
 8004118:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800411c:	601a      	str	r2, [r3, #0]
  return result;
 800411e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004122:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004124:	fab3 f383 	clz	r3, r3
 8004128:	b2db      	uxtb	r3, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <HAL_RCC_OscConfig+0xc48>
 8004138:	4b01      	ldr	r3, [pc, #4]	; (8004140 <HAL_RCC_OscConfig+0xc44>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	e01e      	b.n	800417c <HAL_RCC_OscConfig+0xc80>
 800413e:	bf00      	nop
 8004140:	40021000 	.word	0x40021000
 8004144:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004148:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800414c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	fa93 f2a3 	rbit	r2, r3
 8004158:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004162:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	fa93 f2a3 	rbit	r2, r3
 8004172:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	4b63      	ldr	r3, [pc, #396]	; (8004308 <HAL_RCC_OscConfig+0xe0c>)
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004180:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004184:	6011      	str	r1, [r2, #0]
 8004186:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	fa92 f1a2 	rbit	r1, r2
 8004190:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004194:	6011      	str	r1, [r2, #0]
  return result;
 8004196:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	fab2 f282 	clz	r2, r2
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	f042 0220 	orr.w	r2, r2, #32
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	f002 021f 	and.w	r2, r2, #31
 80041ac:	2101      	movs	r1, #1
 80041ae:	fa01 f202 	lsl.w	r2, r1, r2
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d09b      	beq.n	80040f0 <HAL_RCC_OscConfig+0xbf4>
 80041b8:	e0a0      	b.n	80042fc <HAL_RCC_OscConfig+0xe00>
 80041ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	fa93 f2a3 	rbit	r2, r3
 80041ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041d2:	601a      	str	r2, [r3, #0]
  return result;
 80041d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041da:	fab3 f383 	clz	r3, r3
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	461a      	mov	r2, r3
 80041ec:	2300      	movs	r3, #0
 80041ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7fe f940 	bl	8002474 <HAL_GetTick>
 80041f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041f8:	e009      	b.n	800420e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fa:	f7fe f93b 	bl	8002474 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e077      	b.n	80042fe <HAL_RCC_OscConfig+0xe02>
 800420e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004212:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	fa93 f2a3 	rbit	r2, r3
 8004222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004226:	601a      	str	r2, [r3, #0]
  return result;
 8004228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800422c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800422e:	fab3 f383 	clz	r3, r3
 8004232:	b2db      	uxtb	r3, r3
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d102      	bne.n	8004248 <HAL_RCC_OscConfig+0xd4c>
 8004242:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_RCC_OscConfig+0xe0c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	e01b      	b.n	8004280 <HAL_RCC_OscConfig+0xd84>
 8004248:	f107 0320 	add.w	r3, r7, #32
 800424c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	f107 0320 	add.w	r3, r7, #32
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	fa93 f2a3 	rbit	r2, r3
 800425c:	f107 031c 	add.w	r3, r7, #28
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	f107 0318 	add.w	r3, r7, #24
 8004266:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	f107 0318 	add.w	r3, r7, #24
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	fa93 f2a3 	rbit	r2, r3
 8004276:	f107 0314 	add.w	r3, r7, #20
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	4b22      	ldr	r3, [pc, #136]	; (8004308 <HAL_RCC_OscConfig+0xe0c>)
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	f107 0210 	add.w	r2, r7, #16
 8004284:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004288:	6011      	str	r1, [r2, #0]
 800428a:	f107 0210 	add.w	r2, r7, #16
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	fa92 f1a2 	rbit	r1, r2
 8004294:	f107 020c 	add.w	r2, r7, #12
 8004298:	6011      	str	r1, [r2, #0]
  return result;
 800429a:	f107 020c 	add.w	r2, r7, #12
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	fab2 f282 	clz	r2, r2
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	f042 0220 	orr.w	r2, r2, #32
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	f002 021f 	and.w	r2, r2, #31
 80042b0:	2101      	movs	r1, #1
 80042b2:	fa01 f202 	lsl.w	r2, r1, r2
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d19e      	bne.n	80041fa <HAL_RCC_OscConfig+0xcfe>
 80042bc:	e01e      	b.n	80042fc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e018      	b.n	80042fe <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042cc:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <HAL_RCC_OscConfig+0xe0c>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042dc:	1d3b      	adds	r3, r7, #4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d108      	bne.n	80042f8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80042e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042ee:	1d3b      	adds	r3, r7, #4
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021000 	.word	0x40021000

0800430c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b09e      	sub	sp, #120	; 0x78
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e162      	b.n	80045ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004324:	4b90      	ldr	r3, [pc, #576]	; (8004568 <HAL_RCC_ClockConfig+0x25c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d910      	bls.n	8004354 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b8d      	ldr	r3, [pc, #564]	; (8004568 <HAL_RCC_ClockConfig+0x25c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 0207 	bic.w	r2, r3, #7
 800433a:	498b      	ldr	r1, [pc, #556]	; (8004568 <HAL_RCC_ClockConfig+0x25c>)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b89      	ldr	r3, [pc, #548]	; (8004568 <HAL_RCC_ClockConfig+0x25c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e14a      	b.n	80045ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004360:	4b82      	ldr	r3, [pc, #520]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	497f      	ldr	r1, [pc, #508]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 800436e:	4313      	orrs	r3, r2
 8004370:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 80dc 	beq.w	8004538 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d13c      	bne.n	8004402 <HAL_RCC_ClockConfig+0xf6>
 8004388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800438c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004390:	fa93 f3a3 	rbit	r3, r3
 8004394:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004398:	fab3 f383 	clz	r3, r3
 800439c:	b2db      	uxtb	r3, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d102      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xa6>
 80043ac:	4b6f      	ldr	r3, [pc, #444]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	e00f      	b.n	80043d2 <HAL_RCC_ClockConfig+0xc6>
 80043b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043ba:	fa93 f3a3 	rbit	r3, r3
 80043be:	667b      	str	r3, [r7, #100]	; 0x64
 80043c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043c4:	663b      	str	r3, [r7, #96]	; 0x60
 80043c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043c8:	fa93 f3a3 	rbit	r3, r3
 80043cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043ce:	4b67      	ldr	r3, [pc, #412]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80043d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043da:	fa92 f2a2 	rbit	r2, r2
 80043de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80043e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043e2:	fab2 f282 	clz	r2, r2
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	f042 0220 	orr.w	r2, r2, #32
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	f002 021f 	and.w	r2, r2, #31
 80043f2:	2101      	movs	r1, #1
 80043f4:	fa01 f202 	lsl.w	r2, r1, r2
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d17b      	bne.n	80044f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e0f3      	b.n	80045ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d13c      	bne.n	8004484 <HAL_RCC_ClockConfig+0x178>
 800440a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800440e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004412:	fa93 f3a3 	rbit	r3, r3
 8004416:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441a:	fab3 f383 	clz	r3, r3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	b2db      	uxtb	r3, r3
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b01      	cmp	r3, #1
 800442c:	d102      	bne.n	8004434 <HAL_RCC_ClockConfig+0x128>
 800442e:	4b4f      	ldr	r3, [pc, #316]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	e00f      	b.n	8004454 <HAL_RCC_ClockConfig+0x148>
 8004434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004438:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800443c:	fa93 f3a3 	rbit	r3, r3
 8004440:	647b      	str	r3, [r7, #68]	; 0x44
 8004442:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004446:	643b      	str	r3, [r7, #64]	; 0x40
 8004448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800444a:	fa93 f3a3 	rbit	r3, r3
 800444e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004450:	4b46      	ldr	r3, [pc, #280]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004458:	63ba      	str	r2, [r7, #56]	; 0x38
 800445a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800445c:	fa92 f2a2 	rbit	r2, r2
 8004460:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004464:	fab2 f282 	clz	r2, r2
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	f042 0220 	orr.w	r2, r2, #32
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	f002 021f 	and.w	r2, r2, #31
 8004474:	2101      	movs	r1, #1
 8004476:	fa01 f202 	lsl.w	r2, r1, r2
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d13a      	bne.n	80044f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0b2      	b.n	80045ea <HAL_RCC_ClockConfig+0x2de>
 8004484:	2302      	movs	r3, #2
 8004486:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	fa93 f3a3 	rbit	r3, r3
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004492:	fab3 f383 	clz	r3, r3
 8004496:	b2db      	uxtb	r3, r3
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	b2db      	uxtb	r3, r3
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d102      	bne.n	80044ac <HAL_RCC_ClockConfig+0x1a0>
 80044a6:	4b31      	ldr	r3, [pc, #196]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	e00d      	b.n	80044c8 <HAL_RCC_ClockConfig+0x1bc>
 80044ac:	2302      	movs	r3, #2
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	fa93 f3a3 	rbit	r3, r3
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
 80044b8:	2302      	movs	r3, #2
 80044ba:	623b      	str	r3, [r7, #32]
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	fa93 f3a3 	rbit	r3, r3
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	4b29      	ldr	r3, [pc, #164]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	2202      	movs	r2, #2
 80044ca:	61ba      	str	r2, [r7, #24]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	fa92 f2a2 	rbit	r2, r2
 80044d2:	617a      	str	r2, [r7, #20]
  return result;
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	fab2 f282 	clz	r2, r2
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	f042 0220 	orr.w	r2, r2, #32
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	f002 021f 	and.w	r2, r2, #31
 80044e6:	2101      	movs	r1, #1
 80044e8:	fa01 f202 	lsl.w	r2, r1, r2
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e079      	b.n	80045ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044f6:	4b1d      	ldr	r3, [pc, #116]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f023 0203 	bic.w	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	491a      	ldr	r1, [pc, #104]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004508:	f7fd ffb4 	bl	8002474 <HAL_GetTick>
 800450c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450e:	e00a      	b.n	8004526 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004510:	f7fd ffb0 	bl	8002474 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	; 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e061      	b.n	80045ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 020c 	and.w	r2, r3, #12
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	429a      	cmp	r2, r3
 8004536:	d1eb      	bne.n	8004510 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_RCC_ClockConfig+0x25c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d214      	bcs.n	8004570 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b08      	ldr	r3, [pc, #32]	; (8004568 <HAL_RCC_ClockConfig+0x25c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 0207 	bic.w	r2, r3, #7
 800454e:	4906      	ldr	r1, [pc, #24]	; (8004568 <HAL_RCC_ClockConfig+0x25c>)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b04      	ldr	r3, [pc, #16]	; (8004568 <HAL_RCC_ClockConfig+0x25c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d005      	beq.n	8004570 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e040      	b.n	80045ea <HAL_RCC_ClockConfig+0x2de>
 8004568:	40022000 	.word	0x40022000
 800456c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800457c:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <HAL_RCC_ClockConfig+0x2e8>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	491a      	ldr	r1, [pc, #104]	; (80045f4 <HAL_RCC_ClockConfig+0x2e8>)
 800458a:	4313      	orrs	r3, r2
 800458c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800459a:	4b16      	ldr	r3, [pc, #88]	; (80045f4 <HAL_RCC_ClockConfig+0x2e8>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	4912      	ldr	r1, [pc, #72]	; (80045f4 <HAL_RCC_ClockConfig+0x2e8>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80045ae:	f000 f829 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 80045b2:	4601      	mov	r1, r0
 80045b4:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <HAL_RCC_ClockConfig+0x2e8>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045bc:	22f0      	movs	r2, #240	; 0xf0
 80045be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	fa92 f2a2 	rbit	r2, r2
 80045c6:	60fa      	str	r2, [r7, #12]
  return result;
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	fab2 f282 	clz	r2, r2
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	40d3      	lsrs	r3, r2
 80045d2:	4a09      	ldr	r2, [pc, #36]	; (80045f8 <HAL_RCC_ClockConfig+0x2ec>)
 80045d4:	5cd3      	ldrb	r3, [r2, r3]
 80045d6:	fa21 f303 	lsr.w	r3, r1, r3
 80045da:	4a08      	ldr	r2, [pc, #32]	; (80045fc <HAL_RCC_ClockConfig+0x2f0>)
 80045dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <HAL_RCC_ClockConfig+0x2f4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fd ff02 	bl	80023ec <HAL_InitTick>
  
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3778      	adds	r7, #120	; 0x78
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
 80045f8:	08007f08 	.word	0x08007f08
 80045fc:	20000054 	.word	0x20000054
 8004600:	20000058 	.word	0x20000058

08004604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004604:	b480      	push	{r7}
 8004606:	b08b      	sub	sp, #44	; 0x2c
 8004608:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	2300      	movs	r3, #0
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	2300      	movs	r3, #0
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800461e:	4b29      	ldr	r3, [pc, #164]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b04      	cmp	r3, #4
 800462c:	d002      	beq.n	8004634 <HAL_RCC_GetSysClockFreq+0x30>
 800462e:	2b08      	cmp	r3, #8
 8004630:	d003      	beq.n	800463a <HAL_RCC_GetSysClockFreq+0x36>
 8004632:	e03c      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004634:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004636:	623b      	str	r3, [r7, #32]
      break;
 8004638:	e03c      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004640:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004644:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	fa92 f2a2 	rbit	r2, r2
 800464c:	607a      	str	r2, [r7, #4]
  return result;
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	fab2 f282 	clz	r2, r2
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	40d3      	lsrs	r3, r2
 8004658:	4a1c      	ldr	r2, [pc, #112]	; (80046cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800465a:	5cd3      	ldrb	r3, [r2, r3]
 800465c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800465e:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	220f      	movs	r2, #15
 8004668:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	fa92 f2a2 	rbit	r2, r2
 8004670:	60fa      	str	r2, [r7, #12]
  return result;
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	fab2 f282 	clz	r2, r2
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	40d3      	lsrs	r3, r2
 800467c:	4a14      	ldr	r2, [pc, #80]	; (80046d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800467e:	5cd3      	ldrb	r3, [r2, r3]
 8004680:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800468c:	4a0e      	ldr	r2, [pc, #56]	; (80046c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	fbb2 f2f3 	udiv	r2, r2, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
 800469c:	e004      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	4a0c      	ldr	r2, [pc, #48]	; (80046d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	623b      	str	r3, [r7, #32]
      break;
 80046ac:	e002      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046b0:	623b      	str	r3, [r7, #32]
      break;
 80046b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b4:	6a3b      	ldr	r3, [r7, #32]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	372c      	adds	r7, #44	; 0x2c
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	007a1200 	.word	0x007a1200
 80046cc:	08007f20 	.word	0x08007f20
 80046d0:	08007f30 	.word	0x08007f30
 80046d4:	003d0900 	.word	0x003d0900

080046d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <HAL_RCC_GetHCLKFreq+0x14>)
 80046de:	681b      	ldr	r3, [r3, #0]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000054 	.word	0x20000054

080046f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80046f6:	f7ff ffef 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 80046fa:	4601      	mov	r1, r0
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004704:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004708:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	fa92 f2a2 	rbit	r2, r2
 8004710:	603a      	str	r2, [r7, #0]
  return result;
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	fab2 f282 	clz	r2, r2
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	40d3      	lsrs	r3, r2
 800471c:	4a04      	ldr	r2, [pc, #16]	; (8004730 <HAL_RCC_GetPCLK1Freq+0x40>)
 800471e:	5cd3      	ldrb	r3, [r2, r3]
 8004720:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40021000 	.word	0x40021000
 8004730:	08007f18 	.word	0x08007f18

08004734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800473a:	f7ff ffcd 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 800473e:	4601      	mov	r1, r0
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004748:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800474c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	fa92 f2a2 	rbit	r2, r2
 8004754:	603a      	str	r2, [r7, #0]
  return result;
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	fab2 f282 	clz	r2, r2
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	40d3      	lsrs	r3, r2
 8004760:	4a04      	ldr	r2, [pc, #16]	; (8004774 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004762:	5cd3      	ldrb	r3, [r2, r3]
 8004764:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40021000 	.word	0x40021000
 8004774:	08007f18 	.word	0x08007f18

08004778 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b092      	sub	sp, #72	; 0x48
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004788:	2300      	movs	r3, #0
 800478a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80d4 	beq.w	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479c:	4b4e      	ldr	r3, [pc, #312]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10e      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a8:	4b4b      	ldr	r3, [pc, #300]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	4a4a      	ldr	r2, [pc, #296]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b2:	61d3      	str	r3, [r2, #28]
 80047b4:	4b48      	ldr	r3, [pc, #288]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c6:	4b45      	ldr	r3, [pc, #276]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d118      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047d2:	4b42      	ldr	r3, [pc, #264]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a41      	ldr	r2, [pc, #260]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047de:	f7fd fe49 	bl	8002474 <HAL_GetTick>
 80047e2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e4:	e008      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e6:	f7fd fe45 	bl	8002474 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b64      	cmp	r3, #100	; 0x64
 80047f2:	d901      	bls.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e14b      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	4b38      	ldr	r3, [pc, #224]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004804:	4b34      	ldr	r3, [pc, #208]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800480e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8084 	beq.w	800491e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004820:	429a      	cmp	r2, r3
 8004822:	d07c      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004824:	4b2c      	ldr	r3, [pc, #176]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800482e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004832:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800483e:	fab3 f383 	clz	r3, r3
 8004842:	b2db      	uxtb	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	4b26      	ldr	r3, [pc, #152]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	461a      	mov	r2, r3
 800484e:	2301      	movs	r3, #1
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004856:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	fa93 f3a3 	rbit	r3, r3
 800485e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004862:	fab3 f383 	clz	r3, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	461a      	mov	r2, r3
 8004872:	2300      	movs	r3, #0
 8004874:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004876:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800487c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d04b      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004886:	f7fd fdf5 	bl	8002474 <HAL_GetTick>
 800488a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488c:	e00a      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800488e:	f7fd fdf1 	bl	8002474 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	f241 3288 	movw	r2, #5000	; 0x1388
 800489c:	4293      	cmp	r3, r2
 800489e:	d901      	bls.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e0f5      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80048a4:	2302      	movs	r3, #2
 80048a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
 80048b0:	2302      	movs	r3, #2
 80048b2:	623b      	str	r3, [r7, #32]
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	fa93 f3a3 	rbit	r3, r3
 80048ba:	61fb      	str	r3, [r7, #28]
  return result;
 80048bc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048be:	fab3 f383 	clz	r3, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f043 0302 	orr.w	r3, r3, #2
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d108      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80048d2:	4b01      	ldr	r3, [pc, #4]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	e00d      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80048d8:	40021000 	.word	0x40021000
 80048dc:	40007000 	.word	0x40007000
 80048e0:	10908100 	.word	0x10908100
 80048e4:	2302      	movs	r3, #2
 80048e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	fa93 f3a3 	rbit	r3, r3
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	4b69      	ldr	r3, [pc, #420]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	2202      	movs	r2, #2
 80048f6:	613a      	str	r2, [r7, #16]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	fa92 f2a2 	rbit	r2, r2
 80048fe:	60fa      	str	r2, [r7, #12]
  return result;
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	fab2 f282 	clz	r2, r2
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	f002 021f 	and.w	r2, r2, #31
 8004912:	2101      	movs	r1, #1
 8004914:	fa01 f202 	lsl.w	r2, r1, r2
 8004918:	4013      	ands	r3, r2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0b7      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800491e:	4b5e      	ldr	r3, [pc, #376]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	495b      	ldr	r1, [pc, #364]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800492c:	4313      	orrs	r3, r2
 800492e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004930:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004934:	2b01      	cmp	r3, #1
 8004936:	d105      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004938:	4b57      	ldr	r3, [pc, #348]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	4a56      	ldr	r2, [pc, #344]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800493e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004942:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004950:	4b51      	ldr	r3, [pc, #324]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	f023 0203 	bic.w	r2, r3, #3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	494e      	ldr	r1, [pc, #312]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800495e:	4313      	orrs	r3, r2
 8004960:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800496e:	4b4a      	ldr	r3, [pc, #296]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	f023 0210 	bic.w	r2, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	4947      	ldr	r1, [pc, #284]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800497c:	4313      	orrs	r3, r2
 800497e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800498c:	4b42      	ldr	r3, [pc, #264]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	493f      	ldr	r1, [pc, #252]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800499a:	4313      	orrs	r3, r2
 800499c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d008      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049aa:	4b3b      	ldr	r3, [pc, #236]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	f023 0220 	bic.w	r2, r3, #32
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	4938      	ldr	r1, [pc, #224]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049c8:	4b33      	ldr	r3, [pc, #204]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049cc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	4930      	ldr	r1, [pc, #192]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049e6:	4b2c      	ldr	r3, [pc, #176]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	4929      	ldr	r1, [pc, #164]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004a04:	4b24      	ldr	r3, [pc, #144]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	4921      	ldr	r1, [pc, #132]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a22:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	491a      	ldr	r1, [pc, #104]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a40:	4b15      	ldr	r3, [pc, #84]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	4912      	ldr	r1, [pc, #72]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004a5e:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	490b      	ldr	r1, [pc, #44]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	4903      	ldr	r1, [pc, #12]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3748      	adds	r7, #72	; 0x48
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40021000 	.word	0x40021000

08004a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e049      	b.n	8004b42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fd fa76 	bl	8001fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f000 fcac 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e049      	b.n	8004bf0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f841 	bl	8004bf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f000 fc55 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <HAL_TIM_PWM_Start+0x24>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	bf14      	ite	ne
 8004c28:	2301      	movne	r3, #1
 8004c2a:	2300      	moveq	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	e03c      	b.n	8004caa <HAL_TIM_PWM_Start+0x9e>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d109      	bne.n	8004c4a <HAL_TIM_PWM_Start+0x3e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	bf14      	ite	ne
 8004c42:	2301      	movne	r3, #1
 8004c44:	2300      	moveq	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	e02f      	b.n	8004caa <HAL_TIM_PWM_Start+0x9e>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d109      	bne.n	8004c64 <HAL_TIM_PWM_Start+0x58>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	bf14      	ite	ne
 8004c5c:	2301      	movne	r3, #1
 8004c5e:	2300      	moveq	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e022      	b.n	8004caa <HAL_TIM_PWM_Start+0x9e>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b0c      	cmp	r3, #12
 8004c68:	d109      	bne.n	8004c7e <HAL_TIM_PWM_Start+0x72>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	bf14      	ite	ne
 8004c76:	2301      	movne	r3, #1
 8004c78:	2300      	moveq	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	e015      	b.n	8004caa <HAL_TIM_PWM_Start+0x9e>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d109      	bne.n	8004c98 <HAL_TIM_PWM_Start+0x8c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	bf14      	ite	ne
 8004c90:	2301      	movne	r3, #1
 8004c92:	2300      	moveq	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	e008      	b.n	8004caa <HAL_TIM_PWM_Start+0x9e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	bf14      	ite	ne
 8004ca4:	2301      	movne	r3, #1
 8004ca6:	2300      	moveq	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e083      	b.n	8004dba <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d104      	bne.n	8004cc2 <HAL_TIM_PWM_Start+0xb6>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc0:	e023      	b.n	8004d0a <HAL_TIM_PWM_Start+0xfe>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d104      	bne.n	8004cd2 <HAL_TIM_PWM_Start+0xc6>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cd0:	e01b      	b.n	8004d0a <HAL_TIM_PWM_Start+0xfe>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d104      	bne.n	8004ce2 <HAL_TIM_PWM_Start+0xd6>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce0:	e013      	b.n	8004d0a <HAL_TIM_PWM_Start+0xfe>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b0c      	cmp	r3, #12
 8004ce6:	d104      	bne.n	8004cf2 <HAL_TIM_PWM_Start+0xe6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cf0:	e00b      	b.n	8004d0a <HAL_TIM_PWM_Start+0xfe>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d104      	bne.n	8004d02 <HAL_TIM_PWM_Start+0xf6>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d00:	e003      	b.n	8004d0a <HAL_TIM_PWM_Start+0xfe>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2202      	movs	r2, #2
 8004d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	6839      	ldr	r1, [r7, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 ff3e 	bl	8005b94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a29      	ldr	r2, [pc, #164]	; (8004dc4 <HAL_TIM_PWM_Start+0x1b8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00e      	beq.n	8004d40 <HAL_TIM_PWM_Start+0x134>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a28      	ldr	r2, [pc, #160]	; (8004dc8 <HAL_TIM_PWM_Start+0x1bc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d009      	beq.n	8004d40 <HAL_TIM_PWM_Start+0x134>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a26      	ldr	r2, [pc, #152]	; (8004dcc <HAL_TIM_PWM_Start+0x1c0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d004      	beq.n	8004d40 <HAL_TIM_PWM_Start+0x134>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a25      	ldr	r2, [pc, #148]	; (8004dd0 <HAL_TIM_PWM_Start+0x1c4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIM_PWM_Start+0x138>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <HAL_TIM_PWM_Start+0x13a>
 8004d44:	2300      	movs	r3, #0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <HAL_TIM_PWM_Start+0x1b8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_TIM_PWM_Start+0x16c>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6c:	d004      	beq.n	8004d78 <HAL_TIM_PWM_Start+0x16c>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a15      	ldr	r2, [pc, #84]	; (8004dc8 <HAL_TIM_PWM_Start+0x1bc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d115      	bne.n	8004da4 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <HAL_TIM_PWM_Start+0x1c8>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b06      	cmp	r3, #6
 8004d88:	d015      	beq.n	8004db6 <HAL_TIM_PWM_Start+0x1aa>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d011      	beq.n	8004db6 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da2:	e008      	b.n	8004db6 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e000      	b.n	8004db8 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40012c00 	.word	0x40012c00
 8004dc8:	40014000 	.word	0x40014000
 8004dcc:	40014400 	.word	0x40014400
 8004dd0:	40014800 	.word	0x40014800
 8004dd4:	00010007 	.word	0x00010007

08004dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d122      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d11b      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0202 	mvn.w	r2, #2
 8004e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 faed 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 8004e20:	e005      	b.n	8004e2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fadf 	bl	80053e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 faf0 	bl	800540e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d122      	bne.n	8004e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d11b      	bne.n	8004e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0204 	mvn.w	r2, #4
 8004e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fac3 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 8004e74:	e005      	b.n	8004e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fab5 	bl	80053e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fac6 	bl	800540e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d122      	bne.n	8004edc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d11b      	bne.n	8004edc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0208 	mvn.w	r2, #8
 8004eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fa99 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 8004ec8:	e005      	b.n	8004ed6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fa8b 	bl	80053e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fa9c 	bl	800540e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0310 	and.w	r3, r3, #16
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d122      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b10      	cmp	r3, #16
 8004ef6:	d11b      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0210 	mvn.w	r2, #16
 8004f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2208      	movs	r2, #8
 8004f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fa6f 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 8004f1c:	e005      	b.n	8004f2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fa61 	bl	80053e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fa72 	bl	800540e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d10e      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d107      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0201 	mvn.w	r2, #1
 8004f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa3b 	bl	80053d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f66:	2b80      	cmp	r3, #128	; 0x80
 8004f68:	d10e      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f74:	2b80      	cmp	r3, #128	; 0x80
 8004f76:	d107      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 ff14 	bl	8005db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f96:	d10e      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	2b80      	cmp	r3, #128	; 0x80
 8004fa4:	d107      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 ff07 	bl	8005dc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	d10e      	bne.n	8004fe2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d107      	bne.n	8004fe2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fa20 	bl	8005422 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d10e      	bne.n	800500e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d107      	bne.n	800500e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f06f 0220 	mvn.w	r2, #32
 8005006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fec7 	bl	8005d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005032:	2302      	movs	r3, #2
 8005034:	e0ff      	b.n	8005236 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b14      	cmp	r3, #20
 8005042:	f200 80f0 	bhi.w	8005226 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	080050a1 	.word	0x080050a1
 8005050:	08005227 	.word	0x08005227
 8005054:	08005227 	.word	0x08005227
 8005058:	08005227 	.word	0x08005227
 800505c:	080050e1 	.word	0x080050e1
 8005060:	08005227 	.word	0x08005227
 8005064:	08005227 	.word	0x08005227
 8005068:	08005227 	.word	0x08005227
 800506c:	08005123 	.word	0x08005123
 8005070:	08005227 	.word	0x08005227
 8005074:	08005227 	.word	0x08005227
 8005078:	08005227 	.word	0x08005227
 800507c:	08005163 	.word	0x08005163
 8005080:	08005227 	.word	0x08005227
 8005084:	08005227 	.word	0x08005227
 8005088:	08005227 	.word	0x08005227
 800508c:	080051a5 	.word	0x080051a5
 8005090:	08005227 	.word	0x08005227
 8005094:	08005227 	.word	0x08005227
 8005098:	08005227 	.word	0x08005227
 800509c:	080051e5 	.word	0x080051e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fa34 	bl	8005514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0208 	orr.w	r2, r2, #8
 80050ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0204 	bic.w	r2, r2, #4
 80050ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6999      	ldr	r1, [r3, #24]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	619a      	str	r2, [r3, #24]
      break;
 80050de:	e0a5      	b.n	800522c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fa9a 	bl	8005620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6999      	ldr	r1, [r3, #24]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	021a      	lsls	r2, r3, #8
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	619a      	str	r2, [r3, #24]
      break;
 8005120:	e084      	b.n	800522c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 faf9 	bl	8005720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0208 	orr.w	r2, r2, #8
 800513c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0204 	bic.w	r2, r2, #4
 800514c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69d9      	ldr	r1, [r3, #28]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	61da      	str	r2, [r3, #28]
      break;
 8005160:	e064      	b.n	800522c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fb57 	bl	800581c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800517c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800518c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69d9      	ldr	r1, [r3, #28]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	021a      	lsls	r2, r3, #8
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	61da      	str	r2, [r3, #28]
      break;
 80051a2:	e043      	b.n	800522c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fb9a 	bl	80058e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0208 	orr.w	r2, r2, #8
 80051be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0204 	bic.w	r2, r2, #4
 80051ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051e2:	e023      	b.n	800522c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fbd8 	bl	80059a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	021a      	lsls	r2, r3, #8
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005224:	e002      	b.n	800522c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
      break;
 800522a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005234:	7dfb      	ldrb	r3, [r7, #23]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop

08005240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_TIM_ConfigClockSource+0x1c>
 8005258:	2302      	movs	r3, #2
 800525a:	e0b6      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x18a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800527e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005298:	d03e      	beq.n	8005318 <HAL_TIM_ConfigClockSource+0xd8>
 800529a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529e:	f200 8087 	bhi.w	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a6:	f000 8086 	beq.w	80053b6 <HAL_TIM_ConfigClockSource+0x176>
 80052aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ae:	d87f      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052b0:	2b70      	cmp	r3, #112	; 0x70
 80052b2:	d01a      	beq.n	80052ea <HAL_TIM_ConfigClockSource+0xaa>
 80052b4:	2b70      	cmp	r3, #112	; 0x70
 80052b6:	d87b      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052b8:	2b60      	cmp	r3, #96	; 0x60
 80052ba:	d050      	beq.n	800535e <HAL_TIM_ConfigClockSource+0x11e>
 80052bc:	2b60      	cmp	r3, #96	; 0x60
 80052be:	d877      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052c0:	2b50      	cmp	r3, #80	; 0x50
 80052c2:	d03c      	beq.n	800533e <HAL_TIM_ConfigClockSource+0xfe>
 80052c4:	2b50      	cmp	r3, #80	; 0x50
 80052c6:	d873      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d058      	beq.n	800537e <HAL_TIM_ConfigClockSource+0x13e>
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d86f      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052d0:	2b30      	cmp	r3, #48	; 0x30
 80052d2:	d064      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x15e>
 80052d4:	2b30      	cmp	r3, #48	; 0x30
 80052d6:	d86b      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d060      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x15e>
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d867      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d05c      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x15e>
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d05a      	beq.n	800539e <HAL_TIM_ConfigClockSource+0x15e>
 80052e8:	e062      	b.n	80053b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6899      	ldr	r1, [r3, #8]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f000 fc2b 	bl	8005b54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800530c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	609a      	str	r2, [r3, #8]
      break;
 8005316:	e04f      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	6899      	ldr	r1, [r3, #8]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f000 fc14 	bl	8005b54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800533a:	609a      	str	r2, [r3, #8]
      break;
 800533c:	e03c      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	6859      	ldr	r1, [r3, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	461a      	mov	r2, r3
 800534c:	f000 fb88 	bl	8005a60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2150      	movs	r1, #80	; 0x50
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fbe1 	bl	8005b1e <TIM_ITRx_SetConfig>
      break;
 800535c:	e02c      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6859      	ldr	r1, [r3, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	461a      	mov	r2, r3
 800536c:	f000 fba7 	bl	8005abe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2160      	movs	r1, #96	; 0x60
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fbd1 	bl	8005b1e <TIM_ITRx_SetConfig>
      break;
 800537c:	e01c      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6859      	ldr	r1, [r3, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	461a      	mov	r2, r3
 800538c:	f000 fb68 	bl	8005a60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2140      	movs	r1, #64	; 0x40
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fbc1 	bl	8005b1e <TIM_ITRx_SetConfig>
      break;
 800539c:	e00c      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4619      	mov	r1, r3
 80053a8:	4610      	mov	r0, r2
 80053aa:	f000 fbb8 	bl	8005b1e <TIM_ITRx_SetConfig>
      break;
 80053ae:	e003      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]
      break;
 80053b4:	e000      	b.n	80053b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80053b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a2e      	ldr	r2, [pc, #184]	; (8005504 <TIM_Base_SetConfig+0xcc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_Base_SetConfig+0x20>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005456:	d108      	bne.n	800546a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a25      	ldr	r2, [pc, #148]	; (8005504 <TIM_Base_SetConfig+0xcc>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00f      	beq.n	8005492 <TIM_Base_SetConfig+0x5a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005478:	d00b      	beq.n	8005492 <TIM_Base_SetConfig+0x5a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a22      	ldr	r2, [pc, #136]	; (8005508 <TIM_Base_SetConfig+0xd0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <TIM_Base_SetConfig+0x5a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a21      	ldr	r2, [pc, #132]	; (800550c <TIM_Base_SetConfig+0xd4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_Base_SetConfig+0x5a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a20      	ldr	r2, [pc, #128]	; (8005510 <TIM_Base_SetConfig+0xd8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a0e      	ldr	r2, [pc, #56]	; (8005504 <TIM_Base_SetConfig+0xcc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00b      	beq.n	80054e8 <TIM_Base_SetConfig+0xb0>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a0d      	ldr	r2, [pc, #52]	; (8005508 <TIM_Base_SetConfig+0xd0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d007      	beq.n	80054e8 <TIM_Base_SetConfig+0xb0>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a0c      	ldr	r2, [pc, #48]	; (800550c <TIM_Base_SetConfig+0xd4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d003      	beq.n	80054e8 <TIM_Base_SetConfig+0xb0>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a0b      	ldr	r2, [pc, #44]	; (8005510 <TIM_Base_SetConfig+0xd8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d103      	bne.n	80054f0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	615a      	str	r2, [r3, #20]
}
 80054f6:	bf00      	nop
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800

08005514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f023 0201 	bic.w	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f023 0302 	bic.w	r3, r3, #2
 8005560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a28      	ldr	r2, [pc, #160]	; (8005610 <TIM_OC1_SetConfig+0xfc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00b      	beq.n	800558c <TIM_OC1_SetConfig+0x78>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a27      	ldr	r2, [pc, #156]	; (8005614 <TIM_OC1_SetConfig+0x100>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d007      	beq.n	800558c <TIM_OC1_SetConfig+0x78>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a26      	ldr	r2, [pc, #152]	; (8005618 <TIM_OC1_SetConfig+0x104>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <TIM_OC1_SetConfig+0x78>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a25      	ldr	r2, [pc, #148]	; (800561c <TIM_OC1_SetConfig+0x108>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d10c      	bne.n	80055a6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0308 	bic.w	r3, r3, #8
 8005592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f023 0304 	bic.w	r3, r3, #4
 80055a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a19      	ldr	r2, [pc, #100]	; (8005610 <TIM_OC1_SetConfig+0xfc>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_OC1_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a18      	ldr	r2, [pc, #96]	; (8005614 <TIM_OC1_SetConfig+0x100>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_OC1_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a17      	ldr	r2, [pc, #92]	; (8005618 <TIM_OC1_SetConfig+0x104>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_OC1_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a16      	ldr	r2, [pc, #88]	; (800561c <TIM_OC1_SetConfig+0x108>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d111      	bne.n	80055ea <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	621a      	str	r2, [r3, #32]
}
 8005604:	bf00      	nop
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400
 800561c:	40014800 	.word	0x40014800

08005620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 0210 	bic.w	r2, r3, #16
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800564e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800565a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 0320 	bic.w	r3, r3, #32
 800566e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a24      	ldr	r2, [pc, #144]	; (8005710 <TIM_OC2_SetConfig+0xf0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d10d      	bne.n	80056a0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800568a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800569e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a1b      	ldr	r2, [pc, #108]	; (8005710 <TIM_OC2_SetConfig+0xf0>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_OC2_SetConfig+0xa0>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <TIM_OC2_SetConfig+0xf4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_OC2_SetConfig+0xa0>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a19      	ldr	r2, [pc, #100]	; (8005718 <TIM_OC2_SetConfig+0xf8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_OC2_SetConfig+0xa0>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a18      	ldr	r2, [pc, #96]	; (800571c <TIM_OC2_SetConfig+0xfc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d113      	bne.n	80056e8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056c6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056ce:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40014000 	.word	0x40014000
 8005718:	40014400 	.word	0x40014400
 800571c:	40014800 	.word	0x40014800

08005720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800574e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0303 	bic.w	r3, r3, #3
 800575a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800576c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a23      	ldr	r2, [pc, #140]	; (800580c <TIM_OC3_SetConfig+0xec>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10d      	bne.n	800579e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800579c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a1a      	ldr	r2, [pc, #104]	; (800580c <TIM_OC3_SetConfig+0xec>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00b      	beq.n	80057be <TIM_OC3_SetConfig+0x9e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a19      	ldr	r2, [pc, #100]	; (8005810 <TIM_OC3_SetConfig+0xf0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d007      	beq.n	80057be <TIM_OC3_SetConfig+0x9e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a18      	ldr	r2, [pc, #96]	; (8005814 <TIM_OC3_SetConfig+0xf4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d003      	beq.n	80057be <TIM_OC3_SetConfig+0x9e>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a17      	ldr	r2, [pc, #92]	; (8005818 <TIM_OC3_SetConfig+0xf8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d113      	bne.n	80057e6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	621a      	str	r2, [r3, #32]
}
 8005800:	bf00      	nop
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	40012c00 	.word	0x40012c00
 8005810:	40014000 	.word	0x40014000
 8005814:	40014400 	.word	0x40014400
 8005818:	40014800 	.word	0x40014800

0800581c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800584a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800584e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800586a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	031b      	lsls	r3, r3, #12
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <TIM_OC4_SetConfig+0xb8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00b      	beq.n	8005898 <TIM_OC4_SetConfig+0x7c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <TIM_OC4_SetConfig+0xbc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d007      	beq.n	8005898 <TIM_OC4_SetConfig+0x7c>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a14      	ldr	r2, [pc, #80]	; (80058dc <TIM_OC4_SetConfig+0xc0>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_OC4_SetConfig+0x7c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <TIM_OC4_SetConfig+0xc4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d109      	bne.n	80058ac <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800589e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	019b      	lsls	r3, r3, #6
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	621a      	str	r2, [r3, #32]
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40014400 	.word	0x40014400
 80058e0:	40014800 	.word	0x40014800

080058e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005928:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4313      	orrs	r3, r2
 8005934:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a15      	ldr	r2, [pc, #84]	; (8005990 <TIM_OC5_SetConfig+0xac>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00b      	beq.n	8005956 <TIM_OC5_SetConfig+0x72>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a14      	ldr	r2, [pc, #80]	; (8005994 <TIM_OC5_SetConfig+0xb0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d007      	beq.n	8005956 <TIM_OC5_SetConfig+0x72>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a13      	ldr	r2, [pc, #76]	; (8005998 <TIM_OC5_SetConfig+0xb4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d003      	beq.n	8005956 <TIM_OC5_SetConfig+0x72>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a12      	ldr	r2, [pc, #72]	; (800599c <TIM_OC5_SetConfig+0xb8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d109      	bne.n	800596a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	621a      	str	r2, [r3, #32]
}
 8005984:	bf00      	nop
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	40012c00 	.word	0x40012c00
 8005994:	40014000 	.word	0x40014000
 8005998:	40014400 	.word	0x40014400
 800599c:	40014800 	.word	0x40014800

080059a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	051b      	lsls	r3, r3, #20
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <TIM_OC6_SetConfig+0xb0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00b      	beq.n	8005a14 <TIM_OC6_SetConfig+0x74>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a15      	ldr	r2, [pc, #84]	; (8005a54 <TIM_OC6_SetConfig+0xb4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d007      	beq.n	8005a14 <TIM_OC6_SetConfig+0x74>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a14      	ldr	r2, [pc, #80]	; (8005a58 <TIM_OC6_SetConfig+0xb8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_OC6_SetConfig+0x74>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <TIM_OC6_SetConfig+0xbc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d109      	bne.n	8005a28 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	029b      	lsls	r3, r3, #10
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	621a      	str	r2, [r3, #32]
}
 8005a42:	bf00      	nop
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40012c00 	.word	0x40012c00
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800

08005a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f023 0201 	bic.w	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f023 030a 	bic.w	r3, r3, #10
 8005a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	621a      	str	r2, [r3, #32]
}
 8005ab2:	bf00      	nop
 8005ab4:	371c      	adds	r7, #28
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b087      	sub	sp, #28
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f023 0210 	bic.w	r2, r3, #16
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ae8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	031b      	lsls	r3, r3, #12
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005afa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	621a      	str	r2, [r3, #32]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f043 0307 	orr.w	r3, r3, #7
 8005b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	609a      	str	r2, [r3, #8]
}
 8005b48:	bf00      	nop
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	021a      	lsls	r2, r3, #8
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	609a      	str	r2, [r3, #8]
}
 8005b88:	bf00      	nop
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1a      	ldr	r2, [r3, #32]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	401a      	ands	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a1a      	ldr	r2, [r3, #32]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	621a      	str	r2, [r3, #32]
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
	...

08005be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e04f      	b.n	8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a21      	ldr	r2, [pc, #132]	; (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d108      	bne.n	8005c34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a14      	ldr	r2, [pc, #80]	; (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d009      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c60:	d004      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a10      	ldr	r2, [pc, #64]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d10c      	bne.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	40012c00 	.word	0x40012c00
 8005ca8:	40014000 	.word	0x40014000

08005cac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e060      	b.n	8005d8a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	041b      	lsls	r3, r3, #16
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a14      	ldr	r2, [pc, #80]	; (8005d98 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d115      	bne.n	8005d78 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	051b      	lsls	r3, r3, #20
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40012c00 	.word	0x40012c00

08005d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e040      	b.n	8005e6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fc f9de 	bl	80021bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2224      	movs	r2, #36	; 0x24
 8005e04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0201 	bic.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fc0c 	bl	8006634 <UART_SetConfig>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e022      	b.n	8005e6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fd36 	bl	80068a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0201 	orr.w	r2, r2, #1
 8005e62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fdbd 	bl	80069e4 <UART_CheckIdleState>
 8005e6a:	4603      	mov	r3, r0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08a      	sub	sp, #40	; 0x28
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	4613      	mov	r3, r2
 8005e82:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	f040 8082 	bne.w	8005f92 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <HAL_UART_Transmit+0x26>
 8005e94:	88fb      	ldrh	r3, [r7, #6]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e07a      	b.n	8005f94 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d101      	bne.n	8005eac <HAL_UART_Transmit+0x38>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e073      	b.n	8005f94 <HAL_UART_Transmit+0x120>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2221      	movs	r2, #33	; 0x21
 8005ec0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ec2:	f7fc fad7 	bl	8002474 <HAL_GetTick>
 8005ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	88fa      	ldrh	r2, [r7, #6]
 8005ecc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	88fa      	ldrh	r2, [r7, #6]
 8005ed4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee0:	d108      	bne.n	8005ef4 <HAL_UART_Transmit+0x80>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d104      	bne.n	8005ef4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	e003      	b.n	8005efc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005f04:	e02d      	b.n	8005f62 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2180      	movs	r1, #128	; 0x80
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 fdb0 	bl	8006a76 <UART_WaitOnFlagUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e039      	b.n	8005f94 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10b      	bne.n	8005f3e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	881a      	ldrh	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f32:	b292      	uxth	r2, r2
 8005f34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	3302      	adds	r3, #2
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	e008      	b.n	8005f50 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	781a      	ldrb	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	b292      	uxth	r2, r2
 8005f48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1cb      	bne.n	8005f06 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2200      	movs	r2, #0
 8005f76:	2140      	movs	r1, #64	; 0x40
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fd7c 	bl	8006a76 <UART_WaitOnFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e005      	b.n	8005f94 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e000      	b.n	8005f94 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005f92:	2302      	movs	r3, #2
  }
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	; 0x28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d13d      	bne.n	800602e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_UART_Receive_IT+0x22>
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e036      	b.n	8006030 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_UART_Receive_IT+0x34>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e02f      	b.n	8006030 <HAL_UART_Receive_IT+0x94>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d018      	beq.n	800601e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	623b      	str	r3, [r7, #32]
 800600c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	69f9      	ldr	r1, [r7, #28]
 8006010:	6a3a      	ldr	r2, [r7, #32]
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	61bb      	str	r3, [r7, #24]
   return(result);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e6      	bne.n	8005fec <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	461a      	mov	r2, r3
 8006022:	68b9      	ldr	r1, [r7, #8]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 fdeb 	bl	8006c00 <UART_Start_Receive_IT>
 800602a:	4603      	mov	r3, r0
 800602c:	e000      	b.n	8006030 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800602e:	2302      	movs	r3, #2
  }
}
 8006030:	4618      	mov	r0, r3
 8006032:	3728      	adds	r7, #40	; 0x28
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b0ba      	sub	sp, #232	; 0xe8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800605e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006062:	f640 030f 	movw	r3, #2063	; 0x80f
 8006066:	4013      	ands	r3, r2
 8006068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800606c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d115      	bne.n	80060a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00f      	beq.n	80060a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 82a3 	beq.w	80065dc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
      }
      return;
 800609e:	e29d      	b.n	80065dc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8117 	beq.w	80062d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80060aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80060b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80060ba:	4b85      	ldr	r3, [pc, #532]	; (80062d0 <HAL_UART_IRQHandler+0x298>)
 80060bc:	4013      	ands	r3, r2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 810a 	beq.w	80062d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d011      	beq.n	80060f4 <HAL_UART_IRQHandler+0xbc>
 80060d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00b      	beq.n	80060f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2201      	movs	r2, #1
 80060e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060ea:	f043 0201 	orr.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d011      	beq.n	8006124 <HAL_UART_IRQHandler+0xec>
 8006100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00b      	beq.n	8006124 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2202      	movs	r2, #2
 8006112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800611a:	f043 0204 	orr.w	r2, r3, #4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d011      	beq.n	8006154 <HAL_UART_IRQHandler+0x11c>
 8006130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2204      	movs	r2, #4
 8006142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800614a:	f043 0202 	orr.w	r2, r3, #2
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b00      	cmp	r3, #0
 800615e:	d017      	beq.n	8006190 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b00      	cmp	r3, #0
 800616a:	d105      	bne.n	8006178 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800616c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006170:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00b      	beq.n	8006190 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2208      	movs	r2, #8
 800617e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006186:	f043 0208 	orr.w	r2, r3, #8
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006198:	2b00      	cmp	r3, #0
 800619a:	d012      	beq.n	80061c2 <HAL_UART_IRQHandler+0x18a>
 800619c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00c      	beq.n	80061c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b8:	f043 0220 	orr.w	r2, r3, #32
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8209 	beq.w	80065e0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00d      	beq.n	80061f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620a:	2b40      	cmp	r3, #64	; 0x40
 800620c:	d005      	beq.n	800621a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800620e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006212:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006216:	2b00      	cmp	r3, #0
 8006218:	d04f      	beq.n	80062ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fd9c 	bl	8006d58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622a:	2b40      	cmp	r3, #64	; 0x40
 800622c:	d141      	bne.n	80062b2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3308      	adds	r3, #8
 8006234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800624c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3308      	adds	r3, #8
 8006256:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800625a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800625e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006266:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1d9      	bne.n	800622e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627e:	2b00      	cmp	r3, #0
 8006280:	d013      	beq.n	80062aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006286:	4a13      	ldr	r2, [pc, #76]	; (80062d4 <HAL_UART_IRQHandler+0x29c>)
 8006288:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628e:	4618      	mov	r0, r3
 8006290:	f7fc fa6a 	bl	8002768 <HAL_DMA_Abort_IT>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d017      	beq.n	80062ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a8:	e00f      	b.n	80062ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f9ac 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b0:	e00b      	b.n	80062ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f9a8 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b8:	e007      	b.n	80062ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f9a4 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80062c8:	e18a      	b.n	80065e0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ca:	bf00      	nop
    return;
 80062cc:	e188      	b.n	80065e0 <HAL_UART_IRQHandler+0x5a8>
 80062ce:	bf00      	nop
 80062d0:	04000120 	.word	0x04000120
 80062d4:	08006e1f 	.word	0x08006e1f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062dc:	2b01      	cmp	r3, #1
 80062de:	f040 8143 	bne.w	8006568 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 813c 	beq.w	8006568 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f4:	f003 0310 	and.w	r3, r3, #16
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 8135 	beq.w	8006568 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2210      	movs	r2, #16
 8006304:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	f040 80b1 	bne.w	8006478 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006322:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 815c 	beq.w	80065e4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006336:	429a      	cmp	r2, r3
 8006338:	f080 8154 	bcs.w	80065e4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006342:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	2b20      	cmp	r3, #32
 800634e:	f000 8085 	beq.w	800645c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006366:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800636a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800636e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800637c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006380:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006388:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800638c:	e841 2300 	strex	r3, r2, [r1]
 8006390:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006394:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1da      	bne.n	8006352 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3308      	adds	r3, #8
 80063a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063ae:	f023 0301 	bic.w	r3, r3, #1
 80063b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3308      	adds	r3, #8
 80063bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e1      	bne.n	800639c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3308      	adds	r3, #8
 80063de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3308      	adds	r3, #8
 80063f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006402:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800640a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e3      	bne.n	80063d8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006424:	e853 3f00 	ldrex	r3, [r3]
 8006428:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800642a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800642c:	f023 0310 	bic.w	r3, r3, #16
 8006430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800643e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006440:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006442:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006444:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006446:	e841 2300 	strex	r3, r2, [r1]
 800644a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800644c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1e4      	bne.n	800641c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006456:	4618      	mov	r0, r3
 8006458:	f7fc f94d 	bl	80026f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006468:	b29b      	uxth	r3, r3
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	b29b      	uxth	r3, r3
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f8d3 	bl	800661c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006476:	e0b5      	b.n	80065e4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006484:	b29b      	uxth	r3, r3
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 80a7 	beq.w	80065e8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800649a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 80a2 	beq.w	80065e8 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064c6:	647b      	str	r3, [r7, #68]	; 0x44
 80064c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e4      	bne.n	80064a4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3308      	adds	r3, #8
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	623b      	str	r3, [r7, #32]
   return(result);
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3308      	adds	r3, #8
 80064fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064fe:	633a      	str	r2, [r7, #48]	; 0x30
 8006500:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e3      	bne.n	80064da <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	60fb      	str	r3, [r7, #12]
   return(result);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f023 0310 	bic.w	r3, r3, #16
 8006538:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006546:	61fb      	str	r3, [r7, #28]
 8006548:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	69b9      	ldr	r1, [r7, #24]
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	617b      	str	r3, [r7, #20]
   return(result);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e4      	bne.n	8006524 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800655a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f85b 	bl	800661c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006566:	e03f      	b.n	80065e8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00e      	beq.n	8006592 <HAL_UART_IRQHandler+0x55a>
 8006574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d008      	beq.n	8006592 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006588:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fde3 	bl	8007156 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006590:	e02d      	b.n	80065ee <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00e      	beq.n	80065bc <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800659e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d008      	beq.n	80065bc <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d01c      	beq.n	80065ec <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	4798      	blx	r3
    }
    return;
 80065ba:	e017      	b.n	80065ec <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d012      	beq.n	80065ee <HAL_UART_IRQHandler+0x5b6>
 80065c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00c      	beq.n	80065ee <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fc38 	bl	8006e4a <UART_EndTransmit_IT>
    return;
 80065da:	e008      	b.n	80065ee <HAL_UART_IRQHandler+0x5b6>
      return;
 80065dc:	bf00      	nop
 80065de:	e006      	b.n	80065ee <HAL_UART_IRQHandler+0x5b6>
    return;
 80065e0:	bf00      	nop
 80065e2:	e004      	b.n	80065ee <HAL_UART_IRQHandler+0x5b6>
      return;
 80065e4:	bf00      	nop
 80065e6:	e002      	b.n	80065ee <HAL_UART_IRQHandler+0x5b6>
      return;
 80065e8:	bf00      	nop
 80065ea:	e000      	b.n	80065ee <HAL_UART_IRQHandler+0x5b6>
    return;
 80065ec:	bf00      	nop
  }

}
 80065ee:	37e8      	adds	r7, #232	; 0xe8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b088      	sub	sp, #32
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	431a      	orrs	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	4b8a      	ldr	r3, [pc, #552]	; (8006888 <UART_SetConfig+0x254>)
 8006660:	4013      	ands	r3, r2
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	6979      	ldr	r1, [r7, #20]
 8006668:	430b      	orrs	r3, r1
 800666a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a78      	ldr	r2, [pc, #480]	; (800688c <UART_SetConfig+0x258>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d120      	bne.n	80066f2 <UART_SetConfig+0xbe>
 80066b0:	4b77      	ldr	r3, [pc, #476]	; (8006890 <UART_SetConfig+0x25c>)
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d817      	bhi.n	80066ec <UART_SetConfig+0xb8>
 80066bc:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <UART_SetConfig+0x90>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	080066d5 	.word	0x080066d5
 80066c8:	080066e1 	.word	0x080066e1
 80066cc:	080066e7 	.word	0x080066e7
 80066d0:	080066db 	.word	0x080066db
 80066d4:	2300      	movs	r3, #0
 80066d6:	77fb      	strb	r3, [r7, #31]
 80066d8:	e01d      	b.n	8006716 <UART_SetConfig+0xe2>
 80066da:	2302      	movs	r3, #2
 80066dc:	77fb      	strb	r3, [r7, #31]
 80066de:	e01a      	b.n	8006716 <UART_SetConfig+0xe2>
 80066e0:	2304      	movs	r3, #4
 80066e2:	77fb      	strb	r3, [r7, #31]
 80066e4:	e017      	b.n	8006716 <UART_SetConfig+0xe2>
 80066e6:	2308      	movs	r3, #8
 80066e8:	77fb      	strb	r3, [r7, #31]
 80066ea:	e014      	b.n	8006716 <UART_SetConfig+0xe2>
 80066ec:	2310      	movs	r3, #16
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e011      	b.n	8006716 <UART_SetConfig+0xe2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a67      	ldr	r2, [pc, #412]	; (8006894 <UART_SetConfig+0x260>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d102      	bne.n	8006702 <UART_SetConfig+0xce>
 80066fc:	2300      	movs	r3, #0
 80066fe:	77fb      	strb	r3, [r7, #31]
 8006700:	e009      	b.n	8006716 <UART_SetConfig+0xe2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a64      	ldr	r2, [pc, #400]	; (8006898 <UART_SetConfig+0x264>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d102      	bne.n	8006712 <UART_SetConfig+0xde>
 800670c:	2300      	movs	r3, #0
 800670e:	77fb      	strb	r3, [r7, #31]
 8006710:	e001      	b.n	8006716 <UART_SetConfig+0xe2>
 8006712:	2310      	movs	r3, #16
 8006714:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800671e:	d15b      	bne.n	80067d8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006720:	7ffb      	ldrb	r3, [r7, #31]
 8006722:	2b08      	cmp	r3, #8
 8006724:	d827      	bhi.n	8006776 <UART_SetConfig+0x142>
 8006726:	a201      	add	r2, pc, #4	; (adr r2, 800672c <UART_SetConfig+0xf8>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	08006751 	.word	0x08006751
 8006730:	08006759 	.word	0x08006759
 8006734:	08006761 	.word	0x08006761
 8006738:	08006777 	.word	0x08006777
 800673c:	08006767 	.word	0x08006767
 8006740:	08006777 	.word	0x08006777
 8006744:	08006777 	.word	0x08006777
 8006748:	08006777 	.word	0x08006777
 800674c:	0800676f 	.word	0x0800676f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006750:	f7fd ffce 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 8006754:	61b8      	str	r0, [r7, #24]
        break;
 8006756:	e013      	b.n	8006780 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006758:	f7fd ffec 	bl	8004734 <HAL_RCC_GetPCLK2Freq>
 800675c:	61b8      	str	r0, [r7, #24]
        break;
 800675e:	e00f      	b.n	8006780 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006760:	4b4e      	ldr	r3, [pc, #312]	; (800689c <UART_SetConfig+0x268>)
 8006762:	61bb      	str	r3, [r7, #24]
        break;
 8006764:	e00c      	b.n	8006780 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006766:	f7fd ff4d 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 800676a:	61b8      	str	r0, [r7, #24]
        break;
 800676c:	e008      	b.n	8006780 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800676e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006772:	61bb      	str	r3, [r7, #24]
        break;
 8006774:	e004      	b.n	8006780 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	77bb      	strb	r3, [r7, #30]
        break;
 800677e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d074      	beq.n	8006870 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	005a      	lsls	r2, r3, #1
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	441a      	add	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	fbb2 f3f3 	udiv	r3, r2, r3
 800679a:	b29b      	uxth	r3, r3
 800679c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b0f      	cmp	r3, #15
 80067a2:	d916      	bls.n	80067d2 <UART_SetConfig+0x19e>
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067aa:	d212      	bcs.n	80067d2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f023 030f 	bic.w	r3, r3, #15
 80067b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	085b      	lsrs	r3, r3, #1
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	89fb      	ldrh	r3, [r7, #14]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	89fa      	ldrh	r2, [r7, #14]
 80067ce:	60da      	str	r2, [r3, #12]
 80067d0:	e04e      	b.n	8006870 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	77bb      	strb	r3, [r7, #30]
 80067d6:	e04b      	b.n	8006870 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067d8:	7ffb      	ldrb	r3, [r7, #31]
 80067da:	2b08      	cmp	r3, #8
 80067dc:	d827      	bhi.n	800682e <UART_SetConfig+0x1fa>
 80067de:	a201      	add	r2, pc, #4	; (adr r2, 80067e4 <UART_SetConfig+0x1b0>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	08006809 	.word	0x08006809
 80067e8:	08006811 	.word	0x08006811
 80067ec:	08006819 	.word	0x08006819
 80067f0:	0800682f 	.word	0x0800682f
 80067f4:	0800681f 	.word	0x0800681f
 80067f8:	0800682f 	.word	0x0800682f
 80067fc:	0800682f 	.word	0x0800682f
 8006800:	0800682f 	.word	0x0800682f
 8006804:	08006827 	.word	0x08006827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006808:	f7fd ff72 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 800680c:	61b8      	str	r0, [r7, #24]
        break;
 800680e:	e013      	b.n	8006838 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006810:	f7fd ff90 	bl	8004734 <HAL_RCC_GetPCLK2Freq>
 8006814:	61b8      	str	r0, [r7, #24]
        break;
 8006816:	e00f      	b.n	8006838 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006818:	4b20      	ldr	r3, [pc, #128]	; (800689c <UART_SetConfig+0x268>)
 800681a:	61bb      	str	r3, [r7, #24]
        break;
 800681c:	e00c      	b.n	8006838 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681e:	f7fd fef1 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 8006822:	61b8      	str	r0, [r7, #24]
        break;
 8006824:	e008      	b.n	8006838 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800682a:	61bb      	str	r3, [r7, #24]
        break;
 800682c:	e004      	b.n	8006838 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	77bb      	strb	r3, [r7, #30]
        break;
 8006836:	bf00      	nop
    }

    if (pclk != 0U)
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d018      	beq.n	8006870 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	085a      	lsrs	r2, r3, #1
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	441a      	add	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006850:	b29b      	uxth	r3, r3
 8006852:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b0f      	cmp	r3, #15
 8006858:	d908      	bls.n	800686c <UART_SetConfig+0x238>
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006860:	d204      	bcs.n	800686c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	60da      	str	r2, [r3, #12]
 800686a:	e001      	b.n	8006870 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800687c:	7fbb      	ldrb	r3, [r7, #30]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3720      	adds	r7, #32
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	efff69f3 	.word	0xefff69f3
 800688c:	40013800 	.word	0x40013800
 8006890:	40021000 	.word	0x40021000
 8006894:	40004400 	.word	0x40004400
 8006898:	40004800 	.word	0x40004800
 800689c:	007a1200 	.word	0x007a1200

080068a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00a      	beq.n	800690e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01a      	beq.n	80069b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699e:	d10a      	bne.n	80069b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	605a      	str	r2, [r3, #4]
  }
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069f4:	f7fb fd3e 	bl	8002474 <HAL_GetTick>
 80069f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d10e      	bne.n	8006a26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f82d 	bl	8006a76 <UART_WaitOnFlagUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e023      	b.n	8006a6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d10e      	bne.n	8006a52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f817 	bl	8006a76 <UART_WaitOnFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e00d      	b.n	8006a6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2220      	movs	r2, #32
 8006a56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b09c      	sub	sp, #112	; 0x70
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	603b      	str	r3, [r7, #0]
 8006a82:	4613      	mov	r3, r2
 8006a84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a86:	e0a5      	b.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8e:	f000 80a1 	beq.w	8006bd4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a92:	f7fb fcef 	bl	8002474 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d302      	bcc.n	8006aa8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006aa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d13e      	bne.n	8006b26 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006abc:	667b      	str	r3, [r7, #100]	; 0x64
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ac8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006acc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e6      	bne.n	8006aa8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aec:	f023 0301 	bic.w	r3, r3, #1
 8006af0:	663b      	str	r3, [r7, #96]	; 0x60
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3308      	adds	r3, #8
 8006af8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006afa:	64ba      	str	r2, [r7, #72]	; 0x48
 8006afc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e5      	bne.n	8006ada <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2220      	movs	r2, #32
 8006b12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2220      	movs	r2, #32
 8006b18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e067      	b.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d04f      	beq.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b42:	d147      	bne.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e6      	bne.n	8006b4e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3308      	adds	r3, #8
 8006b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	f023 0301 	bic.w	r3, r3, #1
 8006b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ba0:	623a      	str	r2, [r7, #32]
 8006ba2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	69f9      	ldr	r1, [r7, #28]
 8006ba6:	6a3a      	ldr	r2, [r7, #32]
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e5      	bne.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e010      	b.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	69da      	ldr	r2, [r3, #28]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	bf0c      	ite	eq
 8006be4:	2301      	moveq	r3, #1
 8006be6:	2300      	movne	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	461a      	mov	r2, r3
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	f43f af4a 	beq.w	8006a88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3770      	adds	r7, #112	; 0x70
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b091      	sub	sp, #68	; 0x44
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	88fa      	ldrh	r2, [r7, #6]
 8006c18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	88fa      	ldrh	r2, [r7, #6]
 8006c20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c32:	d10e      	bne.n	8006c52 <UART_Start_Receive_IT+0x52>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d105      	bne.n	8006c48 <UART_Start_Receive_IT+0x48>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006c42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c46:	e02d      	b.n	8006ca4 <UART_Start_Receive_IT+0xa4>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	22ff      	movs	r2, #255	; 0xff
 8006c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c50:	e028      	b.n	8006ca4 <UART_Start_Receive_IT+0xa4>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10d      	bne.n	8006c76 <UART_Start_Receive_IT+0x76>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d104      	bne.n	8006c6c <UART_Start_Receive_IT+0x6c>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	22ff      	movs	r2, #255	; 0xff
 8006c66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c6a:	e01b      	b.n	8006ca4 <UART_Start_Receive_IT+0xa4>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	227f      	movs	r2, #127	; 0x7f
 8006c70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c74:	e016      	b.n	8006ca4 <UART_Start_Receive_IT+0xa4>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c7e:	d10d      	bne.n	8006c9c <UART_Start_Receive_IT+0x9c>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d104      	bne.n	8006c92 <UART_Start_Receive_IT+0x92>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	227f      	movs	r2, #127	; 0x7f
 8006c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c90:	e008      	b.n	8006ca4 <UART_Start_Receive_IT+0xa4>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	223f      	movs	r2, #63	; 0x3f
 8006c96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c9a:	e003      	b.n	8006ca4 <UART_Start_Receive_IT+0xa4>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2222      	movs	r2, #34	; 0x22
 8006cb0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3308      	adds	r3, #8
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	f043 0301 	orr.w	r3, r3, #1
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3308      	adds	r3, #8
 8006cd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cd2:	637a      	str	r2, [r7, #52]	; 0x34
 8006cd4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e5      	bne.n	8006cb2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cee:	d107      	bne.n	8006d00 <UART_Start_Receive_IT+0x100>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d103      	bne.n	8006d00 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4a15      	ldr	r2, [pc, #84]	; (8006d50 <UART_Start_Receive_IT+0x150>)
 8006cfc:	665a      	str	r2, [r3, #100]	; 0x64
 8006cfe:	e002      	b.n	8006d06 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4a14      	ldr	r2, [pc, #80]	; (8006d54 <UART_Start_Receive_IT+0x154>)
 8006d04:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	e853 3f00 	ldrex	r3, [r3]
 8006d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006d22:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	623b      	str	r3, [r7, #32]
 8006d2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d30:	69f9      	ldr	r1, [r7, #28]
 8006d32:	6a3a      	ldr	r2, [r7, #32]
 8006d34:	e841 2300 	strex	r3, r2, [r1]
 8006d38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e6      	bne.n	8006d0e <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3744      	adds	r7, #68	; 0x44
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	08006ffb 	.word	0x08006ffb
 8006d54:	08006e9f 	.word	0x08006e9f

08006d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b095      	sub	sp, #84	; 0x54
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e6      	bne.n	8006d60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3308      	adds	r3, #8
 8006d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	f023 0301 	bic.w	r3, r3, #1
 8006da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3308      	adds	r3, #8
 8006db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006db4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e5      	bne.n	8006d92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d118      	bne.n	8006e00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f023 0310 	bic.w	r3, r3, #16
 8006de2:	647b      	str	r3, [r7, #68]	; 0x44
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	461a      	mov	r2, r3
 8006dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6979      	ldr	r1, [r7, #20]
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e6      	bne.n	8006dce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2220      	movs	r2, #32
 8006e04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006e12:	bf00      	nop
 8006e14:	3754      	adds	r7, #84	; 0x54
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b084      	sub	sp, #16
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f7ff fbe3 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b088      	sub	sp, #32
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e66:	61fb      	str	r3, [r7, #28]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	6979      	ldr	r1, [r7, #20]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e6      	bne.n	8006e52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2220      	movs	r2, #32
 8006e88:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff fbaf 	bl	80065f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e96:	bf00      	nop
 8006e98:	3720      	adds	r7, #32
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b096      	sub	sp, #88	; 0x58
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006eac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eb4:	2b22      	cmp	r3, #34	; 0x22
 8006eb6:	f040 8094 	bne.w	8006fe2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ec0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ec4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006ec8:	b2d9      	uxtb	r1, r3
 8006eca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed4:	400a      	ands	r2, r1
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d177      	bne.n	8006ff2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	e853 3f00 	ldrex	r3, [r3]
 8006f0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f16:	653b      	str	r3, [r7, #80]	; 0x50
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f20:	647b      	str	r3, [r7, #68]	; 0x44
 8006f22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f28:	e841 2300 	strex	r3, r2, [r1]
 8006f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1e6      	bne.n	8006f02 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3308      	adds	r3, #8
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	623b      	str	r3, [r7, #32]
   return(result);
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	f023 0301 	bic.w	r3, r3, #1
 8006f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3308      	adds	r3, #8
 8006f52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f54:	633a      	str	r2, [r7, #48]	; 0x30
 8006f56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f5c:	e841 2300 	strex	r3, r2, [r1]
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e5      	bne.n	8006f34 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d12e      	bne.n	8006fda <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0310 	bic.w	r3, r3, #16
 8006f96:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa0:	61fb      	str	r3, [r7, #28]
 8006fa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	69b9      	ldr	r1, [r7, #24]
 8006fa6:	69fa      	ldr	r2, [r7, #28]
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	617b      	str	r3, [r7, #20]
   return(result);
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e6      	bne.n	8006f82 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f003 0310 	and.w	r3, r3, #16
 8006fbe:	2b10      	cmp	r3, #16
 8006fc0:	d103      	bne.n	8006fca <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2210      	movs	r2, #16
 8006fc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fb22 	bl	800661c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fd8:	e00b      	b.n	8006ff2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fa fae6 	bl	80015ac <HAL_UART_RxCpltCallback>
}
 8006fe0:	e007      	b.n	8006ff2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	699a      	ldr	r2, [r3, #24]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f042 0208 	orr.w	r2, r2, #8
 8006ff0:	619a      	str	r2, [r3, #24]
}
 8006ff2:	bf00      	nop
 8006ff4:	3758      	adds	r7, #88	; 0x58
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b096      	sub	sp, #88	; 0x58
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007008:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007010:	2b22      	cmp	r3, #34	; 0x22
 8007012:	f040 8094 	bne.w	800713e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800701c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007024:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007026:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800702a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800702e:	4013      	ands	r3, r2
 8007030:	b29a      	uxth	r2, r3
 8007032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007034:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703a:	1c9a      	adds	r2, r3, #2
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007046:	b29b      	uxth	r3, r3
 8007048:	3b01      	subs	r3, #1
 800704a:	b29a      	uxth	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007058:	b29b      	uxth	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d177      	bne.n	800714e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800707c:	643b      	str	r3, [r7, #64]	; 0x40
 800707e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007082:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e6      	bne.n	800705e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3308      	adds	r3, #8
 8007096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	61fb      	str	r3, [r7, #28]
   return(result);
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e5      	bne.n	8007090 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d12e      	bne.n	8007136 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f023 0310 	bic.w	r3, r3, #16
 80070f2:	647b      	str	r3, [r7, #68]	; 0x44
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	6979      	ldr	r1, [r7, #20]
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	613b      	str	r3, [r7, #16]
   return(result);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e6      	bne.n	80070de <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	f003 0310 	and.w	r3, r3, #16
 800711a:	2b10      	cmp	r3, #16
 800711c:	d103      	bne.n	8007126 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2210      	movs	r2, #16
 8007124:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff fa74 	bl	800661c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007134:	e00b      	b.n	800714e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fa fa38 	bl	80015ac <HAL_UART_RxCpltCallback>
}
 800713c:	e007      	b.n	800714e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	699a      	ldr	r2, [r3, #24]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f042 0208 	orr.w	r2, r2, #8
 800714c:	619a      	str	r2, [r3, #24]
}
 800714e:	bf00      	nop
 8007150:	3758      	adds	r7, #88	; 0x58
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
	...

0800716c <__errno>:
 800716c:	4b01      	ldr	r3, [pc, #4]	; (8007174 <__errno+0x8>)
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20000060 	.word	0x20000060

08007178 <__libc_init_array>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	4d0d      	ldr	r5, [pc, #52]	; (80071b0 <__libc_init_array+0x38>)
 800717c:	4c0d      	ldr	r4, [pc, #52]	; (80071b4 <__libc_init_array+0x3c>)
 800717e:	1b64      	subs	r4, r4, r5
 8007180:	10a4      	asrs	r4, r4, #2
 8007182:	2600      	movs	r6, #0
 8007184:	42a6      	cmp	r6, r4
 8007186:	d109      	bne.n	800719c <__libc_init_array+0x24>
 8007188:	4d0b      	ldr	r5, [pc, #44]	; (80071b8 <__libc_init_array+0x40>)
 800718a:	4c0c      	ldr	r4, [pc, #48]	; (80071bc <__libc_init_array+0x44>)
 800718c:	f000 fc4e 	bl	8007a2c <_init>
 8007190:	1b64      	subs	r4, r4, r5
 8007192:	10a4      	asrs	r4, r4, #2
 8007194:	2600      	movs	r6, #0
 8007196:	42a6      	cmp	r6, r4
 8007198:	d105      	bne.n	80071a6 <__libc_init_array+0x2e>
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a0:	4798      	blx	r3
 80071a2:	3601      	adds	r6, #1
 80071a4:	e7ee      	b.n	8007184 <__libc_init_array+0xc>
 80071a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071aa:	4798      	blx	r3
 80071ac:	3601      	adds	r6, #1
 80071ae:	e7f2      	b.n	8007196 <__libc_init_array+0x1e>
 80071b0:	08007f74 	.word	0x08007f74
 80071b4:	08007f74 	.word	0x08007f74
 80071b8:	08007f74 	.word	0x08007f74
 80071bc:	08007f78 	.word	0x08007f78

080071c0 <memcpy>:
 80071c0:	440a      	add	r2, r1
 80071c2:	4291      	cmp	r1, r2
 80071c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071c8:	d100      	bne.n	80071cc <memcpy+0xc>
 80071ca:	4770      	bx	lr
 80071cc:	b510      	push	{r4, lr}
 80071ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071d6:	4291      	cmp	r1, r2
 80071d8:	d1f9      	bne.n	80071ce <memcpy+0xe>
 80071da:	bd10      	pop	{r4, pc}

080071dc <memset>:
 80071dc:	4402      	add	r2, r0
 80071de:	4603      	mov	r3, r0
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d100      	bne.n	80071e6 <memset+0xa>
 80071e4:	4770      	bx	lr
 80071e6:	f803 1b01 	strb.w	r1, [r3], #1
 80071ea:	e7f9      	b.n	80071e0 <memset+0x4>

080071ec <siprintf>:
 80071ec:	b40e      	push	{r1, r2, r3}
 80071ee:	b500      	push	{lr}
 80071f0:	b09c      	sub	sp, #112	; 0x70
 80071f2:	ab1d      	add	r3, sp, #116	; 0x74
 80071f4:	9002      	str	r0, [sp, #8]
 80071f6:	9006      	str	r0, [sp, #24]
 80071f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071fc:	4809      	ldr	r0, [pc, #36]	; (8007224 <siprintf+0x38>)
 80071fe:	9107      	str	r1, [sp, #28]
 8007200:	9104      	str	r1, [sp, #16]
 8007202:	4909      	ldr	r1, [pc, #36]	; (8007228 <siprintf+0x3c>)
 8007204:	f853 2b04 	ldr.w	r2, [r3], #4
 8007208:	9105      	str	r1, [sp, #20]
 800720a:	6800      	ldr	r0, [r0, #0]
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	a902      	add	r1, sp, #8
 8007210:	f000 f868 	bl	80072e4 <_svfiprintf_r>
 8007214:	9b02      	ldr	r3, [sp, #8]
 8007216:	2200      	movs	r2, #0
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	b01c      	add	sp, #112	; 0x70
 800721c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007220:	b003      	add	sp, #12
 8007222:	4770      	bx	lr
 8007224:	20000060 	.word	0x20000060
 8007228:	ffff0208 	.word	0xffff0208

0800722c <__ssputs_r>:
 800722c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007230:	688e      	ldr	r6, [r1, #8]
 8007232:	429e      	cmp	r6, r3
 8007234:	4682      	mov	sl, r0
 8007236:	460c      	mov	r4, r1
 8007238:	4690      	mov	r8, r2
 800723a:	461f      	mov	r7, r3
 800723c:	d838      	bhi.n	80072b0 <__ssputs_r+0x84>
 800723e:	898a      	ldrh	r2, [r1, #12]
 8007240:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007244:	d032      	beq.n	80072ac <__ssputs_r+0x80>
 8007246:	6825      	ldr	r5, [r4, #0]
 8007248:	6909      	ldr	r1, [r1, #16]
 800724a:	eba5 0901 	sub.w	r9, r5, r1
 800724e:	6965      	ldr	r5, [r4, #20]
 8007250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007258:	3301      	adds	r3, #1
 800725a:	444b      	add	r3, r9
 800725c:	106d      	asrs	r5, r5, #1
 800725e:	429d      	cmp	r5, r3
 8007260:	bf38      	it	cc
 8007262:	461d      	movcc	r5, r3
 8007264:	0553      	lsls	r3, r2, #21
 8007266:	d531      	bpl.n	80072cc <__ssputs_r+0xa0>
 8007268:	4629      	mov	r1, r5
 800726a:	f000 fb39 	bl	80078e0 <_malloc_r>
 800726e:	4606      	mov	r6, r0
 8007270:	b950      	cbnz	r0, 8007288 <__ssputs_r+0x5c>
 8007272:	230c      	movs	r3, #12
 8007274:	f8ca 3000 	str.w	r3, [sl]
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800727e:	81a3      	strh	r3, [r4, #12]
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007288:	6921      	ldr	r1, [r4, #16]
 800728a:	464a      	mov	r2, r9
 800728c:	f7ff ff98 	bl	80071c0 <memcpy>
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800729a:	81a3      	strh	r3, [r4, #12]
 800729c:	6126      	str	r6, [r4, #16]
 800729e:	6165      	str	r5, [r4, #20]
 80072a0:	444e      	add	r6, r9
 80072a2:	eba5 0509 	sub.w	r5, r5, r9
 80072a6:	6026      	str	r6, [r4, #0]
 80072a8:	60a5      	str	r5, [r4, #8]
 80072aa:	463e      	mov	r6, r7
 80072ac:	42be      	cmp	r6, r7
 80072ae:	d900      	bls.n	80072b2 <__ssputs_r+0x86>
 80072b0:	463e      	mov	r6, r7
 80072b2:	4632      	mov	r2, r6
 80072b4:	6820      	ldr	r0, [r4, #0]
 80072b6:	4641      	mov	r1, r8
 80072b8:	f000 faa8 	bl	800780c <memmove>
 80072bc:	68a3      	ldr	r3, [r4, #8]
 80072be:	6822      	ldr	r2, [r4, #0]
 80072c0:	1b9b      	subs	r3, r3, r6
 80072c2:	4432      	add	r2, r6
 80072c4:	60a3      	str	r3, [r4, #8]
 80072c6:	6022      	str	r2, [r4, #0]
 80072c8:	2000      	movs	r0, #0
 80072ca:	e7db      	b.n	8007284 <__ssputs_r+0x58>
 80072cc:	462a      	mov	r2, r5
 80072ce:	f000 fb61 	bl	8007994 <_realloc_r>
 80072d2:	4606      	mov	r6, r0
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d1e1      	bne.n	800729c <__ssputs_r+0x70>
 80072d8:	6921      	ldr	r1, [r4, #16]
 80072da:	4650      	mov	r0, sl
 80072dc:	f000 fab0 	bl	8007840 <_free_r>
 80072e0:	e7c7      	b.n	8007272 <__ssputs_r+0x46>
	...

080072e4 <_svfiprintf_r>:
 80072e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e8:	4698      	mov	r8, r3
 80072ea:	898b      	ldrh	r3, [r1, #12]
 80072ec:	061b      	lsls	r3, r3, #24
 80072ee:	b09d      	sub	sp, #116	; 0x74
 80072f0:	4607      	mov	r7, r0
 80072f2:	460d      	mov	r5, r1
 80072f4:	4614      	mov	r4, r2
 80072f6:	d50e      	bpl.n	8007316 <_svfiprintf_r+0x32>
 80072f8:	690b      	ldr	r3, [r1, #16]
 80072fa:	b963      	cbnz	r3, 8007316 <_svfiprintf_r+0x32>
 80072fc:	2140      	movs	r1, #64	; 0x40
 80072fe:	f000 faef 	bl	80078e0 <_malloc_r>
 8007302:	6028      	str	r0, [r5, #0]
 8007304:	6128      	str	r0, [r5, #16]
 8007306:	b920      	cbnz	r0, 8007312 <_svfiprintf_r+0x2e>
 8007308:	230c      	movs	r3, #12
 800730a:	603b      	str	r3, [r7, #0]
 800730c:	f04f 30ff 	mov.w	r0, #4294967295
 8007310:	e0d1      	b.n	80074b6 <_svfiprintf_r+0x1d2>
 8007312:	2340      	movs	r3, #64	; 0x40
 8007314:	616b      	str	r3, [r5, #20]
 8007316:	2300      	movs	r3, #0
 8007318:	9309      	str	r3, [sp, #36]	; 0x24
 800731a:	2320      	movs	r3, #32
 800731c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007320:	f8cd 800c 	str.w	r8, [sp, #12]
 8007324:	2330      	movs	r3, #48	; 0x30
 8007326:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074d0 <_svfiprintf_r+0x1ec>
 800732a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800732e:	f04f 0901 	mov.w	r9, #1
 8007332:	4623      	mov	r3, r4
 8007334:	469a      	mov	sl, r3
 8007336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800733a:	b10a      	cbz	r2, 8007340 <_svfiprintf_r+0x5c>
 800733c:	2a25      	cmp	r2, #37	; 0x25
 800733e:	d1f9      	bne.n	8007334 <_svfiprintf_r+0x50>
 8007340:	ebba 0b04 	subs.w	fp, sl, r4
 8007344:	d00b      	beq.n	800735e <_svfiprintf_r+0x7a>
 8007346:	465b      	mov	r3, fp
 8007348:	4622      	mov	r2, r4
 800734a:	4629      	mov	r1, r5
 800734c:	4638      	mov	r0, r7
 800734e:	f7ff ff6d 	bl	800722c <__ssputs_r>
 8007352:	3001      	adds	r0, #1
 8007354:	f000 80aa 	beq.w	80074ac <_svfiprintf_r+0x1c8>
 8007358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800735a:	445a      	add	r2, fp
 800735c:	9209      	str	r2, [sp, #36]	; 0x24
 800735e:	f89a 3000 	ldrb.w	r3, [sl]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 80a2 	beq.w	80074ac <_svfiprintf_r+0x1c8>
 8007368:	2300      	movs	r3, #0
 800736a:	f04f 32ff 	mov.w	r2, #4294967295
 800736e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007372:	f10a 0a01 	add.w	sl, sl, #1
 8007376:	9304      	str	r3, [sp, #16]
 8007378:	9307      	str	r3, [sp, #28]
 800737a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800737e:	931a      	str	r3, [sp, #104]	; 0x68
 8007380:	4654      	mov	r4, sl
 8007382:	2205      	movs	r2, #5
 8007384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007388:	4851      	ldr	r0, [pc, #324]	; (80074d0 <_svfiprintf_r+0x1ec>)
 800738a:	f7f8 ff21 	bl	80001d0 <memchr>
 800738e:	9a04      	ldr	r2, [sp, #16]
 8007390:	b9d8      	cbnz	r0, 80073ca <_svfiprintf_r+0xe6>
 8007392:	06d0      	lsls	r0, r2, #27
 8007394:	bf44      	itt	mi
 8007396:	2320      	movmi	r3, #32
 8007398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800739c:	0711      	lsls	r1, r2, #28
 800739e:	bf44      	itt	mi
 80073a0:	232b      	movmi	r3, #43	; 0x2b
 80073a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073a6:	f89a 3000 	ldrb.w	r3, [sl]
 80073aa:	2b2a      	cmp	r3, #42	; 0x2a
 80073ac:	d015      	beq.n	80073da <_svfiprintf_r+0xf6>
 80073ae:	9a07      	ldr	r2, [sp, #28]
 80073b0:	4654      	mov	r4, sl
 80073b2:	2000      	movs	r0, #0
 80073b4:	f04f 0c0a 	mov.w	ip, #10
 80073b8:	4621      	mov	r1, r4
 80073ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073be:	3b30      	subs	r3, #48	; 0x30
 80073c0:	2b09      	cmp	r3, #9
 80073c2:	d94e      	bls.n	8007462 <_svfiprintf_r+0x17e>
 80073c4:	b1b0      	cbz	r0, 80073f4 <_svfiprintf_r+0x110>
 80073c6:	9207      	str	r2, [sp, #28]
 80073c8:	e014      	b.n	80073f4 <_svfiprintf_r+0x110>
 80073ca:	eba0 0308 	sub.w	r3, r0, r8
 80073ce:	fa09 f303 	lsl.w	r3, r9, r3
 80073d2:	4313      	orrs	r3, r2
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	46a2      	mov	sl, r4
 80073d8:	e7d2      	b.n	8007380 <_svfiprintf_r+0x9c>
 80073da:	9b03      	ldr	r3, [sp, #12]
 80073dc:	1d19      	adds	r1, r3, #4
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	9103      	str	r1, [sp, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	bfbb      	ittet	lt
 80073e6:	425b      	neglt	r3, r3
 80073e8:	f042 0202 	orrlt.w	r2, r2, #2
 80073ec:	9307      	strge	r3, [sp, #28]
 80073ee:	9307      	strlt	r3, [sp, #28]
 80073f0:	bfb8      	it	lt
 80073f2:	9204      	strlt	r2, [sp, #16]
 80073f4:	7823      	ldrb	r3, [r4, #0]
 80073f6:	2b2e      	cmp	r3, #46	; 0x2e
 80073f8:	d10c      	bne.n	8007414 <_svfiprintf_r+0x130>
 80073fa:	7863      	ldrb	r3, [r4, #1]
 80073fc:	2b2a      	cmp	r3, #42	; 0x2a
 80073fe:	d135      	bne.n	800746c <_svfiprintf_r+0x188>
 8007400:	9b03      	ldr	r3, [sp, #12]
 8007402:	1d1a      	adds	r2, r3, #4
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	9203      	str	r2, [sp, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	bfb8      	it	lt
 800740c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007410:	3402      	adds	r4, #2
 8007412:	9305      	str	r3, [sp, #20]
 8007414:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80074e0 <_svfiprintf_r+0x1fc>
 8007418:	7821      	ldrb	r1, [r4, #0]
 800741a:	2203      	movs	r2, #3
 800741c:	4650      	mov	r0, sl
 800741e:	f7f8 fed7 	bl	80001d0 <memchr>
 8007422:	b140      	cbz	r0, 8007436 <_svfiprintf_r+0x152>
 8007424:	2340      	movs	r3, #64	; 0x40
 8007426:	eba0 000a 	sub.w	r0, r0, sl
 800742a:	fa03 f000 	lsl.w	r0, r3, r0
 800742e:	9b04      	ldr	r3, [sp, #16]
 8007430:	4303      	orrs	r3, r0
 8007432:	3401      	adds	r4, #1
 8007434:	9304      	str	r3, [sp, #16]
 8007436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800743a:	4826      	ldr	r0, [pc, #152]	; (80074d4 <_svfiprintf_r+0x1f0>)
 800743c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007440:	2206      	movs	r2, #6
 8007442:	f7f8 fec5 	bl	80001d0 <memchr>
 8007446:	2800      	cmp	r0, #0
 8007448:	d038      	beq.n	80074bc <_svfiprintf_r+0x1d8>
 800744a:	4b23      	ldr	r3, [pc, #140]	; (80074d8 <_svfiprintf_r+0x1f4>)
 800744c:	bb1b      	cbnz	r3, 8007496 <_svfiprintf_r+0x1b2>
 800744e:	9b03      	ldr	r3, [sp, #12]
 8007450:	3307      	adds	r3, #7
 8007452:	f023 0307 	bic.w	r3, r3, #7
 8007456:	3308      	adds	r3, #8
 8007458:	9303      	str	r3, [sp, #12]
 800745a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800745c:	4433      	add	r3, r6
 800745e:	9309      	str	r3, [sp, #36]	; 0x24
 8007460:	e767      	b.n	8007332 <_svfiprintf_r+0x4e>
 8007462:	fb0c 3202 	mla	r2, ip, r2, r3
 8007466:	460c      	mov	r4, r1
 8007468:	2001      	movs	r0, #1
 800746a:	e7a5      	b.n	80073b8 <_svfiprintf_r+0xd4>
 800746c:	2300      	movs	r3, #0
 800746e:	3401      	adds	r4, #1
 8007470:	9305      	str	r3, [sp, #20]
 8007472:	4619      	mov	r1, r3
 8007474:	f04f 0c0a 	mov.w	ip, #10
 8007478:	4620      	mov	r0, r4
 800747a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800747e:	3a30      	subs	r2, #48	; 0x30
 8007480:	2a09      	cmp	r2, #9
 8007482:	d903      	bls.n	800748c <_svfiprintf_r+0x1a8>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0c5      	beq.n	8007414 <_svfiprintf_r+0x130>
 8007488:	9105      	str	r1, [sp, #20]
 800748a:	e7c3      	b.n	8007414 <_svfiprintf_r+0x130>
 800748c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007490:	4604      	mov	r4, r0
 8007492:	2301      	movs	r3, #1
 8007494:	e7f0      	b.n	8007478 <_svfiprintf_r+0x194>
 8007496:	ab03      	add	r3, sp, #12
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	462a      	mov	r2, r5
 800749c:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <_svfiprintf_r+0x1f8>)
 800749e:	a904      	add	r1, sp, #16
 80074a0:	4638      	mov	r0, r7
 80074a2:	f3af 8000 	nop.w
 80074a6:	1c42      	adds	r2, r0, #1
 80074a8:	4606      	mov	r6, r0
 80074aa:	d1d6      	bne.n	800745a <_svfiprintf_r+0x176>
 80074ac:	89ab      	ldrh	r3, [r5, #12]
 80074ae:	065b      	lsls	r3, r3, #25
 80074b0:	f53f af2c 	bmi.w	800730c <_svfiprintf_r+0x28>
 80074b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074b6:	b01d      	add	sp, #116	; 0x74
 80074b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074bc:	ab03      	add	r3, sp, #12
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	462a      	mov	r2, r5
 80074c2:	4b06      	ldr	r3, [pc, #24]	; (80074dc <_svfiprintf_r+0x1f8>)
 80074c4:	a904      	add	r1, sp, #16
 80074c6:	4638      	mov	r0, r7
 80074c8:	f000 f87a 	bl	80075c0 <_printf_i>
 80074cc:	e7eb      	b.n	80074a6 <_svfiprintf_r+0x1c2>
 80074ce:	bf00      	nop
 80074d0:	08007f40 	.word	0x08007f40
 80074d4:	08007f4a 	.word	0x08007f4a
 80074d8:	00000000 	.word	0x00000000
 80074dc:	0800722d 	.word	0x0800722d
 80074e0:	08007f46 	.word	0x08007f46

080074e4 <_printf_common>:
 80074e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e8:	4616      	mov	r6, r2
 80074ea:	4699      	mov	r9, r3
 80074ec:	688a      	ldr	r2, [r1, #8]
 80074ee:	690b      	ldr	r3, [r1, #16]
 80074f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074f4:	4293      	cmp	r3, r2
 80074f6:	bfb8      	it	lt
 80074f8:	4613      	movlt	r3, r2
 80074fa:	6033      	str	r3, [r6, #0]
 80074fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007500:	4607      	mov	r7, r0
 8007502:	460c      	mov	r4, r1
 8007504:	b10a      	cbz	r2, 800750a <_printf_common+0x26>
 8007506:	3301      	adds	r3, #1
 8007508:	6033      	str	r3, [r6, #0]
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	0699      	lsls	r1, r3, #26
 800750e:	bf42      	ittt	mi
 8007510:	6833      	ldrmi	r3, [r6, #0]
 8007512:	3302      	addmi	r3, #2
 8007514:	6033      	strmi	r3, [r6, #0]
 8007516:	6825      	ldr	r5, [r4, #0]
 8007518:	f015 0506 	ands.w	r5, r5, #6
 800751c:	d106      	bne.n	800752c <_printf_common+0x48>
 800751e:	f104 0a19 	add.w	sl, r4, #25
 8007522:	68e3      	ldr	r3, [r4, #12]
 8007524:	6832      	ldr	r2, [r6, #0]
 8007526:	1a9b      	subs	r3, r3, r2
 8007528:	42ab      	cmp	r3, r5
 800752a:	dc26      	bgt.n	800757a <_printf_common+0x96>
 800752c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007530:	1e13      	subs	r3, r2, #0
 8007532:	6822      	ldr	r2, [r4, #0]
 8007534:	bf18      	it	ne
 8007536:	2301      	movne	r3, #1
 8007538:	0692      	lsls	r2, r2, #26
 800753a:	d42b      	bmi.n	8007594 <_printf_common+0xb0>
 800753c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007540:	4649      	mov	r1, r9
 8007542:	4638      	mov	r0, r7
 8007544:	47c0      	blx	r8
 8007546:	3001      	adds	r0, #1
 8007548:	d01e      	beq.n	8007588 <_printf_common+0xa4>
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	68e5      	ldr	r5, [r4, #12]
 800754e:	6832      	ldr	r2, [r6, #0]
 8007550:	f003 0306 	and.w	r3, r3, #6
 8007554:	2b04      	cmp	r3, #4
 8007556:	bf08      	it	eq
 8007558:	1aad      	subeq	r5, r5, r2
 800755a:	68a3      	ldr	r3, [r4, #8]
 800755c:	6922      	ldr	r2, [r4, #16]
 800755e:	bf0c      	ite	eq
 8007560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007564:	2500      	movne	r5, #0
 8007566:	4293      	cmp	r3, r2
 8007568:	bfc4      	itt	gt
 800756a:	1a9b      	subgt	r3, r3, r2
 800756c:	18ed      	addgt	r5, r5, r3
 800756e:	2600      	movs	r6, #0
 8007570:	341a      	adds	r4, #26
 8007572:	42b5      	cmp	r5, r6
 8007574:	d11a      	bne.n	80075ac <_printf_common+0xc8>
 8007576:	2000      	movs	r0, #0
 8007578:	e008      	b.n	800758c <_printf_common+0xa8>
 800757a:	2301      	movs	r3, #1
 800757c:	4652      	mov	r2, sl
 800757e:	4649      	mov	r1, r9
 8007580:	4638      	mov	r0, r7
 8007582:	47c0      	blx	r8
 8007584:	3001      	adds	r0, #1
 8007586:	d103      	bne.n	8007590 <_printf_common+0xac>
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007590:	3501      	adds	r5, #1
 8007592:	e7c6      	b.n	8007522 <_printf_common+0x3e>
 8007594:	18e1      	adds	r1, r4, r3
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	2030      	movs	r0, #48	; 0x30
 800759a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800759e:	4422      	add	r2, r4
 80075a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075a8:	3302      	adds	r3, #2
 80075aa:	e7c7      	b.n	800753c <_printf_common+0x58>
 80075ac:	2301      	movs	r3, #1
 80075ae:	4622      	mov	r2, r4
 80075b0:	4649      	mov	r1, r9
 80075b2:	4638      	mov	r0, r7
 80075b4:	47c0      	blx	r8
 80075b6:	3001      	adds	r0, #1
 80075b8:	d0e6      	beq.n	8007588 <_printf_common+0xa4>
 80075ba:	3601      	adds	r6, #1
 80075bc:	e7d9      	b.n	8007572 <_printf_common+0x8e>
	...

080075c0 <_printf_i>:
 80075c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075c4:	460c      	mov	r4, r1
 80075c6:	4691      	mov	r9, r2
 80075c8:	7e27      	ldrb	r7, [r4, #24]
 80075ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075cc:	2f78      	cmp	r7, #120	; 0x78
 80075ce:	4680      	mov	r8, r0
 80075d0:	469a      	mov	sl, r3
 80075d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075d6:	d807      	bhi.n	80075e8 <_printf_i+0x28>
 80075d8:	2f62      	cmp	r7, #98	; 0x62
 80075da:	d80a      	bhi.n	80075f2 <_printf_i+0x32>
 80075dc:	2f00      	cmp	r7, #0
 80075de:	f000 80d8 	beq.w	8007792 <_printf_i+0x1d2>
 80075e2:	2f58      	cmp	r7, #88	; 0x58
 80075e4:	f000 80a3 	beq.w	800772e <_printf_i+0x16e>
 80075e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075f0:	e03a      	b.n	8007668 <_printf_i+0xa8>
 80075f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075f6:	2b15      	cmp	r3, #21
 80075f8:	d8f6      	bhi.n	80075e8 <_printf_i+0x28>
 80075fa:	a001      	add	r0, pc, #4	; (adr r0, 8007600 <_printf_i+0x40>)
 80075fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007600:	08007659 	.word	0x08007659
 8007604:	0800766d 	.word	0x0800766d
 8007608:	080075e9 	.word	0x080075e9
 800760c:	080075e9 	.word	0x080075e9
 8007610:	080075e9 	.word	0x080075e9
 8007614:	080075e9 	.word	0x080075e9
 8007618:	0800766d 	.word	0x0800766d
 800761c:	080075e9 	.word	0x080075e9
 8007620:	080075e9 	.word	0x080075e9
 8007624:	080075e9 	.word	0x080075e9
 8007628:	080075e9 	.word	0x080075e9
 800762c:	08007779 	.word	0x08007779
 8007630:	0800769d 	.word	0x0800769d
 8007634:	0800775b 	.word	0x0800775b
 8007638:	080075e9 	.word	0x080075e9
 800763c:	080075e9 	.word	0x080075e9
 8007640:	0800779b 	.word	0x0800779b
 8007644:	080075e9 	.word	0x080075e9
 8007648:	0800769d 	.word	0x0800769d
 800764c:	080075e9 	.word	0x080075e9
 8007650:	080075e9 	.word	0x080075e9
 8007654:	08007763 	.word	0x08007763
 8007658:	680b      	ldr	r3, [r1, #0]
 800765a:	1d1a      	adds	r2, r3, #4
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	600a      	str	r2, [r1, #0]
 8007660:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007668:	2301      	movs	r3, #1
 800766a:	e0a3      	b.n	80077b4 <_printf_i+0x1f4>
 800766c:	6825      	ldr	r5, [r4, #0]
 800766e:	6808      	ldr	r0, [r1, #0]
 8007670:	062e      	lsls	r6, r5, #24
 8007672:	f100 0304 	add.w	r3, r0, #4
 8007676:	d50a      	bpl.n	800768e <_printf_i+0xce>
 8007678:	6805      	ldr	r5, [r0, #0]
 800767a:	600b      	str	r3, [r1, #0]
 800767c:	2d00      	cmp	r5, #0
 800767e:	da03      	bge.n	8007688 <_printf_i+0xc8>
 8007680:	232d      	movs	r3, #45	; 0x2d
 8007682:	426d      	negs	r5, r5
 8007684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007688:	485e      	ldr	r0, [pc, #376]	; (8007804 <_printf_i+0x244>)
 800768a:	230a      	movs	r3, #10
 800768c:	e019      	b.n	80076c2 <_printf_i+0x102>
 800768e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007692:	6805      	ldr	r5, [r0, #0]
 8007694:	600b      	str	r3, [r1, #0]
 8007696:	bf18      	it	ne
 8007698:	b22d      	sxthne	r5, r5
 800769a:	e7ef      	b.n	800767c <_printf_i+0xbc>
 800769c:	680b      	ldr	r3, [r1, #0]
 800769e:	6825      	ldr	r5, [r4, #0]
 80076a0:	1d18      	adds	r0, r3, #4
 80076a2:	6008      	str	r0, [r1, #0]
 80076a4:	0628      	lsls	r0, r5, #24
 80076a6:	d501      	bpl.n	80076ac <_printf_i+0xec>
 80076a8:	681d      	ldr	r5, [r3, #0]
 80076aa:	e002      	b.n	80076b2 <_printf_i+0xf2>
 80076ac:	0669      	lsls	r1, r5, #25
 80076ae:	d5fb      	bpl.n	80076a8 <_printf_i+0xe8>
 80076b0:	881d      	ldrh	r5, [r3, #0]
 80076b2:	4854      	ldr	r0, [pc, #336]	; (8007804 <_printf_i+0x244>)
 80076b4:	2f6f      	cmp	r7, #111	; 0x6f
 80076b6:	bf0c      	ite	eq
 80076b8:	2308      	moveq	r3, #8
 80076ba:	230a      	movne	r3, #10
 80076bc:	2100      	movs	r1, #0
 80076be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076c2:	6866      	ldr	r6, [r4, #4]
 80076c4:	60a6      	str	r6, [r4, #8]
 80076c6:	2e00      	cmp	r6, #0
 80076c8:	bfa2      	ittt	ge
 80076ca:	6821      	ldrge	r1, [r4, #0]
 80076cc:	f021 0104 	bicge.w	r1, r1, #4
 80076d0:	6021      	strge	r1, [r4, #0]
 80076d2:	b90d      	cbnz	r5, 80076d8 <_printf_i+0x118>
 80076d4:	2e00      	cmp	r6, #0
 80076d6:	d04d      	beq.n	8007774 <_printf_i+0x1b4>
 80076d8:	4616      	mov	r6, r2
 80076da:	fbb5 f1f3 	udiv	r1, r5, r3
 80076de:	fb03 5711 	mls	r7, r3, r1, r5
 80076e2:	5dc7      	ldrb	r7, [r0, r7]
 80076e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076e8:	462f      	mov	r7, r5
 80076ea:	42bb      	cmp	r3, r7
 80076ec:	460d      	mov	r5, r1
 80076ee:	d9f4      	bls.n	80076da <_printf_i+0x11a>
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d10b      	bne.n	800770c <_printf_i+0x14c>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	07df      	lsls	r7, r3, #31
 80076f8:	d508      	bpl.n	800770c <_printf_i+0x14c>
 80076fa:	6923      	ldr	r3, [r4, #16]
 80076fc:	6861      	ldr	r1, [r4, #4]
 80076fe:	4299      	cmp	r1, r3
 8007700:	bfde      	ittt	le
 8007702:	2330      	movle	r3, #48	; 0x30
 8007704:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007708:	f106 36ff 	addle.w	r6, r6, #4294967295
 800770c:	1b92      	subs	r2, r2, r6
 800770e:	6122      	str	r2, [r4, #16]
 8007710:	f8cd a000 	str.w	sl, [sp]
 8007714:	464b      	mov	r3, r9
 8007716:	aa03      	add	r2, sp, #12
 8007718:	4621      	mov	r1, r4
 800771a:	4640      	mov	r0, r8
 800771c:	f7ff fee2 	bl	80074e4 <_printf_common>
 8007720:	3001      	adds	r0, #1
 8007722:	d14c      	bne.n	80077be <_printf_i+0x1fe>
 8007724:	f04f 30ff 	mov.w	r0, #4294967295
 8007728:	b004      	add	sp, #16
 800772a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772e:	4835      	ldr	r0, [pc, #212]	; (8007804 <_printf_i+0x244>)
 8007730:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	680e      	ldr	r6, [r1, #0]
 8007738:	061f      	lsls	r7, r3, #24
 800773a:	f856 5b04 	ldr.w	r5, [r6], #4
 800773e:	600e      	str	r6, [r1, #0]
 8007740:	d514      	bpl.n	800776c <_printf_i+0x1ac>
 8007742:	07d9      	lsls	r1, r3, #31
 8007744:	bf44      	itt	mi
 8007746:	f043 0320 	orrmi.w	r3, r3, #32
 800774a:	6023      	strmi	r3, [r4, #0]
 800774c:	b91d      	cbnz	r5, 8007756 <_printf_i+0x196>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	f023 0320 	bic.w	r3, r3, #32
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	2310      	movs	r3, #16
 8007758:	e7b0      	b.n	80076bc <_printf_i+0xfc>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	f043 0320 	orr.w	r3, r3, #32
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	2378      	movs	r3, #120	; 0x78
 8007764:	4828      	ldr	r0, [pc, #160]	; (8007808 <_printf_i+0x248>)
 8007766:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800776a:	e7e3      	b.n	8007734 <_printf_i+0x174>
 800776c:	065e      	lsls	r6, r3, #25
 800776e:	bf48      	it	mi
 8007770:	b2ad      	uxthmi	r5, r5
 8007772:	e7e6      	b.n	8007742 <_printf_i+0x182>
 8007774:	4616      	mov	r6, r2
 8007776:	e7bb      	b.n	80076f0 <_printf_i+0x130>
 8007778:	680b      	ldr	r3, [r1, #0]
 800777a:	6826      	ldr	r6, [r4, #0]
 800777c:	6960      	ldr	r0, [r4, #20]
 800777e:	1d1d      	adds	r5, r3, #4
 8007780:	600d      	str	r5, [r1, #0]
 8007782:	0635      	lsls	r5, r6, #24
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	d501      	bpl.n	800778c <_printf_i+0x1cc>
 8007788:	6018      	str	r0, [r3, #0]
 800778a:	e002      	b.n	8007792 <_printf_i+0x1d2>
 800778c:	0671      	lsls	r1, r6, #25
 800778e:	d5fb      	bpl.n	8007788 <_printf_i+0x1c8>
 8007790:	8018      	strh	r0, [r3, #0]
 8007792:	2300      	movs	r3, #0
 8007794:	6123      	str	r3, [r4, #16]
 8007796:	4616      	mov	r6, r2
 8007798:	e7ba      	b.n	8007710 <_printf_i+0x150>
 800779a:	680b      	ldr	r3, [r1, #0]
 800779c:	1d1a      	adds	r2, r3, #4
 800779e:	600a      	str	r2, [r1, #0]
 80077a0:	681e      	ldr	r6, [r3, #0]
 80077a2:	6862      	ldr	r2, [r4, #4]
 80077a4:	2100      	movs	r1, #0
 80077a6:	4630      	mov	r0, r6
 80077a8:	f7f8 fd12 	bl	80001d0 <memchr>
 80077ac:	b108      	cbz	r0, 80077b2 <_printf_i+0x1f2>
 80077ae:	1b80      	subs	r0, r0, r6
 80077b0:	6060      	str	r0, [r4, #4]
 80077b2:	6863      	ldr	r3, [r4, #4]
 80077b4:	6123      	str	r3, [r4, #16]
 80077b6:	2300      	movs	r3, #0
 80077b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077bc:	e7a8      	b.n	8007710 <_printf_i+0x150>
 80077be:	6923      	ldr	r3, [r4, #16]
 80077c0:	4632      	mov	r2, r6
 80077c2:	4649      	mov	r1, r9
 80077c4:	4640      	mov	r0, r8
 80077c6:	47d0      	blx	sl
 80077c8:	3001      	adds	r0, #1
 80077ca:	d0ab      	beq.n	8007724 <_printf_i+0x164>
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	079b      	lsls	r3, r3, #30
 80077d0:	d413      	bmi.n	80077fa <_printf_i+0x23a>
 80077d2:	68e0      	ldr	r0, [r4, #12]
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	4298      	cmp	r0, r3
 80077d8:	bfb8      	it	lt
 80077da:	4618      	movlt	r0, r3
 80077dc:	e7a4      	b.n	8007728 <_printf_i+0x168>
 80077de:	2301      	movs	r3, #1
 80077e0:	4632      	mov	r2, r6
 80077e2:	4649      	mov	r1, r9
 80077e4:	4640      	mov	r0, r8
 80077e6:	47d0      	blx	sl
 80077e8:	3001      	adds	r0, #1
 80077ea:	d09b      	beq.n	8007724 <_printf_i+0x164>
 80077ec:	3501      	adds	r5, #1
 80077ee:	68e3      	ldr	r3, [r4, #12]
 80077f0:	9903      	ldr	r1, [sp, #12]
 80077f2:	1a5b      	subs	r3, r3, r1
 80077f4:	42ab      	cmp	r3, r5
 80077f6:	dcf2      	bgt.n	80077de <_printf_i+0x21e>
 80077f8:	e7eb      	b.n	80077d2 <_printf_i+0x212>
 80077fa:	2500      	movs	r5, #0
 80077fc:	f104 0619 	add.w	r6, r4, #25
 8007800:	e7f5      	b.n	80077ee <_printf_i+0x22e>
 8007802:	bf00      	nop
 8007804:	08007f51 	.word	0x08007f51
 8007808:	08007f62 	.word	0x08007f62

0800780c <memmove>:
 800780c:	4288      	cmp	r0, r1
 800780e:	b510      	push	{r4, lr}
 8007810:	eb01 0402 	add.w	r4, r1, r2
 8007814:	d902      	bls.n	800781c <memmove+0x10>
 8007816:	4284      	cmp	r4, r0
 8007818:	4623      	mov	r3, r4
 800781a:	d807      	bhi.n	800782c <memmove+0x20>
 800781c:	1e43      	subs	r3, r0, #1
 800781e:	42a1      	cmp	r1, r4
 8007820:	d008      	beq.n	8007834 <memmove+0x28>
 8007822:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800782a:	e7f8      	b.n	800781e <memmove+0x12>
 800782c:	4402      	add	r2, r0
 800782e:	4601      	mov	r1, r0
 8007830:	428a      	cmp	r2, r1
 8007832:	d100      	bne.n	8007836 <memmove+0x2a>
 8007834:	bd10      	pop	{r4, pc}
 8007836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800783a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800783e:	e7f7      	b.n	8007830 <memmove+0x24>

08007840 <_free_r>:
 8007840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007842:	2900      	cmp	r1, #0
 8007844:	d048      	beq.n	80078d8 <_free_r+0x98>
 8007846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800784a:	9001      	str	r0, [sp, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f1a1 0404 	sub.w	r4, r1, #4
 8007852:	bfb8      	it	lt
 8007854:	18e4      	addlt	r4, r4, r3
 8007856:	f000 f8d3 	bl	8007a00 <__malloc_lock>
 800785a:	4a20      	ldr	r2, [pc, #128]	; (80078dc <_free_r+0x9c>)
 800785c:	9801      	ldr	r0, [sp, #4]
 800785e:	6813      	ldr	r3, [r2, #0]
 8007860:	4615      	mov	r5, r2
 8007862:	b933      	cbnz	r3, 8007872 <_free_r+0x32>
 8007864:	6063      	str	r3, [r4, #4]
 8007866:	6014      	str	r4, [r2, #0]
 8007868:	b003      	add	sp, #12
 800786a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800786e:	f000 b8cd 	b.w	8007a0c <__malloc_unlock>
 8007872:	42a3      	cmp	r3, r4
 8007874:	d90b      	bls.n	800788e <_free_r+0x4e>
 8007876:	6821      	ldr	r1, [r4, #0]
 8007878:	1862      	adds	r2, r4, r1
 800787a:	4293      	cmp	r3, r2
 800787c:	bf04      	itt	eq
 800787e:	681a      	ldreq	r2, [r3, #0]
 8007880:	685b      	ldreq	r3, [r3, #4]
 8007882:	6063      	str	r3, [r4, #4]
 8007884:	bf04      	itt	eq
 8007886:	1852      	addeq	r2, r2, r1
 8007888:	6022      	streq	r2, [r4, #0]
 800788a:	602c      	str	r4, [r5, #0]
 800788c:	e7ec      	b.n	8007868 <_free_r+0x28>
 800788e:	461a      	mov	r2, r3
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	b10b      	cbz	r3, 8007898 <_free_r+0x58>
 8007894:	42a3      	cmp	r3, r4
 8007896:	d9fa      	bls.n	800788e <_free_r+0x4e>
 8007898:	6811      	ldr	r1, [r2, #0]
 800789a:	1855      	adds	r5, r2, r1
 800789c:	42a5      	cmp	r5, r4
 800789e:	d10b      	bne.n	80078b8 <_free_r+0x78>
 80078a0:	6824      	ldr	r4, [r4, #0]
 80078a2:	4421      	add	r1, r4
 80078a4:	1854      	adds	r4, r2, r1
 80078a6:	42a3      	cmp	r3, r4
 80078a8:	6011      	str	r1, [r2, #0]
 80078aa:	d1dd      	bne.n	8007868 <_free_r+0x28>
 80078ac:	681c      	ldr	r4, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	6053      	str	r3, [r2, #4]
 80078b2:	4421      	add	r1, r4
 80078b4:	6011      	str	r1, [r2, #0]
 80078b6:	e7d7      	b.n	8007868 <_free_r+0x28>
 80078b8:	d902      	bls.n	80078c0 <_free_r+0x80>
 80078ba:	230c      	movs	r3, #12
 80078bc:	6003      	str	r3, [r0, #0]
 80078be:	e7d3      	b.n	8007868 <_free_r+0x28>
 80078c0:	6825      	ldr	r5, [r4, #0]
 80078c2:	1961      	adds	r1, r4, r5
 80078c4:	428b      	cmp	r3, r1
 80078c6:	bf04      	itt	eq
 80078c8:	6819      	ldreq	r1, [r3, #0]
 80078ca:	685b      	ldreq	r3, [r3, #4]
 80078cc:	6063      	str	r3, [r4, #4]
 80078ce:	bf04      	itt	eq
 80078d0:	1949      	addeq	r1, r1, r5
 80078d2:	6021      	streq	r1, [r4, #0]
 80078d4:	6054      	str	r4, [r2, #4]
 80078d6:	e7c7      	b.n	8007868 <_free_r+0x28>
 80078d8:	b003      	add	sp, #12
 80078da:	bd30      	pop	{r4, r5, pc}
 80078dc:	20000148 	.word	0x20000148

080078e0 <_malloc_r>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	1ccd      	adds	r5, r1, #3
 80078e4:	f025 0503 	bic.w	r5, r5, #3
 80078e8:	3508      	adds	r5, #8
 80078ea:	2d0c      	cmp	r5, #12
 80078ec:	bf38      	it	cc
 80078ee:	250c      	movcc	r5, #12
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	4606      	mov	r6, r0
 80078f4:	db01      	blt.n	80078fa <_malloc_r+0x1a>
 80078f6:	42a9      	cmp	r1, r5
 80078f8:	d903      	bls.n	8007902 <_malloc_r+0x22>
 80078fa:	230c      	movs	r3, #12
 80078fc:	6033      	str	r3, [r6, #0]
 80078fe:	2000      	movs	r0, #0
 8007900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007902:	f000 f87d 	bl	8007a00 <__malloc_lock>
 8007906:	4921      	ldr	r1, [pc, #132]	; (800798c <_malloc_r+0xac>)
 8007908:	680a      	ldr	r2, [r1, #0]
 800790a:	4614      	mov	r4, r2
 800790c:	b99c      	cbnz	r4, 8007936 <_malloc_r+0x56>
 800790e:	4f20      	ldr	r7, [pc, #128]	; (8007990 <_malloc_r+0xb0>)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	b923      	cbnz	r3, 800791e <_malloc_r+0x3e>
 8007914:	4621      	mov	r1, r4
 8007916:	4630      	mov	r0, r6
 8007918:	f000 f862 	bl	80079e0 <_sbrk_r>
 800791c:	6038      	str	r0, [r7, #0]
 800791e:	4629      	mov	r1, r5
 8007920:	4630      	mov	r0, r6
 8007922:	f000 f85d 	bl	80079e0 <_sbrk_r>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	d123      	bne.n	8007972 <_malloc_r+0x92>
 800792a:	230c      	movs	r3, #12
 800792c:	6033      	str	r3, [r6, #0]
 800792e:	4630      	mov	r0, r6
 8007930:	f000 f86c 	bl	8007a0c <__malloc_unlock>
 8007934:	e7e3      	b.n	80078fe <_malloc_r+0x1e>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	1b5b      	subs	r3, r3, r5
 800793a:	d417      	bmi.n	800796c <_malloc_r+0x8c>
 800793c:	2b0b      	cmp	r3, #11
 800793e:	d903      	bls.n	8007948 <_malloc_r+0x68>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	441c      	add	r4, r3
 8007944:	6025      	str	r5, [r4, #0]
 8007946:	e004      	b.n	8007952 <_malloc_r+0x72>
 8007948:	6863      	ldr	r3, [r4, #4]
 800794a:	42a2      	cmp	r2, r4
 800794c:	bf0c      	ite	eq
 800794e:	600b      	streq	r3, [r1, #0]
 8007950:	6053      	strne	r3, [r2, #4]
 8007952:	4630      	mov	r0, r6
 8007954:	f000 f85a 	bl	8007a0c <__malloc_unlock>
 8007958:	f104 000b 	add.w	r0, r4, #11
 800795c:	1d23      	adds	r3, r4, #4
 800795e:	f020 0007 	bic.w	r0, r0, #7
 8007962:	1ac2      	subs	r2, r0, r3
 8007964:	d0cc      	beq.n	8007900 <_malloc_r+0x20>
 8007966:	1a1b      	subs	r3, r3, r0
 8007968:	50a3      	str	r3, [r4, r2]
 800796a:	e7c9      	b.n	8007900 <_malloc_r+0x20>
 800796c:	4622      	mov	r2, r4
 800796e:	6864      	ldr	r4, [r4, #4]
 8007970:	e7cc      	b.n	800790c <_malloc_r+0x2c>
 8007972:	1cc4      	adds	r4, r0, #3
 8007974:	f024 0403 	bic.w	r4, r4, #3
 8007978:	42a0      	cmp	r0, r4
 800797a:	d0e3      	beq.n	8007944 <_malloc_r+0x64>
 800797c:	1a21      	subs	r1, r4, r0
 800797e:	4630      	mov	r0, r6
 8007980:	f000 f82e 	bl	80079e0 <_sbrk_r>
 8007984:	3001      	adds	r0, #1
 8007986:	d1dd      	bne.n	8007944 <_malloc_r+0x64>
 8007988:	e7cf      	b.n	800792a <_malloc_r+0x4a>
 800798a:	bf00      	nop
 800798c:	20000148 	.word	0x20000148
 8007990:	2000014c 	.word	0x2000014c

08007994 <_realloc_r>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	4607      	mov	r7, r0
 8007998:	4614      	mov	r4, r2
 800799a:	460e      	mov	r6, r1
 800799c:	b921      	cbnz	r1, 80079a8 <_realloc_r+0x14>
 800799e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079a2:	4611      	mov	r1, r2
 80079a4:	f7ff bf9c 	b.w	80078e0 <_malloc_r>
 80079a8:	b922      	cbnz	r2, 80079b4 <_realloc_r+0x20>
 80079aa:	f7ff ff49 	bl	8007840 <_free_r>
 80079ae:	4625      	mov	r5, r4
 80079b0:	4628      	mov	r0, r5
 80079b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b4:	f000 f830 	bl	8007a18 <_malloc_usable_size_r>
 80079b8:	42a0      	cmp	r0, r4
 80079ba:	d20f      	bcs.n	80079dc <_realloc_r+0x48>
 80079bc:	4621      	mov	r1, r4
 80079be:	4638      	mov	r0, r7
 80079c0:	f7ff ff8e 	bl	80078e0 <_malloc_r>
 80079c4:	4605      	mov	r5, r0
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d0f2      	beq.n	80079b0 <_realloc_r+0x1c>
 80079ca:	4631      	mov	r1, r6
 80079cc:	4622      	mov	r2, r4
 80079ce:	f7ff fbf7 	bl	80071c0 <memcpy>
 80079d2:	4631      	mov	r1, r6
 80079d4:	4638      	mov	r0, r7
 80079d6:	f7ff ff33 	bl	8007840 <_free_r>
 80079da:	e7e9      	b.n	80079b0 <_realloc_r+0x1c>
 80079dc:	4635      	mov	r5, r6
 80079de:	e7e7      	b.n	80079b0 <_realloc_r+0x1c>

080079e0 <_sbrk_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4d06      	ldr	r5, [pc, #24]	; (80079fc <_sbrk_r+0x1c>)
 80079e4:	2300      	movs	r3, #0
 80079e6:	4604      	mov	r4, r0
 80079e8:	4608      	mov	r0, r1
 80079ea:	602b      	str	r3, [r5, #0]
 80079ec:	f7fa fc76 	bl	80022dc <_sbrk>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d102      	bne.n	80079fa <_sbrk_r+0x1a>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b103      	cbz	r3, 80079fa <_sbrk_r+0x1a>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	bd38      	pop	{r3, r4, r5, pc}
 80079fc:	200004e4 	.word	0x200004e4

08007a00 <__malloc_lock>:
 8007a00:	4801      	ldr	r0, [pc, #4]	; (8007a08 <__malloc_lock+0x8>)
 8007a02:	f000 b811 	b.w	8007a28 <__retarget_lock_acquire_recursive>
 8007a06:	bf00      	nop
 8007a08:	200004ec 	.word	0x200004ec

08007a0c <__malloc_unlock>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	; (8007a14 <__malloc_unlock+0x8>)
 8007a0e:	f000 b80c 	b.w	8007a2a <__retarget_lock_release_recursive>
 8007a12:	bf00      	nop
 8007a14:	200004ec 	.word	0x200004ec

08007a18 <_malloc_usable_size_r>:
 8007a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a1c:	1f18      	subs	r0, r3, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bfbc      	itt	lt
 8007a22:	580b      	ldrlt	r3, [r1, r0]
 8007a24:	18c0      	addlt	r0, r0, r3
 8007a26:	4770      	bx	lr

08007a28 <__retarget_lock_acquire_recursive>:
 8007a28:	4770      	bx	lr

08007a2a <__retarget_lock_release_recursive>:
 8007a2a:	4770      	bx	lr

08007a2c <_init>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	bf00      	nop
 8007a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a32:	bc08      	pop	{r3}
 8007a34:	469e      	mov	lr, r3
 8007a36:	4770      	bx	lr

08007a38 <_fini>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	bf00      	nop
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr
